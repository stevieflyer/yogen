hi everyone and welcome to this video my
name is Van Dot and I'm a senior full
stack developer on my channel I usually
talk about flutter Swift rust Django and
python and in this particular video
we're going to talk about riverpot which
is a state management solution for
flutter before we get started I just
want to ask you to please subscribe to
my YouTube channel if you haven't
already so you get notified about new
videos as I publish them and also please
do follow me on social media on Twitter
and on LinkedIn I'm quite active Duran
and usually writes quite a lot of tips
and tricks about typescript JavaScript
flutter you name it
now
if you want to support me as well a lot
of people have asked me about that there
is a join button on my YouTube channel
which you can which you can use in order
to also monetarily support me if that's
something that you want to do but that
is definitely not required in this video
we're going to be using flutter 3 and
also riverpot 2 which has just come out
and we will first look at some very
simple examples of how riverpot works
and we will basically start off very
simple by creating some simple providers
and hooking our applications to it and
but then at the end of this video we're
going to go ahead and create a
full-fledged Instagram clone application
with flutter and River pot too so
it's gonna gradually get more
complicated and um I will try to break
down things as much as I can and without
compromising the lengths of this video
because I'm quite worried that this
video could run to maybe 20 to 30 hours
it could get quite difficult for me also
to record it so let's just take it slow
in the beginning and I'll try to break
things down as much as I can without
doing it too much and also I have to
mention that this course is for people
who are already familiar with flutter so
I'm not gonna go through the details of
how flutter actually works or dark how
Dart works you need to be familiar with
those Concepts or those languages and
Frameworks yourself from before but you
don't have to have any prior knowledge
of how riverpot or any other state
Management Solutions work I may draw
some conclusions sometimes to other
State Management Solutions and say oh
maybe this future of riverpot looked
like this future a block for example for
example
so and those are just conclusions or
those will just be observations but
there will be no requirement on you to
know the other State Management
Solutions before you get started with
this course
okay so
um I've been doing this for a long time
and I do different flavors of videos
sometimes I put my face on the screen
sometimes I remove my face
um actually up to this point I think my
face has always been like uh sticky to
the bottom right of all the videos but
in this particular video I'm actually
going to remove my face and also all the
captions from the video and I'm just
gonna caption all the different sections
of the video on YouTube instead so that
you get a full screen of content without
anything blocking it and also to be
honest with you it's it's a little bit
nicer for me as well not to have to have
my face all the time on the screen
because I have four key lights in here
and they're very very bright usually and
they kind of make me warm as I'm talking
it makes me quite uncomfortable as well
so it is good for me and it is hopefully
good for you as well but if you miss my
face please do let me know in the
comments and maybe in the other videos
I'll put my face also up sometimes on
there on the screen but I don't think
you're gonna miss it
so at riverpot is all about providers
now I don't know if you've worked with
the provider with the provider package
from before but all really rubber pod
does for you is that it gives you values
that you can work with and you can work
with them in a very simple way just like
you would do with streams but it will
give you some convenience functions and
convenience ways of handling reactive
State and also I mean that would be an
understatement of what riverpot does it
does clock a lot
but also you can for instance have a an
asynchronous value provided to the
entire application
and you can simply watch changes to that
particular value and take action if if
that value changes like build a new
widget or maybe display new dialogue to
the user so riverpot is about providing
values asynchronously to your project
and also it will allow you to watch
those changes select those changes we'll
talk more about the select and Watson
Etc more later but for now just know
that you can like cherry pick changes
that are provided by your providers to
your application don't worry if this is
all sounding a little bit strange at the
moment because you're probably in the
studio because you don't know how to
work with riverpot but just know that
riverpot is all about providers okay
so
um providers are usually Global objects
they're actually like Global functions
so you may be a little bit uh scared of
global functions to begin with but as
you get started with the riverpod you
know that riverpot manages the uh memory
uh state for you as well and also all
the resources so you don't have to worry
that oh I have a global function here
what's going to happen with it is it
always going to produce values or not so
and we'll talk more about these as we go
on with the course
so
um when you create providers with
riverpot you also need to have something
called a provider scope so the provider
scope is
um is kind of an object that will allow
you to work with providers because as I
mentioned providers are like Global
functions and flutter doesn't know
anything really about those global
functions so
um this provider scope which is kind of
like a magical object that we'll use
soon as you'll see in our applications
it is a glue that brings provider to the
flutter world so you will see in the
first example how we're going to use it
so don't worry about it for now but if
you see it just know that it is like a
bridge between River pod and
flutter so
um as I mentioned and we're gonna get
started I think we're going to develop
actually six total applications
um
one two three yeah six very simple
applications they're gradually gonna get
more difficult so there's six
applications they're just like test
applications there are nothing serious
we're just gonna check like the testes
how to test how to work with provider
and sorry with um riverpod and providers
as these six examples are gonna get
completed then we're gonna go into doing
a full-fledged instabac sorry Instagram
um clone instabug is also a product just
so you know
so
that Instagram clone is gonna be a huge
example I mean we're gonna do video
uploading video viewing photo uploading
viewing comments likes uh Home Page
search page the whole thing logging in
logging out Facebook logging Google
login is it's a huge application so all
these six examples that we're gonna do
to start with are gonna be like the
gateway to that example so I'm just
going to bring in as much Concepts as
possible so you get familiar with the
Core Concepts of riverpot before we get
to that seventh example which is the
Instagram clone so without further Ado
let's get into it
now before we actually get started with
the first things example in this course
I need to mention that we're going to be
using flutter hooks as well for some of
the applications that we're going to
develop now flutter hooks is a state
management solution and I know that I
mentioned that we're not going to be
using any other state Management
Solutions but flutter hooks isn't really
the same state management solution type
as is block or riverpod it it allows you
to reuse code I know that I've created a
video about this actually in the flutter
State Management playlist here on
YouTube but it's not State Management
per se it's actually a way to allow you
to reuse code in a lot and more concise
away so if you don't know how flutter
hooks work don't worry about it I'm
gonna go through the main and the main
objectives of flutter hooks in in this
particular video
and we're going to talk about some of
the basics of flutter hooks but without
getting too much into flosser hooks
right now just know that we're going to
use flutter hooks for the entirety of
this course but it's mainly because
flutter hooks actually
um what we're gonna do is gonna bring in
a river pod uh that has hooks already
built into it so it's kind of like a
blend of river pot and hooks and it is
an official package provided by uh Remy
as well who's done riverpod so we're
gonna go ahead and use uh hooks riverpod
package which includes flutter Hooks and
River pot in the same package basically
so let's not get too much into it let's
let's start having a look at an example
on how we can use riverpot in our
application so as I mentioned for this
first example we're going to go ahead
and create an application that displays
a current date and time on the screen
using a global provider so what I'm
going to do is I'm going to bring up my
terminal here on the screen we have an
empty folder right now so there's
nothing in here right now and what we
need to do is to create our first
application for the first example so
let's go ahead and say flutter
creates and let's just call it example
one okay
and and we can say organization is SE
pixology and this is just something that
I usually do you don't have to do this
this gives you a good start to your
application by setting your bundle
identifier and your application
identifier Android so let's go ahead and
create this example one
and now that example one is created
let's go ahead to example one's folder
and then I'm just gonna before we even
get started I'm literally just gonna say
flutter pop add hooks River pod okay so
this is a step that you always have to
do for every example in this uh course
so hoax riverpot brings in flutter Hooks
and also riverpot with it however
flutter hooks if you're gonna use
flutter hooks then you will need to
actually depend on flutter hooks
separately as well but don't worry about
it I'll show you how that works as well
just do this command in your terminal in
the root folder of your example one
application and once that is done let's
bring up visual studio code so I'm gonna
bring it up here and increase the size
quite a lot we're gonna do that but
we're not gonna do it globally I'm just
going to go into the projects open
workspace settings Json and I'm going to
say zoom level is I think four or five
will be enough perhaps even five here so
yeah that's a good setting I would say
okay now that we're done with that part
of the uh the setup of our application
we can go ahead in here and also say
flutter select device and I already have
a um simulator
up and running so that simulator has a
lot of applications uh installed on it
at the moment but I will just bring it
up here as you can see that's our
simulator but we don't have to look at
it right now okay
so I don't know why I have a uh is it
deact deactivate Cobalt it's fine as
well we can disable it globally
I just wish that this would stop uh
running around like this but what I
could do though is to close Visual
Studio code completely and then open it
up again but you don't have to see the
whole process I'll just do that right
now okay seems like this spinning has
stopped now that's really good let's go
ahead and do a select device in here and
then I'm gonna select an iPhone
simulator and to be honest with you for
this course it doesn't really matter
where you're running your application
until we get to the Instagram example
where it actually does matter because if
you're working with Android for instance
every Lander device then you have to do
some special settings to make sure that
your application works on Android or if
you're using iOS then you have to do
specific settings for iOS but for these
examples you don't have to do anything
specific okay now let's go and open up
our main Dart file and in here what you
usually see is like a counter
application and I usually don't like
these counter applications they're um
they're kind of like chunky so what I
usually do I remove this and then I
create a flutter scaffold application by
writing FSA now a lot of people have
asked me okay what is this FSA and I
don't have it in Visual Studio code and
that's completely fine
um I have a video about how you create
this code snippet manually yourself so
this is a manual code snippet that I
have created so I can actually see what
it looks like it looks like this so it
is a code snippet and you can actually
create custom code Snippets as well so
code snippet let's see uh Snippets here
configure user Snippets so you can go
into you can see in here I have
um flutter code Snippets and in here I
believe
I have let's see
if as if you can find FSA FSA here so
flutter scaffold applications so this is
a custom scaffold application that I've
created so if you don't have FSA don't
worry about it what you can do is to go
to my YouTube channel and find how to
create a simple scaffold application but
to be honest with you it's not rocket
science you just create a simple if you
look how it looks like it's just a
material application so you see it's a
material application
and then it also says uh don't show the
debug banner and it has a home page
which is at the moment a stateless
widget all right now and that part is
done what you also need to do is to go
ahead and
um to extensions because if you look in
here now what I'm going to do is I'm
going to create a home page that is a
consumer widget you can see in here
stateless consumer you see this one now
if you're if you're new to visual studio
code or maybe you haven't worked with
hooks before you don't have that snippet
either so this snippet is actually
coming from an extension so
um you can go into extensions in here
and look for hooks
uh hooks I believe uh let's see how can
I see the extensions that I've already
installed check for extension updates
show running extensions perhaps that
would be better so let's see I believe
it is one of these extensions
uh typescript GitHub image preview
node Microsoft oh my God I have a lot of
extensions in here flutter
merge conflict but I didn't actually see
that extension to be honest with you uh
Dart Emmett lock
uh typescript GitHub
Json node maybe you see it but I don't
configuration merge conflict flutter I
don't actually know which extension it
is that is providing that uh to me to be
honest with you
it could
it can't be block
um
it is one of these extensions but I
don't really know which one but and
don't worry about it if you don't have
if you don't have the ability to
actually have uh that kind of um
extension I'm going to show you how to
create a consumer widget so before we go
into it let me just explain what a
consumer widget is for those of you who
are not familiar with
um who are not familiar with hooks a
consumer widget is a special kind of
widget as if you look in here if I say
widget
a consumer widget you can actually see
the documentation for it uh oops I wish
we could do that uh let me just Auto
Import this
hooks River pod okay you can see it's a
stateless widget that can listen to
Providers using consumer widget this
allows the widget to treat to listen to
changes on a provider so that a UI
automatically updates when needed okay
so and here's actually an example as
well so now
I I wonder if actually this comes with
the flutter extension to be honest with
you it may it may come from from the
flutter extension because if you go if I
go in here stateless consumer and if I
tap in here
does it give me any information where
this actually comes from it doesn't okay
maybe it comes from from the fluster
extension image you'll see the code
um but what we're going to do in here is
to create a simple provider that gives
gives us the current date and time and
for that we need a special kind of
widget that allows us to listen to
changes to that provider I know it's a
little bit complicated don't worry about
it but all you have to do is just to
create a consumer widget for now okay
and I'll explain these more and more as
we go into this chapter so let's just
call this guy home page all right and
this ensures that we can then remove
this home page but we still need to
scaffold so let's take the scaffold from
here I'm going to go there and just put
the scaffold in here okay so now you
have to end up with a class as this
homepage which is the consumer widget
now in here you can see that we have an
error because it doesn't know what
consumer widget is because the only
thing that we've imported in our
application up to this point is just
material so let's go in this consumer
widget in here I'm just going to press
command dots on Mac or control dot in
Linux on Windows and then you can say
import Library hooks River pod okay then
your error is going to go away
good stuff now we have a consumer widget
and I'm just going to save this file and
then just gonna say run this application
this is going to do a build with xcode
to run this application on my iOS
simulator but also if you're on Windows
and Linux which most of you probably are
you can just use the Android emulator or
your Android phone or your iOS phone
well actually no you can't use is phone
to compile you can't compile on Windows
analytics to iOS so either Android
emulator or an Android device will do as
well
so let me remove this inspector and get
rid of this debug console as well so if
we bring up our simulator in here you
can see it looks like this okay and also
what we could do in here is just to go
and change the theme in here and we say
theme and theme mode
and let's see what the is a theme mode
dot dark let's see if that changes
anything in our application I believe we
also have to say the Dark theme
and we say theme data.dark
and we can remove this one I believe now
our application is dark so it's a lot
easier to look at okay
now uh I wonder if we actually remove
this theme mode as well no that has to
be there and if you remove this
no it doesn't work so both have to be
there okay good stuff now that we have
that let's go ahead and create our first
provider so this is going to be an
interesting point in this um in this
chapter so as I mentioned in the
beginning of this video providers are
Global functions now they have inputs
and they have outputs and some providers
have multiple inputs but they usually
just have one output in this case our
provider has no inputs because we're not
going to give it any arguments or
parameters but the its output is
actually a date and time so let's go
ahead and say final current date and
then we're going to say that this is
actually a provider okay so we're going
to say provider this is the first time
we're using provider in this application
now if you create a provider you see you
get an auto suggestion in here telling
you that you get a parameter for free
called ref now this ref is a magical
parameter that you can do a lot of
things with you can use this ref in
order to even depend on other providers
so for instance you can have a provider
that gives you the date and time every
second and in another provider you can
depend on that provider to make an API
call maybe every second do a ping to the
server so this ref allows you to
basically it it's your window to your
application this ref because these
Global functions otherwise don't have
access to other things you see because
they're not dependent on other things
inside your application so what we're
going to do in here
is take this ref as you can see in here
and then we're going to say for output
we're just going to say date time dot
now all right and remember this is a
function because you can make this
mistake as well and this just doesn't
return a date and time you need to make
sure that you're calling this function
okay so now if I move my mouse over this
you can see it is a provider update and
time for some of you if you're if you're
interested in that you can actually say
provider provider date time so you're
more explicit what this actually is
doing or you could alternate
alternatively go in here and say this is
a provider of date and time so these
both are like kind of fine and also this
is fine but it is less obvious what this
provider is actually doing okay so now
that we have done that we have our first
provider but how do we actually use this
provider and this is using this ref
widgets sorry this ref object in here as
you can see it's called a widget ref ref
and in order to read the value of that
provider we need to ask our ref we say
ref
you can see there are some functions in
here listen read refresh and watch okay
for now we're going to use watch because
we don't know what the others are doing
and we don't even know what watch is
doing but I'm going to explain these
soon as we get more and more into
providers okay so let's say final dates
we're going to say ref dot watch and if
you now move your mouse over this you
can see date is it date and time is not
a stream of date and time it is not a
future of date and time but it's
actually a date and time so what is
happening in here we'll simply put this
ref is your world is it is your is your
window to the provider world and every
time the provider that you that you
specify in here changes its output value
your widgets to build function will be
called again and the new value will be
provided to this variable so that's how
basically it works
so using a consumer widget you're
creating a stateless widget that
actually allows you to change the state
of your home page so even though it's
called a stateless widget in that you
can't do set state but internally if you
go in here if you're a little bit sneaky
you'll see that is consumer widget even
though it is
um
it it says in the documentation there is
a a stateless widget but if you go in
here if you go to Consumer State full
widget you see that it is indeed a
stateful widget so the documentation
says this is stateless but it is in fact
a stateful widget but from the from from
your point of view in here you're not
working with a widget and it's state
object you're only working with a widget
so from your point of view this looks
like a stateless widget okay so keep
that in mind all right so what this
watch function is doing in here is that
it is telling um riverpot that hey I
want to watch changes to this provider
if it's return value changes I want you
to rebuild this consumer widget okay so
you got the date and that is really it
you don't have to do so much more with
it so let's go in here and say hooks
riverpod we change the title of our
application all right I'll have to put a
comma in here as well now if we have the
app bar let's go ahead and create the
body for for it as well so we're going
to say a center
and I have GitHub copilot by the way it
helps a lot in making sure I don't have
to type everything by hand but for this
particular text I actually want to get
the date and I want to say to ISO
8601 string it's a mouthful and for the
style I want to say a theme of context
text theme and I want a headline for
actually yeah that's fine
um and this is actually guessing it
because I've already written this code
before and it's guessing it exactly
correctly because it's matching the code
that I've already written from before so
let's go in here and you can see this
error that it's very important actually
to handle this error right now and it's
good that we're seeing this because it's
talking about provider scope if you
remember I talked about provider scope
in the beginning of this chapter and I
said provider scope is a um is a magical
object that allows various providers to
be available in your application so what
we need to do because you see these
providers they need to kind of be
available at the root of your
application so that
um or at the root of the objects that
need those providers in this case the
home page which is inside your
application so in this case in the root
of the application so what we need to do
in here is to go and tell our
application that hey we want every
provider that is written inside this
application to be available to the whole
app so the trick to do is to go in here
and say that your run app shouldn't just
run the application but it actually has
to wrap the application with something
called a provider scope okay and as
child is your application in here okay
and this is the constant as well so
let's remove this
like that and like that so I'm just
going to do a hot reload of the
application and bring up the simulator
now you can see we can see the date and
time on this screen now you'd be a
little bit disappointed to know that
this date and date and time is not
updating automatically and the reason
behind that is that because we've
created a simple provider that isn't
dependent on any other ticker or any
other timer what it's doing is just
providing a value date and time now
and no one is telling it to refresh no
one is telling it to create a new value
every second so all it's doing is saying
that oh I'm a provider I get the date
and time now and you can consume it
whenever you want to even though we're
saying watch so we're watching changes
that might happen to this provider but
since there's no changes happening we
just get one value and display it to the
screen now don't worry about it if
you're more into working with provider
stats or if you're more excited about
providers that actually change their
values don't worry we're going to create
quite a lot of examples about those two
but for now just know that this was our
first example and this provider has now
cached this a value
and you have the ability to even
invalidate that value but we'll talk
about invalidation caching and Etc more
in the coming examples congratulations
this was the first example of this
chapter now we can go ahead and do the
second example okay everyone now that
we're done with the first example in
this video and course let's go ahead to
the second example where we're going to
use a state Notifier now this example is
going to be a little bit more advanced
than the previous example of course
because as I mentioned in the beginning
of this course every example is going to
progressively get more and more
complicated and difficult maybe actually
not complicated but more difficult at
least because complicated is usually it
has a negative uh connotation to it but
every example is going to be more
difficult than the than the one before
it and I think this is a good
progression uh for for aiming for the
last example which is the seventh
example in this course where we'll focus
on a full-fledged application with a
river pots so
Let's uh let's just focus on this
example for now so in this example we're
going to use a state Notifier and a
state Notifier provider so how this is
going to work is that we're going to
have a simple counter and by press of a
button we're going to increase this
counter and then every time the counter
is increased then we're gonna display it
account on the title of our scaffold so
without further Ado let's go ahead and
create the example project for for this
um and for this particular project
actually so let's go ahead and have a
look at our first example in here you
can see that there is a folder for it so
let's say flutter create
and then we're going to say example two
in here okay
so this is going to create our example
two and then we go into that folder and
let's say flutter Pub add hooks riverpod
which is the same thing that we did for
example one so that is created now and
then we go into open Visual Studio code
and as I usually do I go in here I
increase the font let's go to workspace
settings and then I say zoom level let's
set it to about five I think that will
be sufficient now we have this at the
moment setup and then we go to our main
door file I create a flutter scaffold
application as I've explained already in
the beginning of the video how to do
that there's a video up on my channel
how to create a flutter scaffold
application code snippet in Visual
Studio code so I welcome you to have a
look at that video as well to be able to
create a simple scaffold in here then
what we did in the previous uh video as
well so if we go to example one in here
we will see that we created a dark mode
in here so let's copy the dark mode and
that theme sorry the Dark theme and the
theme mode from that example and place
them right here then I will select a
device and iPhone 14 pro is selected
then I will just run our application on
iPhone 14 pro and this went really fast
it's suspiciously fast so let's see if
it actually works as well so it's still
building
we will let it do its work and while all
of that is happening I'm going to talk
to you about
infix operators because that is
something that we're going to do in this
example so actually our application is
running so let me bring up our simulator
and you'll see that it looks like this
so it's just an empty screen for now
what we're going to do is going to use a
state Notifier now estate Notifier is an
object that is already is is a class
that is shipped with flutter so it's
nothing that a riverpod has provided to
us and so it is not inside like a
riverpot library or package so to say so
State Notifier is a class that has a
state object and you can then listen to
changes that happen to the State of the
State Notifier because the state is kind
of like a stream so you can add values
to this or you can set the value of the
state and you can read the value of the
state in kind of like a stream fashion
or a reactive fashion but in order to
read those values we're going to use a
state Notifier provider which is uh
inside the um River pod package as
you'll soon see however this and what
we're going to to our counter State
Notifier it's gonna it's gonna have a
null value to start with because it has
no count to start with and if you're
adding null values to an integer value
then you're going to get an error as
you'll soon see so if you go ahead in
here let me just get rid of some
distractions on the screen
let's say that you have a function
tested and then you say final
into one and then we will say that this
is this is an integer an optional
integer okay and then we'll say ins2 is
a normal integer okay and if you want to
say result is into one plus into two
you'll see that you will get an error in
here because it cannot dark cannot
compute the value of results simply
because one of these values is optional
the way to solve that is to give a
default value to int1 in case it is not
so you could say int one or zero
plus ends 2. then you've gotten rid of
the issue since our counter is going to
have a null value to start with or null
State we are going to need to write kind
of a function a like a convenience
function or a convenience operator that
allows us to add a null or a nullable or
an optional integer value to an optional
integer value okay so this is going to
be a new operator that we're going to
write so let's go ahead and do that I'm
going to actually let that code be in
there I'm just going to comment it out
and these operators just so you know the
operators that are in between two other
values so you can see there's a value to
the left and then there is a value to
the right The Operators that are in the
middle are usually in programming
languages called infix operators because
they're in between that's that's how I
usually try to remember them
so let's go in here and then create an
in-fix operator so we're going to say
extension uh optional infix Edition and
we want to make sure that it works on
numbers so we're going to say any value
as long as it's extends number and then
we want our extension to work on
optionals of that type okay because then
so an integer extends num so that's what
we're constraining our generic extension
on and then we're saying that our
extension should work on optional values
of integer or optional values of double
okay
the result of our addition is going to
be an optional of the same type okay and
we're going to say an operator Plus
T and then we're going to say other in
here okay so I'm not going to take the
suggestion from GitHub copilot we're
going to write the code ourselves so
let's Shadow our uh our this instance
basically because without shadowing we
can't actually check null ability or we
can check null ability null ability but
the compiler isn't smart enough to
understand that after checking
nullability then the variable that is
remaining should actually either be null
or not null because using this doesn't
allow shadowing so let's say shadow so
we say shadow in here
this then if this if Shadow is not an
all okay so basically uh the value that
we're adding the value that as something
is being added to is not null then the
result can be that particular Value Plus
okay the other
however if you remember in here other is
actually optional as well so we're going
to say other or zero and then we have to
say as T because otherwise it doesn't
know that it's a number as well however
if the self instance or if that this
instance is indeed null then the return
should actually be null because null
plus something then we're going to say
well that's not gonna work so that's how
that's how our infix addition operator
works but you may decide to say well as
long as any of these values is not null
then I'm going to return the result okay
so you could say shadow is uh this or
other you could do that excuse me but
then you have to also make sure that
your addition works with the other value
okay but it gets a little bit more
complicated if you want to do something
like that but what we're doing is that
we're saying as long as the left hand
side value is not null then the result
is not null all right so how this is
then going to work is if we go back in
here our tested function remember we
added this as kind of like a hack to get
it to work now if we remove that all of
a sudden our code works and the re and
the reason for our code working is in
fact because we uncomment or sorry we
wrote this uh extra operator if you
comment your operator you'll see that
your code doesn't compile anymore that's
because this plus operator is the result
of this function that we just added in
here okay so you can see in here we have
integer one is one integer two is one
what we could do is to say into one is
actually optional into is optional you
see it works as well well because we
said in here that our operator Works
actually on optional values of number
which these both are and then in here
we're saying int1 plus N2 and we said
that if you look in here we said that as
long as the shadow of this so this is
the left hand side of the operator
always in an infix operator the left
hand side is this we said as long as
that one is not null which it isn't then
the result is not going to be null so
let's go ahead and leave this as one and
then leave it to as null so the result
in here is going to Let's actually
change these to const oops const
const okay and final result 2
and campus onto the parameter type num
okay so it's not actually understanding
is it because I changed those okay it
just doesn't like the cons for some
reasoning here but let's just let's just
go ahead and test this anyway so Prince
result okay
and then we're gonna so what what I
expect from from this is that integer
one is one and integer two is null so if
I look at the code what's going to
happen is that it's going to be 1 plus
null or zero so it's zero as T so it
will be one plus zero the result should
be one and then I'm going to go ahead in
the home page build function in here and
just call the tested function all right
so after doing that you can see the
result of one is being printed to the
screen however if we did it the opposite
way so if this was null and then this
was one and then we run the code you can
see the value of null is being printed
to the screen and the reason behind that
really is because the way we've
programmed our infix operator okay so
that's really good that is working as
expected we don't have to test it so
much more and instead try to focus on
what we're trying to achieve in this
particular example
okay so now that we have this operator
let's go ahead and create our counter
State Notifier if you remember State
Notifier was a special class or maybe
not special class it's actually just a
class in at Dart that allows you to have
a state variable and you can modify that
state and you can listen to changes that
happen to that state from outside the
class
so it is notifying you of State changes
hence the name State Notifier so let's
go ahead and create a class in here and
we're going to call a counter and then
we say it extends
um States Notifier and then State
Notifier by default it because it is a
generic class so you shouldn't really be
scared of using generic classes when
you're working with with basically any
programming language I would say there
are some people who are a little bit
scared of generics and then try to
Advocate against using generics but if
you really look for instance Swift UI is
a very modern framework created by Apple
it is basically all generics and even
Dart flutter are full of generic code
themselves so please don't be scared of
generics anytime you're you're hating
something not just generics but in
programming languages anything that you
hate it could be because you don't know
how to use it that is at least something
that I've learned in my career that if I
hate on something I first need to learn
it if I learn it and still hate it then
I know that I truly hate it but if I
just hate it without truly knowing how
to use it then I'm just bitter so let's
go ahead and create our encounter in
here so the state Notifier classes I
mentioned is in general class it needs
to know what type of data it's working
with
since this is a counter in the beginning
it has no data so it's not just a zero
but it is actually nothing so it is a
nullable or optional integer so let's
just say it's an integer like this okay
now a counter oh sorry any subclass of
State Notifier it needs to call Super in
its Constructor so let's go ahead and
create a Constructor and we say counter
by default it has null as the value okay
and let's see what is happening here in
here a counter too many positional
arguments super and all
State Notifier okay because State
Notifier needs to be imported so let's
get help from Visual Studio code and say
import library and then we're going to
say hooks riverpod okay
good stuff now we have state Notifier
that's really good
and now that we have stake Notifier uh
and we've created our Constructor uh we
need to have a a function in here a
function that our UI can call in order
to increment the counter okay so let's
go ahead and say void increment
and in here what we need to do is to say
okay if the state is null then set it to
one otherwise increment the state by one
so we say state is if state is null okay
like this then start with one otherwise
start with State plus one and this plus
is working simply because of our
extension again so if we comment our
extension you will see that plus doesn't
work because state is a nullable integer
and you cannot add a simple value to a
nullable integer
okay now that that is done the increment
the incrementing is done we also want to
get the current value so we have a state
which the outside world can use but I'd
suggest against that actually so it
would be really good if we could export
or or basically
um how do I say it yeah maybe export the
current state as a simple value so let's
say an integer gets a value is our state
okay so now we have the the getter of
the current state of our state Notifier
as well
stuff that was really good now that we
have our counter State Notifier it is
actually time to go ahead and create a
provider for it and the reason for that
is that we want to create a reactive
application we want a button to be able
to call the increment function from our
UI and we want our UI to automatically
get updated whenever this increment
function is called and for that we need
a provider so let's go ahead and use a
new type of Provider that we haven't
worked in the previous example with
called State Notifier provider as you
can see this is called State Notifier
and then its provider it's going to be
called a state Notifier provider which
is coming from the riverpod package or
the hooks River pot which does include
the riverpod package itself okay so
let's go ahead in here and we'll say uh
final counter provider
and this is a state Notifier provider
and you can see it's actually helping me
write this code this is GitHub copilot
and this is really good actually because
this is pretty much what I wanted to
write and the reason it's guessing
exactly what I wanted to write is
because I've already written this code
once before so it's learned also from my
own code style so you can see how it
works is that you create a state
Notifier provider you tell it if you
actually it would be really good if you
looked at the code for State Notifier
provider you'll see that it has two
generic types the first generic type is
actually your state Notifier which has a
value of T and the second generic type
should indeed be the T so you see in
here we're saying the first one is our
counter because it has a an argument of
integer optional and a generic argument
and the second argument of our state
Notifier provider should indeed be the
first generic argument of our state
Notifier I know that this is a little
bit of handful but after a while you'll
get used to it it is it is generics you
need to be comfortable with generics
when working with a river pot or pretty
much any other state Management
Solutions especially if you're using
reactive like RX Solutions which I also
have a course for on GitHub with RX Dart
so you're more than welcome to watch
that course as well but anytime you come
to any of these Solutions there's going
to be a lot of generics involved
okay now that we have our counter
provider let's go to our
application and ensure that our
application is actually how our
application actually has a provider
scope so this is something that we
talked about in the previous section or
in the previous example so we're not
going to discuss it anymore so let's say
we have a provider scope of our app in
here and in here my app is called app I
believe and that's it really so we have
a provider scope that wraps around our
application okay let's go to the home
page in here our home page
and at the moment is a stateless widget
but what we wanted to be is a consumer
widget which has the widget ref okay so
let's go ahead in here and remove this
guy or actually we want the scaffold so
let's remove the scaffold
and let's go ahead and save him on a
stateless consumer and call this guy a
home page like this okay and in here
then we're going to say return the
scaffold all right and then if I do a
hot restart of our application and going
here you can see it looks exactly the
same as before so no changes really
because we haven't done anything in here
okay now what we want is for a our the
body of this build function sorry the
body of our scaffold to be a column that
has a text button inside it so we want
the column just to have a button in
there and upon pressing this button we
want to call the increment function of
our counter provider sorry the counter
Notifier actually so let's go ahead in
here in the body and we say body has a
column okay and the columns children for
now is going to be empty but we're going
to add the button to this guy soon so
let's go ahead in here and say we have a
text button text button and then we say
unpressed is an empty function for now
and his child is going to be a const
text and then we're going to say press
me
or we say increment in Chrome and
counter something like that
okay
and we will then add some commas in here
to get the formatting right let's have a
look at our simulator I actually can put
the simulator next to our application so
it looks a little bit nicer okay
great stuff now that we have the
increment counter let's actually change
the cross axis alignment of our column
cross axis alignment and we say cross
axis alignment stretch
so our bottom will then be in the center
because it's being stretched from all
the way from the left to the right
okay so now now that we have the cross
axis alignment for our column is
actually time to go ahead and tell our
text button upon pressing it to call the
increment function so how do we do that
now we have a provider okay so if you
say ref
using the ref you can get access to your
providers okay so we want the providers
notifiers so if you look at our counter
provider it has a parameter called
Notifier okay because it's actually the
Notifier not the provider itself that
has the increment function so using the
providers the state Notifier providers
um and Notifier parameter you can get
access to the actual Notifier you can
see that there is an increment function
in here oh actually we can't call it
like that because we need to wrap it
around a read function now this is this
is where the ref read comes into play so
you can see that there's a parameter
sorry there's a function on a widget ref
actually called widget rep right yeah
widget ref called read
and if you put your Notifier in here you
can actually get access to its function
functions so excuse me what is this a
referee actually do ref read unlike ref
watch
it doesn't really watch any changes or
listen to any changes that happen to a
provider or it's Notifier it just gets
the current snapshot of that object that
you're giving it so in here we're saying
just give me the Notifier a snapshot as
it is right now okay and then using this
snapshot you can just call the increment
function and that's it really so you're
just calling the increment function in
here okay and this is something this is
a tip that I've mentioned in my uh in my
flutter tips and tricks GitHub page
which you're more than welcome to check
out but if you have a void function
excuse me which this is this is a void
function you see it has no input
parameters and it has no output and in
there you are calling another void
function which is this increment then
you can as well just take this without
its function call
take it and then remove all of this code
from here and then create an arrow
function like this and oops
on pressed let's see
unpressed oh not like that like this
so not an error function basically so
we're basically saying on press is
actually this function so whenever so
it's we're basically replacing the the
previous function with this one so
that's how you can also do it you don't
have to do it like this but you you can
okay now we have the empress so if I do
a hot restart of our application you
won't see any changes and if I press
this button you won't see any changes
either and the reason behind it is that
we have we're not actually displaying
the counter anywhere
okay so from the previous example we
learned that we can do a ref and we
could say watch in here okay and we can
say counter provider and in here if I
say final counter you can see now
counter is actually an optional integer
that's really good so we can actually
read the integer that is coming from our
counter by doing a watch on the provider
however if you put the counter in here
and watch the counter directly inside
your build function like this before
you're creating your scaffold anytime
the count changes in your provider your
entire build function is going to get
called again and your scaffold is going
to be created again so this is a little
bit of a waste of
computation power because you're
basically recreating your scaffold every
time the counter value or the counter
um State Notifier State value changes
and that's something that we usually try
to avoid so what we want to do in here
here it for the app bar we want to
change the title every time it had
encounter changes okay so the title of
the app bar in this example is going to
be responsible for displaying the actual
account value so for the title what we
want is to wrap this text guy so let's
say a rapid with Widget in here and
there is a new widget called consumer
okay now consumer has its name indicates
it it's going to consume changes to a um
or how do I how do I mention it it is a
consumer of providers so inside consumer
if we create a consumer in here you can
see that there is a function called
Builder and this Builder if we just
allow it to autocomplete you see that it
gets a ref now this ref is a widget ref
so if you go in here you can see it is
indeed a widget ref now you'd be asking
yourself but we already have a ref in
here why would we need a ref in here
well the reason is that as you use the
ref in here and say you watch the
counter provider
and final we could say count okay now
changes to this counter provider's State
Notifier will not rebuild the this ref
and its children it will only rebuild
this ref and its children meaning that
it will only build or rebuild the
consumer okay so anytime the counter
changes this column won't be
recalculated this text button will be
won't be recalculated neither will the
scaffold or the app bar itself instead
only the title will be rebuilt and
recalculated so that's that's why you
need a consumer so if anywhere inside
your widget tree you believe that there
are changes happening to a provider or
providers and you want to watch those
changes but you don't want your entire
UI to be rebuilt then it is a good place
to use a consumer and this consumer is
actually a widget so you can go in here
and you can see that it is a consumer
widget which in turn is a consumer State
full widget and and there you go and you
see that it is indeed a state fold so
but you work with it as if it was a
stateless widget because you don't have
a state object in here okay
good stuff then you see from this
Builder you have to return a widget to
be displayed to the user so let's say we
have a text and we say if
let me resize this a little bit
then we say if the count is null then we
display it press the button okay
otherwise we display the counts to
string all right because this count as
you're watching it this is not a stream
but riverpot solve this for you every
time this counters this counter
providers state notifiers state changes
that value will be extracted and placed
right here for you as a typical value
and not a stream or a future as we saw
in the previous example now that you
have your text you can see as a string
you can just return a text widget with
that text inside it like this and then
you can hot restart your application and
then we can go to the simulator you can
see right now this count is actually
null and that is the reason that we're
seeing this text press the button but as
soon as you press this button let's go
ahead and see what happens actually
as soon as we press increment it says
state is equal to is the state null to
begin with yes the first step is that
the state is null then we're going to
set the value of 1 to the state
otherwise we're going to set the value
of uh otherwise we're going to take the
current state and plus one actually
let's also see how we're using this
value are we even using the value I
don't think we're using the value
so we could get rid of it yeah that that
is also fine we just got rid of it okay
we don't need that value
okay let me do a hot restart again so
let's go in here and see what the
increment counter button actually does
we go in here and we see that increment
just calls the increment function on our
state Notifier so pressing that you can
see it will display the value of 1 in
here and this is all without you doing
any set State because riverpot is
already taking care of that for you so
if you press it one more time you can
see that it gets incremented if you do a
hot restart of your application then the
counter and the state Notifier for your
counter is going to get reset and
rebuilt hence the value is going to be
null and therefore the value on the top
of your or on the title of your app bar
is going to be displayed as press the
button okay so that was it for this
example it was a very simple example I
know I'm doing a lot of explain
explanations for even very simple
examples but this is usually how I build
my courses a lot of explanations in the
beginning so that we set up set up the
foundation for the course instead of the
foundation for the rest of the examples
but as we go on and things get
progressively more difficult
then I don't have to explain things so
much more because we've already done
that before in the previous examples
okay I hope that you enjoyed this
example as well I think in the coming
examples we could just copy paste the
contents
of the main Dart file simply because it
has the flutter scaffold application and
it also has this dark theme and the
theme mode
set up already so maybe we'll do that in
the next example okay so hopefully you
enjoyed this example and hopefully you
you can now go and play with State
notifiers yourself maybe build something
more complicated than this example if
you want to and I'll see you in the next
example okay everyone now that we're
done with the second example in this
chapter let's just go ahead and start
working on the third example now this
example as I've mentioned before is
gonna get more difficult than the
example before it and in this example
we're going to use a future provider and
also using Futures so
what what is special about this example
is that a provider that we're going to
create in this application is gonna
depend on another provider
how this application is going to work is
that we're going to provide a list of
cities to our user and once the user
Taps on any of these cities then our UI
is going to get updated with the weather
for that City and we will have a list of
cities that we provide to our user and
that list is constant so we have we hard
code some cities for instance Stockholm
Paris and Tokyo and which is exactly
what we're going to do in this example
and we just display them to the user so
the city list is not going to come from
any kind of Provider however once you
select the city we're going to have a
provider that keeps hold of the selected
City
and then once the selected City changes
another provider is going to
automatically know that this city has
changed and is then going to provide us
with the weather for that City using
another function which is returning a
future of the weather it is a little bit
difficult to explain but I'm just trying
to tell you that there is going to be
two providers in this example and what's
special about this example is that one
provider is automatically dependent on
another provider's changes once the
other providers value changes vis-a-vis
the selected City then the provider that
does provide the values sorry they
provide the provider that provides the
weather
for that selected city is going to
produce a new value upon which our UI is
going to get updated so without further
Ado let's actually go ahead and create
our example so what I'm going to do is
I'm going to bring up a terminal window
in here let's see if I can actually do
that
right here okay
if we do an lsla in here you can see
that we have example one two let's
create a an example three so if I say
example two
we have fluster create example two let's
just say example three in here
and then example three is going to get
created let's go ahead in example three
example freeze folder and then we're
gonna add a hooks River pods to our
example three as we did in the other two
examples and then I'm gonna bring up
visual studio coding here and let's go
and make sure that we increase the size
so I'm just going to say workspace
settings and zoom level let's go ahead
with five okay we have that now let's do
I usually press Ctrl R in order to go to
the history of the projects that I've
already opened so let's go to example
two
and copy the entire main contents of
example two just close it and let's go
to main Dart file of example three and
just paste that in here so we start with
a dark mode and then we can remove all
of this from here remove the counter
remove the counter provider we don't
need that and the application can stay
the same for the scaffold let's just
remove the title actually what should we
say for the title maybe the title should
just be a text
let's remove this consumer and we'll
just say a const text that just says
weather okay and we just remove the body
for now okay excuse me so this is what
you should end up with a home page you
can see it has a scaffold is a consumer
widget and also our application is just
a simple application stateless wishes as
well which is using material app with a
dark theme and ensure that your
application is wrapped inside provider
scope and then we have hooks riverbot
also imported so this is this is
basically the starting point for our
application so let's go ahead and say
select device and then I'm just going to
run the app in iOS simulator and if
you're at home on Linux or Windows if
you have an Android emulator it can fire
that fire that up or if you have an
actual Android phone connected to your
computer you can also select it from
flutter select device it should be
available in this list for you okay I
can see our application is now out so
let's go ahead and have a look at our
simulator you can see that our app looks
like this if I go back to weather
it looks like this right now okay we'll
leave the simulator the way it is and we
don't have to touch it so much good
stuff let's go ahead and Define our
cities okay let's get rid of some
distractions let's say enum City okay
and then we say Stockholm and we have
Pairs and then we have Tokyo Tokyo like
that all right and this is this is a
habit that I have that I usually put a
comma at the end of the last enum case
because if I don't do that my enums look
like this but I prefer to always have a
comma so that the next person coming
into this enum if they want to add a
value they just press enter and add
their value but if I don't put a comma
not only it does doesn't look so good
but the person coming after me has to
put a comma and then their value so it's
just a bit nicer to put a comma both for
you aesthetically and also for the
person coming into the code after you
okay so that's just one hint
okay now we want a function that
produces weather so given a city this
function is going to produce weather for
us okay so let's go ahead in here and
first uh create the function so we say
future and this weather is going to be
an emoji so if I go in here for instance
say rain you can see that there is an
emoji for it but this if you put it uh
in in a string you can see this
basically is actually a string value so
our function this function which is
going to provide and whether for any
given City or at least these three
cities is going to provide a string and
then we're gonna say get weather and
then we say City and City however if a
programmer comes in here and has the
look at this and says hmm
a function that produces weather however
the weather is of type stream what does
that even mean because what is it going
to say rainy is it going to say this is
it going to say something else is it a
formatted like rainy
Etc what does that mean so what I
usually do is I go ahead and say type
definition and I say weather emoji and
then I say this is a string and then I
go and change this string to that so now
the person looking at this code says oh
it's a future that returns an emoji as
the weather for the given City it makes
a lot more sense okay so try to use
typedefs in your code as much as
possible not only in dark but also in
Rust Swift in any programming language
that has support for type definitions or
type aliases okay
okay then what are we doing here this is
going to be a future so we're going to
hard code first let's just hard code our
futures so we say the city of Stockholm
is going to have uh is gonna have snow
okay you put snow in here then we say a
city of pairs Paris
is going to have uh right okay so we
produce the rain Emoji in here and then
we say the city of Tokyo is going to be
windy so let's put wind in here okay now
that we have our weathers is it this is
a dictionary or a map okay then we say
we return a future in here and we delay
the future on purpose just to say that
this is kind of like an API call okay so
we create a duration of one second so we
say seconds one all right and the value
that we're gonna produce in here is
going to be like this so we say okay
what we want this future to produce
let's break it down into the different
lines in here okay
in here we put our dictionary and we say
okay for this we actually need the
city's weather like that
this is very simple though I mean it
looks a little bit complicated but let
me actually put some commas in here to
make it look a little bit better so
we're delaying a future by one second
and as that second elapses this function
is going to get called within this
function we're giving it a map and then
we're saying the key for that with the
key from this map that we're trying to
extract is the city okay and then we're
unwrapping it because if we don't unwrap
it then if the city doesn't exist then
this will be an optional value so if you
go in here now the problem with our code
a little bit is that if you say New York
for instance New York this code this
function will provide a future that
basically crashes and it produces an
exception because we don't have the
weather for New York so this is a little
bit of a problem with the code that
we're writing but we don't want to go
ahead and do such complicated I mean to
be honest with you what we could do is
to say well if the city can't be found
in this particular map then we're going
to return like a sun this this would
also work okay so we said we just say
fire it's it's like raining down fire so
you this code would also work so you
could leave it like this or you could
just say question mark okay so it
depends on what you like but the code
that we had written before also works
fine
all right so we could go back in here
and leave it like this so we say we just
handle stock comparison token good stuff
now that we have that function and what
we want to do is to go ahead and create
a
um a provider this is going to be very
interesting actually it is called a
state provider now a state provider is a
simple provider that keeps a hold up a
value that can be changed and previously
we worked in the first example if you
remember we worked with a provider and
that provider was just like a final
my provider is a provider and then in
here we ignore the ref and we just say
date time.now do you remember that
example the first example however this
provider kept hold of a value that never
changes and nobody can change this value
even from the outside okay you can reset
this provider and like refresh or
invalidate this provider and that's
something that we haven't talked about
yet the outside world can invalidate a
provider causing its value to be
recalculated however if someone from
outside can't change the value inside
this provider so what we need to do in
here is use a new kind of provider
called a state provider which as its
name indicates keeps hold on a state
which can be changed from the outside
world okay so let's go ahead and say
final current city provider so this
provider is going to keep hold of the
current city and then the outside world
can actually change it so we're seeing
it saying that the state provider of an
optional City because by default no city
is chosen and we say we have the value
of null to start with okay
so this guy is going to be manipulated
by our list view because as I mentioned
in the beginning of this section or this
example we're going to have a list View
using which the user can tap on any of
the cities and that particular city that
is tapped on will then be provided to
this current CD provider and then we
will have another provider that that
we're going to program soon that will
listen to changes to the sky so that is
the dependency so this guy is going to
be changed by the UI so let's say will
be changed by the UI and then we will
have another provider in here that will
listen to changes that happen to this
guy and will provide the current value
which our UI will listen to so the UI
writes to this and the UI will read from
this new provider that we're going to
write in here okay so let's go ahead and
say final weather provider now what kind
of a provider should this guy be since
this weather provider is going to list
it's gonna basically work with a future
it's going to call this function well
you guessed it it's going to be a future
provider so let's say a future provider
okay
and what does it provide it provides a
weather Emoji okay in here okay now the
first parameter to any provider usually
is a ref okay in this ref and then we're
going to create a the body of the
provider so what are we doing here
the first thing that we want to do is to
ask the ref and say we are dependent on
this provider we want to say that we
want to listen to changes that happen to
the current CD provider so we say final
city is
ref.watch and we say current CT provider
and now all of a sudden you can see your
city is an optional City so this ref
that is provided to your providers is
the window to the outside world for your
providers because otherwise your
providers are just Global functions that
have no concept of any other class any
other variable or value unless a
variable is global just like any other
provider so this ref allows you to open
a window to the outside world okay
and then we say okay if
City
is not not
then we get the
weather for that City okay City just
like that now you can see that we're
returning the get weather functions
return value which is a future and
that's exactly what a future provider
allows you to do right you can see that
the future provider it gives you a ref
and it as it is either return a string
or a future of string so any here you
could actually return a string if you
want to so son that also works because
let's see
that also works because the return value
as you saw it has to be a future or a
string okay but in here we just return
the value of get weather okay so that's
when the city is not null otherwise we
return unknown weather
Emoji okay and that's something that we
have to Define now
let's go ahead to in here and we say
const unknown weather emoji and we just
say shrug
like this we don't know what the weather
is okay that means the current city is
not known then we don't know what the
weather is okay
so that's really good let's put a comma
in here as well to get the formatting
right so let's put a a comment in here
as well UI reads this and
UI writes to this so UI writes to this
one and UI reads this one so the UI will
never read this particular one actually
yes it will the UI will read this as
well and I'll tell you why UI writes to
this and reads from this okay
rights to and reads from this and the
reason that we'll read from this as well
is because the UI will need to put maybe
a check mark or something next to
um next to uh this city that is
currently selected so that's something
that we're gonna have to do so let's go
in in here and for our app bar we just
said weather but for the body what we're
going to have is
um a list View and we will also have uh
we will also read the current weather
and we place that inside a text okay so
let's go ahead first and read the
current weather so we're going to say
final current weather
weather like this is a ref.watch and
then we say weather provider as you can
see in here now you can see this current
weather is going to be a an async value
and this is the first time that you're
seeing this async value maybe you expect
it actually to get the actual weather
because we're saying weather provider
and whether provider is a future
provider which gives you the weather
Emoji however is not the reason behind
that is that this uh future hasn't
really been calculated no one has told
this weather provider to actually
calculate the weather or call the future
underneath
so you get this kind of weird value
called async value now I call it weird
value because it's a little bit
different from what you may be used to
but it is so smooth to work with so this
current weather which is an async value
has if you look at it
there it has some functions which is
called when and this when allows you to
provide
data or widgets for various states of
this async value such as when you get
data such as when you're loading and
such as when you get an error in the
future that is behind this weather
provider I know it sounds a little bit
strange don't worry about it I'm going
to explain more soon but for now let's
go and set the body of our um our
scaffold in here so let's say for the
body and we're going to have a column
because we have two we're going to have
a text and a list View and as children
for now are empty let's go ahead and
create a list view Builder but since the
list view is going to be you see it's
going to display the cities however it's
in it's placed inside a column so we
need to ensure that it is expanded so we
say expanded child is a list view
Builder okay
and removing that for now and put a
comma in there and put a comma and comma
okay so our list view Builder it has an
item count of City values length and its
Builder is going to be looking like this
okay then we say okay the city is uh it
is City values at that index I'm going
to remove all this that was just added
by a GitHub co-pilot so we get the
current city then we want to know if
this city is selected now this is this
is the beauty of providers we need to go
to our ref
and watch changes that are happening to
the current city provider okay and then
we say Okay if that is equal to City
then we know that the city is selected
you see it is a Boolean so any change to
the current city provider will rebuild
the this entire build function you could
of course put this inside a consumer but
that will be a little bit of an Overkill
as well so we're basically using the
same wash to changes to the current city
provider and when that happens just let
me know and rebuild this widget for me
and then we get the is selected okay so
now that we have that let's create a
list tile so we say list tile all right
our list tile is going to have a title
of the city
uh City to string it looks fine all
right and also after let's put some
commas in here okay and for the trailing
we're going to add a check mark if this
is selected so we say trailing is
selected
then we say uh create an icon
icons dots I think it's called check
okay otherwise create a null value in
here okay so that's the trailing icon so
if this tile is or if this city is
selected then and display an icon in
here really good now we also need an on
tap for this um
for this list style then we say and once
you tap on this current city you see we
have the city variable we need to just
pass it to the current city provider
okay so we go in here and we say current
city sorry ref read the current city
provider
because you see we don't want to rebuild
anything in the list style if the
current city providers value changes we
just want to get a snapshot of this
provider okay now not only actually just
the provider but it's Notifier okay
because we want to notify it of
something changing then we want to set
its state and we want to say this state
is actually City okay so you can't
really do this because a provider
doesn't have a state it's this Notifier
that has a state so remember this is a
state provider and the state provider
works with States notifiers
good stuff now that we've done that you
see we've done this let's put a comma in
here to get the formatting a little bit
better and also we can make we don't
need these curly brackets we can make
this an error function just like this
and remove this semicolon really good
okay now the ontap is on the list tile
is done we can actually do a hot restart
of our application and have a look you
can see see in here we have City
stockholms in the Paris and City Tokyo
and we can actually tap on them they get
selected but no one is actually
displaying the current weather so that's
what we're going to do in here let's go
to the first child of our column in here
and then say then we're going to use the
current weather based on the current
weather we're going to display a text
that actually displays the card weather
okay so let's say current weather
and then we're going to say when okay on
this when we have a parameter called
data when it actually gets data and then
this data you can see in here is
actually your weather Emoji all right
so in this case we're going to return a
text so we say text
and its data is indeed going to be the
data and let's give it a style and make
this an error function its style is
going to be let's say const text style
and we're going to say a font size of
perhaps 40. so quite a big one all right
and it's and you can see that you're
you're getting an error in here where
we're getting an error in here saying
that we haven't defined the error
function so we say when the current
weather's data is provided then we're
providing the text but what happens if
an error occurs and you may be asking
okay when does an error actually occur
in this kind of async value well one the
underlying provider provides an error
and if you look in here this is a
typical error that can happen inside a
provider so we are unwrapping a city
that if you add like New York in here it
doesn't exist in this map this this code
is going to generate an exception and
get whether it's being called called
by our weather provider meaning that
this line will then generate an
exception this whole provider will then
generate an error for you okay so you
have to basically work with that so
let's go ahead in here and say on air
error like that and our error is just
going to provide
is going to provide a text so we say
const text error okay
and we just put a crying Emoji as well
maybe this is one of my favorites okay
and then upon loading then we're going
to create a little bit of a you see in
here we could either say loading or we
could just say
um loading let's see in here let's
remove that we say circular progress
indicator like that and then we put it
inside some sort of a padding so let's
say give it some padding of
eight is eight enough perhaps yeah and
then we just change this to an entire
const of padding okay
great stuff now that that is done let's
just hot restart our application and go
back in here you can see you get this
kind of emoji because by default we
don't have a weather and that is this
code in here that is being executed
because our weather provider doesn't
have any weather inside the current city
provider okay as soon as you select
Stockholm what is going to happen is
that this code is going to get executed
we're telling the current city providers
Notifier to set a state to the given
City so and as you do that it goes in
here the current city provide sorry the
current city providers State changes the
weather provider is listening for
changes to the current city provider and
then if that happens then it calls the
get weather function the get weather
function has a fake delay of one second
upon which the unloading sorry the
loading function of our async value will
be called we display a circular progress
indicator with some sort of padding as
that is happening the future will
complete after a second the value will
be produced and the data function will
be called all right so let's actually
test that
did you see that
so
great stuff that's exactly what we
wanted so yeah I can actually increase
the so you see it better
very very good this is exactly what we
wanted to achieve so this was that
example I mean this was the third
example in this chapter and I really
hope that you enjoyed it and it was a
lot more difficult than the previous
example in this example we worked with
future provider we worked with a state
provider we also worked with
um a provider watching another provider
we work with async value which is this
current weather remember async value we
worked with its data functional error
and loading and also we had a look at
how we can set a state provider's state
directly with uh within our UI and the
rest were things that we'd already seen
before so I really hope that you enjoyed
this example which was a third example
in this course and I'll see you in the
next one
all right now that we're done with the
third example in this chapter let's go
and get started with the fourth one and
this fourth example is actually a little
bit easier maybe to implement and
understand than the third example but I
place it at the fourth example because
it is a natural progression of what
we've learned so far and what we're
going to learn by implementing all the
examples in this course and the
progression is that we've been now
looking at Futures and future providers
we've been looking at normal providers
State Notifier providers Etc but we
haven't really had a look at a provider
that can change its contents as time
goes on and this is a stream provider
we've talked about streams before in my
other courses but if you're not familiar
with what streams are they're basically
a reactive pipe of information reactive
type of data if you will and data just
keeps um flowing in to the stream and or
this pipe and you just need to read this
data using different means and what
we're going to do in this example is
that we're creating we're creating a
timer which is a stream of um let's just
say date or time or maybe even a void
that ticks and once every second and it
will give us an integer and using this
integer so basically it's not a void
timer it is an integer timer or a stream
of integer
and it will just every time it produces
a value it will give us a value and
for instance one two three four five six
and then we will have an array of names
and in our UI every time this timer
ticks we will have a provider that gets
a name out of this array of names from 0
to that particular index so the first
time that the timer takes it says one
then we're going to extract one name out
of the list next time the timer takes
it's gonna take two then we're gonna
extract two names out of the list and
display them in our UI
at the end and eventually when we run
out of uh basically names to display
because eventually this timer's index is
going to be higher than the last or the
length of our array at that point our
program is going to throw an exception
and then our async value is going to
display an error text to the user so
without further Ado let's just go ahead
and create our application so I'm going
to bring up terminal window in here and
let's go ahead and create our example so
up until this point
we have example three so let's go ahead
and say flutter oops flutter create
let's say example four in here
and then we're going to go into example
Force folder
and we're going to say flutter pop add
hooks River pod this is a command that
we do in every example and we're going
to continue doing that for all the
examples in this chapter
um now that we have that let's go ahead
and bring up visual studio code trust
and then I'm going to go and say in here
we want to go to workspace Json and then
I'm going to say zoom level 5 which is a
zoom level we've used for all the other
examples in this chapter
okay after we have that let's go to
example three excuse me and then copy
the contents because we actually need
the scaffold and we also need the app
object and also the provider scope So to
avoid having to write all of that I'm
just going to copy and paste example
three into our application now example
three also had a lot of other stuff in
it so let's just go ahead and remove the
city and the get weather current city
provider unknown weather weather
provider all of that and our home page
let's just remove everything except for
the app bar so the body is going to also
be completely removed up to this point
right here so then you have to end up
with a home page that looks like this
and the title we can just say stream
provider okay so looks good so far it's
using the dark mode theme and also we
have the provider scope in here so this
is how your application or your main
Dart file should actually look like now
let's go ahead and say select device
iPhone 14 pro I think is the simulator
I'm using in here you don't have to have
a Macintosh to complete this example you
can also be on Windows or Linux and then
choose your device or your Android
emulator in order to continue
now what we're going to do then is to go
ahead and actually the the main point of
this um or the main the core of this
example is the list of names so I'm just
gonna drag this from here so that I can
close the inspector like that and then
remove the Bottom bar as well then let's
go ahead and bring our application here
you can see it's our screen provider
okay so let's go ahead and Define a list
of names that we're going to use now I'm
just going to copy and paste the list of
names because it's just a waste of time
to go ahead and basically write the list
of names so I will just paste the list
of names from my other example right
here so you can pause the video right
here if you want to do the example just
like I'm doing you can see Alice Bob
Charlie David E Fred
Etc so you can pause the video write the
names if you want to or just check the
GitHub repository for this course in
order to get these names as well there
so both work
um now we have a list of names and what
we're going to do is to go ahead and
create a a stream now we're not going to
create a simple stream instead we're
going to create a stream provider so
what we need is basically a
a string that's the core but if we turn
it into a stream provider then another
provider can actually depend on it so
remember that if you have core objects
like streams and features you can always
wrap them inside another providers such
as stream provider and future provider
respectively in order to create a
provider which other providers can also
use so that's how you would package your
features and streams so let's go ahead
and create a simple stream provider
we're going to call it ticker provider
so let's say fine art ticker provider
and it is a stream provider okay and you
can see if you look at the source code
for stream provider this is what I
usually like to do in my applications
when I'm working with a class I usually
actually go and look at its source code
as well so you can see stream provider
has one generic argument of T in here
and you can see and it's using stream
provider base of that same type and you
can see it's using in side it actually
is going to provide an async value of
that type to you so we can go and go in
here and say this stream provider it has
one parameter which is the ref
and what it is going to create is a
stream actually so let's say stream
periodic and then we say the period is
actually duration of one second that's
completely fine and then this starts
with zero so this zero value or that
value that is generated every time the
stream ticks is going to be provided in
here then we're going to take this value
I'm just going to say I and then I'm
going to produce I plus 1. so this
stream is going to provide values from
one two three four so it's not going to
provide values of 0 1 2 3. so the first
value is going to be 1 and so on and so
forth okay
great stuff now that we have this ticker
provider we're going to go ahead and
create another provider called names
provider this names provider is also
going to be a stream provider however it
is every time going to provide us with
an iterable of names so I will I will
show you what that means so if if the
first time around this ticker provider
provides the value of one then we're
just going to go ahead and say names
give us names from index 0 to 1
exclusive that's going to be Alice next
time around it's going to be 2 then we
will say names give us the names from
index 0 up until to excluding two it
will be Alice Bob and Charlie will be
excluded because Charlie is at index 2.
Alice is index 0 Bob uses an index one
and Charlie is at index two okay so
let's go ahead and remove this for now
and then go ahead and create our names
providers so I can actually see in here
that it has created I mean this is um
this is GitHub co-pilot that is trying
to write this code for us but I'm not
gonna do this code and the way that
GitHub co-pilot is suggesting we're
going to write it by hand so let's say
names provider and you see we have a
stream in here and which is our stream
provider and a take care provider we
want to watch that so let's go ahead and
create another stream provider because
the result of the names provider it
actually has to be a stream of names
okay so we say screen provider and we
know that the first parameter is
actually the ref in here we're gonna go
and say ref we want to watch the ticker
provider so we say ref watch ticker
provider okay so we're watching the
Tigger provider and then this you can
see if I say final a and if I go in here
let's actually turn this into a real
function in here so it's not an error
function because then you can actually
have a look at the data types then you
can see a is an async value of int all
right now async value has a function is
called map and what this does is as
you'd expect it gets the value in the
async provider and you can then map it
to another value okay so here's the data
you can see and it has error and loading
so let's just go ahead in here and
remove this in here refwatch and
actually what what one thing that I
notice in here that we're doing we're
watching the provider but we should
actually be watching its stream because
this map function is not correct so
let's go ahead and say we're gonna watch
the ticker providers stream and then
we're going to map it now you can see
we're actually getting the integers
coming from this stream okay so we get
that let's just say this is the count
then in here we're going to say we want
the names
and then there is a very handy function
gets range in here we say the start is
zero and the end is count all right so
that's really good we have that there
let's remove some of the temporary code
that we've written in here and this code
looks fine so we're going to keep that
okay so we're going to keep that then
we're going to change this function back
to an error function and then dump our
code like it was before here and then
put some commas around to get the
formatting right as well so this is how
names provider looks like you can see
Dart is saying that oh it's a stream
provider of I turbo string because it
gets range is an eye trouble of string
as you can see in here okay so now we
have our ticker provider which is
providing the stream periodic stream to
the names provider and the names
provider is reading the names based on
the ticker providers stream really good
now that we have all of our providers
what we need to do is just to go ahead
and basically consider assume the names
in here so we say we'll say final name
names
and we'll say ref.watch and then we have
the names provided we don't have to
watch the stream and you can see now
name is an async value of I trouble
string so that's really good let's go in
here for the body we're going to say
names when okay then we get the data
error and loading let's put a comma in
here and a comma in here to get the
formatting right for the case of loading
let's create a circular progress
indicator so we're going to say the
loading you can see the function
signature is just a void a void callback
so let's go ahead and say we have a
center with the child of circular
progress indicator and I believe both
can be const as well so let's put a
commander great now for the error we're
going to have just a simple text so that
a function signature is going to look
like this and we're going to say
um const text reached
reached the end of the list because this
function actually you may be wondering
okay how are we going to get an error
this gets range is going to throw an
exception if this count is over the
length of the array or the eye trouble
that we're trying to read the names from
so
the then the error will be produced will
be thrown into the stream that the
stream provider is providing us with
because you see the map function is
going to error out and that error will
then be propagated to our user interface
using async value which is this names
okay names variable
now for data let's go ahead and say data
gets the names okay and if you hover
your mouse over names you can see it's
actually the I triple off string let's
create a list view list view Builder and
then we're going to say the item
count is is names length and then the
item Builder is going to be a simple
list tile for every item in here so
let's say return list tile and let's
remove this names and we're going to say
elements at index of index yeah that's
that's completely fine so I'm just gonna
save this and then I'm gonna you can see
names are being produced already so I'm
just gonna move this over here and I'm
going to hot restart the application so
let's see how it looks like you can
first see the loading screen and then
you can see the names being produced and
as soon as we actually hit the end of
the list you will see that we will get
an error displayed to the screen because
we've run out of names
so this was really it for this example
the point of this example was using
stream provider and you'd be surprised
because in the last example of this
course where we start talking about and
where we start creating an Instagram
clone the stream provider I think will
be the most used provider in our
application in that case because we're
going to have a lot of moving parts
inside our application for instance
displaying the list of posts that every
user in the system has created and when
you create that like grid view as we'll
see with the list of posts that use all
users in the system have created we want
that created view to be updated as soon
as anyone provides or it creates a new
post without us having to pull and then
we're going to use Firebase for that of
course but underneath it's going to use
a stream provider so that it can
continuously update the UI as new posts
are being made by other use users in the
system so just know that stream provider
is very useful it is going to be very
useful in the last example as well that
we're going to create and you can just
go ahead and play a little bit with it
so you get a better grip of how it works
so hopefully you enjoyed this example
and I'll see you in the next one
fantastic now that we're done with the
fourth example in this course let's get
started with the fifth one this fifth
one is actually a lot more difficult to
implement than the fourth example simply
because I feel like the natural
progression should be that we Implement
more and more difficult examples as we
go on and this example is actually
can it does contain quite a bit of code
but really what it is doing is quite
simple and the goal of the example is
very simple and instead of me explaining
what this application is doing I thought
maybe it will be best to actually
demonstrate this application and what it
does visually to you so we get all we
all get a better understanding of what
we're trying to achieve and what we need
to implement so let's go ahead I'm going
to bring up the simulator which has the
application installed already on it so
I'm gonna demonstrate what this
application does and then we can go
ahead and do the implementation
ourselves you can see in here it is a
very simple application we have a little
Floating Action button in here
and what this button basically does is
going to allow us to create a new person
a new person object so I'm going to move
my mouse over it and then I'm going to
press the plus button like this you can
see a dialog will appear on the screen
says create a person then I can say van
dot in here and I can just enter any age
in here let's just say 40. and I don't
know why my mouse looks like that but
hopefully it gets corrected and then I
press the create button you can see that
van dot 40 years old will be displayed
in here I'm going to create another one
let's just say Alice and let's just say
Alice is also 40 years old and then I'm
just going to say create now we have two
names on the list
the example is not just this the
examples are also going to allow us to
edit these people so I can just tap on
any person on the list and by tapping on
that person you can see the same
dialogue appears on the screen however
the text is pre-populated with the
current information that is displayed on
this on the screen for that user so I
can say van dot van dot change that name
and change the age to 400 and press the
save button in there you can see the
information is then updated on the
screen so we have quite a bit of code
that we have to deal with or quite a lot
of requirements actually to deal with we
have the floating action button the
dialogue the creation of persons the
displaying of persons the storing of
persons maybe even if it's just in
memory but still we have to store that
list somewhere and also on top of that
we have to do the editing of every
person so this is the application that
we're going to implement in this example
which I believe is the fifth example in
this course so let's just get to it then
to remove this simulator from here
and then what we need to do is to bring
up the terminal on the screen
like that and then we're going to create
the fifth example because if you have a
look at the folders that we've created
so far we have example four as the last
example so let's go ahead and say
example five we're going to create that
now
and let's go into example fives folder
and then let's say flutter pop add hooks
riverpod
just like that
great stuff now for this particular
example we don't need just hooks forever
pot we also need the uuid package
because every person that we display on
that list is going to have an identifier
that personally identifies that uh
person and identify that personally
identifies that person yeah there's
quite a lot of
um similar words but you get the point
so every person is going to have a uuid
basically so let's say flutter pop add
uid in here and you can also do this in
Visual Studio code you can add packages
from Visual Studio code directly without
having to go into pops vaciamo so that's
very handy for those of you who want to
use Visual Studio code to do that so
let's go ahead and open up visual studio
code now then I'm going to go in here
I'm going to say
um selected device we already have the
simulator I don't know why it hasn't
understood that we have a simulator
right there and let's then go ahead into
our workspace settings Json and then say
zoom level and then set it to five you
can see that I've also removed some
distractions from the screen from the
previous examples up onto this example
so this is the first example that
doesn't have the status bar at the
bottom and it doesn't have the bar to
the left I don't actually know what that
bar is called we can go in here and see
and I believe it is called the activity
bar and the status bar that have been
removed activity bar I believe is to the
left and we don't really need that so
appearance remove activity Par Bar and
let's see what this is primary sidebar
oh yeah maybe we don't need that either
but uh we can use command P or control P
to open our various screens if you go in
here appearance primary sidebar and this
is actually something that I usually
remove anyways the primary sidebar so
let's go ahead and appearance primary
sidebar remove that so we can focus
completely just on our main Dart file
okay now that we have our example five's
main Dart file our example if I main
Dart file created let's go ahead to
example four and just get the main Dart
file from there because there we have
the provider scope we already had all
the Imports so that we had our
application with dark mode set up so
it's just very convenient to get exam
the previous examples code to have a
starting point for this example so let's
go to example four and you can't see it
but it's right here I'm just gonna copy
the code from here close it and then
paste it right here and let's just start
our application in um
the iOS simulator and you don't have to
have a Mac to do this you can as with
all the other examples or this entire
course actually you can run all these
codes on Linux and windows as well on
your Android emulator or on your Android
devices as well without a problem so
now I can see the application is running
now
on the iOS simulator I'm going to bring
it up here however as you'd expect it is
running the code for example four
because that's what we just pasted in
here let's go ahead and clean this code
up and I'm gonna maybe yeah let the
application run so this can be right
here without a problem let it be there
let's go and clean up this application
so I'm going to remove the list of names
the ticker provider the names provider
let's go to our home page as well and
remove this from here the names and for
the scaffold we're going to have no body
in here so let's remove the body as well
so we end up with a very simple example
as you can see in here okay and maybe
the title of our home page can also just
say home page for now all right so if
you go back to our application you can
see we have a simple home page no list
of anything no ticker that is taking
and we can then get started implementing
this particular example well as you saw
in how this application should behave
the core of the application is based on
a person class now we have uuid as well
so let's import uuid okay because we're
going to get started implementing this
person class right now so let's create
an immutable person okay immutable
person
uh immutable class actually
class personal and this person is going
to have name age and uuid not like that
let's say final uh string Nate then
we're going to have final ins H and then
we're going to have final uh string of
uid all right now we're going to create
a um
a Constructor for this class or an
initializer depending on which
programming language you come from you
may call the constructory initializer or
initializer I mean so let's create a um
person class in a Constructor which the
name and age need to be given but the
uuid is going to be automatically
generated by us if you don't pass it
through okay so let's go and say that
and we create these and we say require
this name and then require this age
however we say the uid is optional you
don't have to pass it okay like that and
then we say the uuid is either the uid
that you provide or it is the uid that
we grab from the uuid package just like
that so this way the caller to the
Constructor doesn't always have to pass
a uuid if they don't want to because we
have a default value for it okay
now that we have that we also need to
create a handy function on this person
class that allows us to update a person
with either a new name or a new age or
both because remember that dialogue that
I showed you in the application what
we're trying to implement right here
when I tap on this dialog we need to be
able to pass these values back to this
person and update it okay so a given
person should also be able to get
updated with
um or an existing person should be able
to get updated with new values of name
and age and this function will then
generate a new person
um instance for us so because these are
final fields we can't go ahead and just
change them in the current person and we
shouldn't really we should just create a
new person so let's say person
and we say updated okay and then we add
two parameters in here we say string and
name and ends H all right and then we
make this an error function and in here
as you can see we this is exactly the
code that I've actually written before
and this is why GitHub co-pilot is
helping me with this because I've
written this exact code before it's
learning from my own code as well so
really good
um now you can see we're creating a new
person instance and either we grab the
given name or we grab the name that was
already in the current instance of this
person okay
good stuff now we're gonna also get a
display name for every person because
that is the name that is displayed in
here you can see it says the name and
then blah blah years old so let's create
this function that does the display name
for or Returns the display name for us
so actually maybe it could just be a
getter we say display name and then we
say
um name is age years old okay so this is
a this is a good function I would say or
a getter
then we're also because we're placing
these inside a a list or on I treble we
also need to ensure that they're
Equitable so we know which person is
which by just comparing them okay so
let's go ahead and override the Boolean
um operator so we say bull operator
equal covariance person other and then
we say as long as the uid of this class
is the other uui did and these two
people are the same let's go ahead and
also create the hash code function in
here remove this and for hash code we're
just going to return the uuids hash code
so we say uid hashcode usually you have
to return a hash code for the object
that you're doing the comparison with if
you're doing comparison on multiple
Fields then you need to use object and
object hash all you could do that or you
could just say hash and you could say
name and age uuid like that okay this is
just a side note for those of you who
are interested in what what we're doing
with the hashcam wise just returning a
hash code for uuid all right also what
we're going to do is go ahead and
Implement two string on this person
because that's always very useful if
you're doing for instance poor man
debugging and you're outputting or
printing or logging a person instance to
the debug console it's always good to
have two stream because otherwise you're
just going to get a string that says
instance of person which is not very
useful okay so let's go ahead and
override this and we say overwrite not
with a capital out
and then we say string and this is a
function to string and this is actually
a good suggestion because this is
exactly the code that I've written
myself for this example before so this
is the two string function and you see
in these cases I'm actually quite glad
to have GitHub copilot because it helps
me as an instructor to write the code
much faster without having to type every
character because it's learning from my
own code as well
and good stuff that is really good we've
created the core of this application but
now we're getting to the scary part
because we need to start working with
our data model and we need to then
create our data model using a class that
we haven't worked with before a change
null to fire now a change Notifier is a
I would say actually it's the it is the
class that is able to store the most
complex objects and for that can be
changed and mutated as your application
goes on you see we have a change
Notifier and also a it's like an object
that is a state Notifier they're a
little bit different but I'm not going
to go too much into the details about
their differences we're going to learn
more about these as we go into the last
example which is the Instagram
clone that we're going to create so but
just know that a change Notifier is an
object that other objects can listen to
for changes however a change Notifier
does not tell its listeners what has
actually changed it just says something
has changed and tell the people who are
listening to me that something has
changed an object that I'm managing has
changed okay so we're going to create
now a change Notifier and we're going to
call it data model and this data model
is going to hold on to our person
objects and it's going to allow us to
remove persons it is also going to allow
us to add a person and but the removal
actually we're not going to use to be
honest with you but I'm just going to
create a remove function for you as an
example Apple so that you can build upon
this example and make it even better for
yourself
and also it is going to tell its
listeners when a person has changed so
that the UI can update when we actually
modify a person by tapping on that
person okay so without further Ado let's
just go ahead and start writing the data
model so we say data model and it
extends change note fire okay we don't
have to tell change Notifier what type
of object we're managing you can see it
is not it is not a generic class as such
so it has no generic constraints so we
don't have to tell it that we're
managing a list of persons okay so let's
go ahead and say we actually have a
final oops not Capital final list of
persons okay and we're gonna this is
actually the code that I've written
before very spooky okay so we have a
private variable that holds on to the
person objects for us okay then we're
gonna expose account to The Listener so
the count of people because we don't
want anyone to really
um read air directly this people list
from us so if anyone like for instance
if you're building a list View using its
Builder Constructor then you want to
know an account of persons that you need
to display on the screen so that's why
we need to expose account so let's just
say count and then in here we say it is
the people length Okay and then this is
a trick I really like that in order to
expose people from this change Notifier
I create an unmodifiable list View and
this unmodifiable list view just tells
the consumers of this change Notifier
that hey you get a list of people but
you're not allowed to change them all
right so it is a great way of exposing a
list of things to your UI by telling it
that it's not allowed to change those
objects so unmodifiable uh list View
and I believe this actually Imports Dart
collection so just be careful with that
if you're uh if your IDE or your text
editor doesn't have Auto importing then
you're gonna get an error right this
point when you say unmodifiable list
view because that class is defined in
Dart collection package so import it
manually if your ID or your text editor
doesn't have Auto importing or if you're
in Visual Studio code you can just
accept the auto importing without having
to do anything okay so this is an
unmodifiable list view of persons and we
say get people and you can see in here
we create an unmodifiable list view of
those persons and return the list to the
to the call site
great stuff now we have the basics done
for this data model the first function
we have to add in here is actually the
add function when you when the UI wants
to add a person to our list of people in
here so let's say avoid add person
and you see the implementation is very
simple and we just get a person object
and we just add it to our list and then
we call the notify listeners function so
this node file listeners you can see is
implemented inside change and Notifier
Dart and it has basically some code in
here you can have a look if you're
interested in understanding how it works
I'll be honest I actually haven't looked
at the code for notify listeners but it
is exciting always to know that in Dart
you can have a look at how internal
functions and internal classes are
actually working now we're going to also
create a remove person function but
we're not going to use this remove
person and actually let's just call it
remove because the other one
this one we call it add okay so add and
remove we're not going to call the
remove function but we're creating it
here so that you can later go and add
maybe an asterisk um sorry an x button
trailing button on your list tiles upon
pressing which you can actually remove
that person so just so you know this
function exists now okay
now we have to do the main function in
maybe not the main but one of the most
important functions between the ADD and
this function I would say this function
is going to be the most important and
this is going to be the update function
because this we need to create a
function that the UI can call in order
to update an existing person okay so
let's go ahead and say void update and
then we say a person
person updated person so we expect at
the UI to actually pass us the updated
person okay and then we're gonna First
Look if our array of people already
contains this person so we say final
index is people
and then we say index of
and then we say updated person
okay so this is using the hashing
algorithm and the Equitable that we've
created actually not the hashing but
it's using the Equitable part so it's
going through all the people in this
people and all the person instances and
in this people list and then it is going
through every one of them and calling
the equality function on them and then
it says is that person equal to this
person and then if it is then you
finally get the index right here okay
so let's go ahead then we say final
um old person it's not old person
age-wise but the person that was in our
array from before then we get uh that
from the index as you can see in here
okay so we get the person that was
already in our array and then we say if
the name or the age has been updated
then we're actually going to call the
updated function on that person so we
say if old person name is not the same
as updated person name or the old
person's age is not the same as updated
person's age then you can see then we're
actually updating uh this is this is
incorrect we're gonna fix that then we
need to update uh our person okay so we
say people at that particular index is
going to be uh updated person
okay
in here and actually we should say old
person
updated
updated right and then we say uh updated
person
's name and then updated person's age so
I'm going to go through this code one
more time so you you don't get confused
or I don't get confused
um so first we're finding the index of
this person using a cuid right then we
finding that person in our array of
people then we say okay we found the
person is that person's it is the old
person's name or age different from the
name and age that the UI is giving us if
yes then go into our array at that index
that the person exists and then take the
person as it is and update it with the
new name and age and place it back
inside this array okay so it's quite
easy actually once you break it down
and then we notify our listeners and
really that is it that is the core part
of this update function so it's not much
more to explain
okay now that we have our data model
which is our change Notifier as you'd
expect we have to create a provider in
order to work with it from our UI now
the class is called change Notifier then
as you'd expect the provider for it is
called change Notifier provider okay so
let's go ahead and create a people
provider so we say final people provider
it is uh let's see if GitHub co-pilot
can guess is a change in one of our
provider and it gets the ref and it
creates a data model and actually we can
ignore the ref we don't have to have the
ref in there okay so performing hot
reload and I can see it is not
succeeding with that because we're in
the old app let's go to the new app and
then do a hot restart you can see
nothing is happening on the screen
because we are not actually displaying
anything okay now before we get started
with the actual UI of this
um of this
example like creating the list view Etc
and there creating The Floating Action
button we have to create this little
beautiful dialog that you saw in here
like if I tap on it you can see you get
this uh dialog in here so let's go ahead
and create that dialogue first this is
the same dialogue you can see if I tap
on a person it displays the same dialog
as it displays when you press the
flowing action button but it behaves a
little bit different if you press the
plus plus a floating action button in
here the dialog gets displayed however
it is empty to start with and it says
enter name here enter h here and then
create however if I tap on an existing
person and it has the name and age
already populated in here and then you
can press create and also to be honestly
we can update this as well so that if
you're updating an existing person the
title can change and say save a person
and maybe save a person actually sounds
a little bit weird and update a person
and then this button could also say
update but we haven't done it for this
example don't have to but just so you
know we have the same dialogue for both
use cases and that's what we need to
implement right now so let's go ahead
and create a text editing controller for
the name and then it takes it in
controller for the h so I'm just going
to say name control is a text editing uh
controller like like this okay and this
is usually not how I created my text
editing controllers I place them in a in
a location in the code that I can
actually dispose off later as well but
if you look at how text um text Fields
work in flutter when they're disposed or
act they actually dispose of their own
text editing controllers as well so
let's go ahead in here and then we say
um
age controller then we have two texts
editing controllers okay and then we're
going to create a few a function that
returns a future of a an optional person
and we say create or update person
dialog we need a build context in here
so we say build context and then we say
context and then we have an optional
person parameter in here we're going to
call it existing person okay like that
and then we create our function like
this so what is happening really in here
is that we're saying that this function
always needs a build context however it
sometimes maybe call without an existing
person meaning that The Floating Action
button has been tapped and a new person
is about to get created
so there is no existing person to update
okay so let's get the name that this
function has to display we say string
optional name is
the existing person's name and then we
have the same code for age as well then
we say name controller its text is the
name
as you can see in here we say name okay
or empty like this so the name
controller texts either the existing
person's name or an empty text okay and
the same thing with age controller so we
say age to string or empty good stuff
none of the text controllers are in
place let's create a show dialog so we
say return shoulder dialog in here call
the show dialog function which
optionally creates a person okay the
context is already there we just need to
implement the Builder and the Builder
just gets a build context okay and it
has to display an alerts in here so
let's go ahead and say return alert
dialog
and and then for the title we're gonna
say let's go ahead in here and say title
um is a const uh text create or update
person maybe or we could just say create
a person as we had it in the original
example okay
and then for the content and let's go
ahead and create a column with some
empty children for now okay
let's go in here perform a hot reload
let's go back to our application so the
hot reload works
good stuff and to be honest with you we
could also remove the line numbers now
that I think about it let's go ahead
into our Json and then we say uh line
numbers editor line numbers and let's
turn them off because that gives us some
more space perhaps to look or it didn't
give us more space actually just
hid like the line numbers so if I
comment this back
it does give us some more room no it
doesn't okay let's leave the line
numbers as they are okay
good in here for the children we're
going to create a um actually let's put
the main axis as a minimum because
otherwise this column is going to take
the entire height of the screen so let's
say main axis size
and then we're going to say main axis
size minimum okay for the first child is
going to be a text field so let's say
text field
and like this and its controller is
going to be the name controller name
controller as you can see in here and I
can actually see that it's giving me a
lot of code in here but I don't want to
accept that whole bunch of code from
GitHub co-pilot because it's just going
to confuse us I think everyone are you
watching and me as well recording so I'm
just going to say name controller in
here okay and that's my controller M4
then we're going to have a decoration
because if you look in the example when
we create a new person it has some hints
in here that says enter name here and
enter age here okay so that is done with
the decoration so I'm gonna just copy
and paste the decoration in here so I
don't have to type it manually so
decoration is input decoration with
label text of enter name here as you can
see okay
now that we have that and we need to
implement the unchanged so let's go to
unchanged we get the value and then we
just place it inside name as you can see
oops
like that okay so the name variable is
going to be changed as the unchanged
function gets called all right
good now that we have the text field for
um and for the name of the person let's
go ahead and create the text field for
age as well so I'm just going to copy
and paste right here and for instead of
enter name we're going to say enter age
here okay and in here we get the age
it's going to be int and try parsing
this value as you can see in here so the
age variable is going to be set to the
value that the user is entering inside
this text so now we're not going to be
so fancy and go and Implement some sort
of like a input limitation on this text
field to ensure that only digits are
being entered we're just going to go
ahead and leave it as it is this is this
is not I mean this example isn't really
just about flutter we're gonna focus a
lot also on at riverpot so let's just
keep our focus on that instead of going
to every single detail about the UI okay
now we need to define a list of actions
in here so let's say actions and in here
and we have two text buttons one is
cancel and the other one is the create
button so let's go ahead and say text
button and I like to cancel uh cancel
and I'm going to remove
so let's go ahead in here and then the
button for this the second button is
gonna say create instead of save okay or
maybe we could leave it as save actually
save is a good idea to have because it
works both for updating and also works
for
um it works for creating a new person
save works as well okay so
um in here we have the I can see the
code is written so that it actually
complies with how I've written this code
from before but we need some more coding
here to be honest with you so I'm I'm
actually gonna remove this on pressed
from an error function so let's go ahead
and remove this and I'm going to say
unpressed it is going to be a full
function in here okay
I'm pressed like this okay now on this
unpressed we need to make sure that name
and age need to be already provided so
if you come into this dialog if you look
how it works let's go back to our
application if you come into this dialog
and just press the create button nothing
happens so we need to take care of this
logic so we say if
name is not null and age is not null
okay then we're gonna do something
otherwise we are just gonna say pop this
screen so means remove this dialect from
the screen okay because we don't have
name or age or both so then we say if if
we have an existing person that has been
given a given to us here you can see in
here we have we might have an existing
person that we're trying to update so we
say if existing person is not null
meaning that we have to update this
person then we say final new person
is the existing person and we're gonna
update it with the given name and age
that we have okay let's go back to our
application so hot reload works good now
we get the new person that we have to
pop our Navigator with that new person
as you can see in here okay otherwise
I'm gonna say no existing person
person creates a new one okay then we
have to create a new one and in here we
say we have
have existing person okay good stuff no
existent person creating you want that
that should be very simple let's see if
GitHub co-pilot can uh write this code
for me
I'm gonna give it some help and then pop
the Navigator we could also pop it just
like this to be honest with you we could
just not create an intermediate variable
and just
do it like this so Navigator of context
pop with that person okay
good stuff I think we're ready with this
function to be honest with you so we
have an existing person then we update
it and get the new person as a result
and then pop with that new person
otherwise if you have no exist in person
create a new one and pop the Navigator
and here is a no name or age or both
okay and the rest is simple so not much
more complicated there's a lot of code
to be honest with you I've also noticed
that in if you compare sometimes flutter
with swift UI for instance it can get a
little bit more like becoming more code
and flutter but uh at the end of the day
here when you're writing flutter code
your code is going to work on the web
it's going to work on a mat on Mac OS
it's going to work a Windows Linux it's
going to work on Android and iOS so your
writing code that's working everywhere
with flutter so if it's a little bit
more code it doesn't matter your code is
a lot more effective than for instance
Swift UI code that only works on watch
OS Mac OS and iOS so you're hitting a
lot more targets with flutter and
writing a little bit more code maybe
doesn't hurt anyone so now that we have
that dialog let's go ahead and actually
write our UI okay so that is going to
happen inside home page so I'm going to
go to home page in here
inside our scaffold let's leave the home
page as it is and for the body we're
going to create a consumer because we
don't want the entire scaffold to be
re-created and recalculated every time
anything happens to the list of people
then we see and we say a consumer sorry
the body is a consumer okay
like this and then we have a builder now
in this Builder we're going to go ahead
and grab our let's see what it is saying
here
there we go okay now in this Builder
let's go ahead and grab our data model
so we're going to say datum
data model we have in our Builder we
have a ref and we're going to watch the
people provided now you can see our data
models actually that data model so it's
not an async value or anything we're
actually watching when you watch a
change Notifier provider you actually
get its change Notifier object back just
know that okay then we're going to
create a list view so we're going to say
return list view Builder and then for
the item count let's go ahead in here we
say item count
uh item count is
um data model can't remember this getter
that we created up there it's the count
now you know why it is useful
and so we have the count and then we
have an item Builder
like this and then we have the index
pass then really good let's get the
person then we say person is the data
model people at that index and then we
need to create a re a list tile to
represent every person so list tile all
right and
um
good stuff for the title
um actually this is going to be
interesting because the title has to
have a gesture detector as well but
we're going to create the gesture
detector soon okay so title is going to
be the
um person's displaying so let's say
person display name
explaining all right uh our argument
string can't be as oh it needs to be
inside a text right
this plain name all right then what
we're going to do is to wrap this text
inside a gesture detector so let's go
ahead and say wrap it with a widget and
then I'm going to say gesture detector
okay and once you tap on it then we have
to display the dialog so you say on tap
on tap like this and we're going to
create a function in here then let's
just go ahead on tap make this an async
function and then we say we display our
dialog we say final updated person is
and we say await on the
create or updated person dialog we have
the context and then we also have the
person we pass them both to this
function okay and we're awaiting on it
and then we say if
if the updated person updated person is
not null basically the result of our
dialog then we update our data model
with that updated person okay that's
that's really it that's really all we
had to do for our list view okay now
what we need to do then is here we have
the consumer and the scaffold then we
have to go ahead and create Floating
Action button so let's go ahead and say
Floating Action button is floating
action button
and good stuff now for his child we say
it is a const icon at this works for me
actually it's really good okay then we
also have to create the unpressed
function so unpressed
we create a simple function and we
actually can make it async because it
has to call the create or update person
that I like okay so in this case when
you press the floating action button if
you remember from the UI here it
basically doesn't have an existing
person so it just has to call that
particular create or updated person
dialog like this
and we say final
and person is a weight on that dialogue
with just the context you can see okay
and then we're going to say if the
person was not null meaning that the
user didn't press the cancel button if
the person was actually created and
returned from the function to us then we
say final data model
is ref read our uh
people
provider because the floating action
button doesn't have access to the data
model we actually read the data model if
you remember here inside our consumers
in inside the body which has a consumer
and here we're using the ref read
because we don't want to watch any
changes to the provider we just want to
get a snapshot of the current state of
the people provider remember that read
is very very important and is is a
synchronous read of your provider's
value okay or your provider's internal
data and in here you have access to like
the Notifier then you have access to
some other arguments as well but we just
now are going to get the snapshot of
this people provider which is going to
internally give us the data model change
nullifier class or instance okay
now that we have that we're going to say
data model and then we're going to say
add person and what happens in here is
that add then internally let's go back
to our application add internally if you
look at it it's going to add that given
person and then it's going to notify its
listeners and we have a listener in here
because we're saying ref watch then this
list view is going to get recalculated
really good now we're inside our
application you can see this is our app
because if I change home pages then the
title is going to get updated so I'm
going to go back to home page and then
let's actually see how our app works so
I'm just going to do a hot restart of
the entire application as well
like this and then I'm going to press
the floating action button I'm going to
say hello oops I can see both are being
updated and that's because a copy paste
issue for sure and I can see the age
controller is probably not assigned to
the text field for H so let's just say
age controller
control okay let's uh hot restart the
application
and then press the plus button I'm going
to say the name is hello and the age is
20. press the save button you can see
Hello with the age of 20 years old is
displayed in here then we're going to
say world with the age of 30 is
displayed here then if I tap on hello
you can see its information is displayed
here if I cancel nothing happens and if
I press on world and change the age to
20 as well press save it's updated in
here and I can change world with capital
letters
save you can see it's updated in here as
well so that was really it for this
example it was quite a large example but
we need to be ready for large examples
because the last example in this course
is going to be ginormous so we need to
really ensure that we're not scared of a
longer of writing longer and get some
pieces of code but I'm going to guide
you through all of these I'm going to
just give you as much information as
possible without
making it too much hopefully so this is
for this example and I hope to see you
in the next one well that was really
good in example number five the previous
example we learned how to work with
um change notifiers and change Notifier
provider of course but change notifiers
the way they work is that they don't
really know what changes you're making
the change notifiers just know that
something has happened a change has been
made an update has been made and the
state has to be updated now in this
particular example the sixth example
before we get into the Instagram clone
we're going to look at another provider
which is called a state Notifier
provider I believe now the class names
could be a little bit confusing I may
also say say them incorrectly but
um I believe that it is actually called
a
State Notifier provider yes and the way
State Notifier provider works is that it
holds a state object an object of any
type and you will be allowed to change
that object changing the object then
notifies the listeners of that state
Notifier now at the heart of the site
Notifier provider just like any other
provider actually not any other but like
for instance the state Notifier provider
and change Notifier provider at their
hearts is actually another object a kind
of a Notifier the previous Notifier that
we looked at was a change Notifier and
in this example we're going to have a
look at a state Notifier if you remember
from the change Notifier we just created
a subclass of change Notifier in the
previous example without telling it what
kind of object we're managing because
the only thing we have to do when we
change that object was to just to call
the notify listeners function however
using a state Notifier and the state
Notifier you don't have to notify any
listeners manually the only thing you
have to do is just to change the state
object and the state's Notifier will do
the rest for you without further Ado
without actually talking too much about
um maybe the concepts behind this let's
go ahead and have a look at what
application we're going to develop in
this example so I'm going to bring the
iOS simulator up in here so you can see
it as well how it works I'm going to
increase the size okay so this is the
app that we're gonna develop
and in this app we have a list of films
that we're gonna hardcore a hard uh code
into our application and in this uh in
this list as you can see we're
displaying all the films and we have a
little filter on top of the screen the
filter says all favorite and not
favorite and these three are going to be
their own providers as you'll soon see
we will have a list VM basically a list
component that is going to be its own
widget as a parameter to this list we're
going to pass it a provider of a list of
films and then this list view itself can
then work with that provider and get the
information from that provider and then
we have a little filter in here as you
saw and this filter is actually going to
be managed by a provider as well so the
provider for the type of films is going
to be connected to an enum that says all
favorite and non-favorite as that
provider's enum value changes we are
gonna watch those changes in our other
three providers and then provide the
values to this list now not only that
but also this application allows the
user to favorite and remove the
favorites for any of these films so if
we for instance in here say Godfather
Part Two is favorited and if we go to
favorites we can see the film if we go
to not favorite we see the other three
films and then we go to all we see all
the films and of course you can go ahead
and favorite all of them and you go to
favorite then you see all of them and if
you say not favor you don't see any of
them so this is the app that we're gonna
develop so let's go ahead and keep this
in mind actually how this app should
look like and with that in mind we're
going to create this application from
scratch so let me bring up terminal in
here
just like that and then we are going to
say flutter create and this is going to
be our example six
and then we're gonna add a hooks River
pot so let's go to example six in here
and say hooks uh River pod in here great
stuff
and uh I don't actually think that we
need any other libraries except for
hooks River pots so let's open our
application in here the first thing that
I usually do is just to change the font
size so I'm going to say Json
and so let's just say zoom level we
usually set it to five
okay and let's just get rid of some
distractions on the screen by going to
view appearance and actually we could
remove the primary sidebar for now so
let's go to main Dart file in here as
you can see we have a good old material
application but we're going to replace
this with the code that we wrote in the
previous example so example five okay so
let me just go to example five
and I can see the example five right
here actually
and I'm gonna copy this code from here
and then I'm going to close example five
and the reason what we're doing this is
that because in all these other examples
we've already set up our provider scope
our application is using dark mode and
also we have for instance our main
scaffold set up already with a consumer
widget so let's go ahead and do some
cleanup here we don't have uuid we don't
need Dart collection right now so let's
clean those up material is the only one
that we need and then it hooks riverpod
as well so let's remove person uh class
from here and also the data modeled
which was a change Notifier in the
previous example the people provider
that's going to be deleted then we're
going to go in here and then change and
actually remove the body of our home
page completely alright so it goes all
the way down here and that is it and
then we're going to remove all the name
controllers age controllers and also
this function create or update person
person dialogue as well
so remove all of that and then we should
have a clean slate to work with as you
can see in here right okay that's really
good so we have a clean slate let's say
select device iPhone 14 pro and again if
you're on Linux or Windows you don't
have to run your application on an
iPhone
unfortunately you may not be able to
even if you wanted to that's very
unfortunate from Apple's side you will
need to run your application on the
Android emulator or on a real device but
that's gonna do
um but that's just gonna do fine as well
you don't have to have an iOS simulator
or a Mac in order to achieve this to be
honest with you so that is running now
I'm going to bring up the simulator you
can see our application is looking like
this
right there okay so that's our app for
now and what we need to do is to go
ahead and define a class that basically
defines our films so this is going to be
an immutable class let's just say
immutable class film okay and in this
film we're gonna have ID title
description and a flag that says if it's
a favorite or not so I'm just going to
say ID
and then I'm going to say title and then
I'm going to say description and then
and then I'm gonna say is favorites okay
and then for these three I'm gonna say
final string and then I'm going to put
the semicolon at the end and for this
one I'm going to say final bull is
favorite so now we have our Fields set
up for the film class let's go ahead and
ask Visual Studio code to create a
Constructor for this then I'm going to
say this is a constant Constructor okay
and I'm gonna put a curly bracket in
here because I'm going to make these
required named parameters so the outside
world always has to pass the parameter
names in here I'm going to go in here
and say these are all required
parameters okay good stuff
now the next thing that we have to do is
to create a copy function on this fill
and the reason behind that is if you
look at how this example works
and once we favorite a film and none of
the other properties of this film change
except for it's his favorite flag so we
want a function on any film that can
take a Boolean which then creates a new
film object with the same ID title and
description as the current object but it
changes the is favor flag okay so let's
go ahead and do that so we say we create
a function that returns a film it's
called copy and then we need a required
Boolean function that says is favorite
okay and you can see in here a GitHub
co-pilot could really help actually it
really helped me create this function
for for me I didn't have to write so
much code so I'm very grateful for that
so we create the film and we're just
returning it let's let's just make sure
it's looking fine as well I'm going to
go to
um the simulator switch back to our
application so that hot reload works and
or hot restart so if you look it's just
using the ID from it's using the title
for himself or this and self is in Swift
and then his favorite is coming from
this parameter right here okay let's go
ahead and create the two string function
so that if you're doing poor man
debugging and then you can also see the
two spring
um value for your films okay so we say
this is a string and it returns to
string and let's see if GitHub copilot
can help me with these mundane tasks and
I can see that it says film ID title etc
etc and this is actually very
interesting because GitHub co-pilot
actually wrote this code exact that I've
written it before I don't know if it's a
coincidence that it can actually write
it exactly as I've written it before or
if it's learning from the code that I've
written already
so one thing I like to do with these
long strings is and this is something
that you can also do is to break them
down into multiple strings but the
result still appears in one line when
you print it out so if you put a a colon
in here and then go to the next line and
put another colon in here it still works
then call it in here next line colon
here so you can just break your strings
into multiple lines and it still works
exactly as it was just one line when you
print the result of this out so this is
just a little tip for you if you want to
clean up your code so you don't end up
with these very very long strings
basically
so let's go and Implement equality for
our films so let's go ahead and say
override and this is a Boolean getter so
it's as an operator actually
operator equal equal and then we're
going to take a covariance of a film
other okay and then what we're going to
say is that two films are equal to each
other if the ID of self is the ID of
other and uh is favorites flag is equal
to the others is favor flag as well so
this is just used for equality and when
we're placing our film objects into a
list so that we can easily find them
because finding um a film inside a list
or an I triple is going to be done using
its equality unless you have to do that
unless you choose to do the equal
equation manually at call site which I
don't recommend now as you can see in
here it's recommended by Visual Studio
code to implement hash code as well
because we've implemented equality
operator in here here so I'm going to
get help from Visual Studio code to do
that so I'm just going to say create
method hash code okay as you can see in
here and the hash code we're just going
to take the IDS hash code okay so we
could say actually we could we could say
both of them so we could say object hash
and then we say
hash all let's say hash all
that creates a combined hash code for a
sequence of objects uh okay so let's say
hash all and then put an array here and
say ID and is favorite
okay so that is it really that's how we
create the hash value for our object
okay really good now that we have the
film we have to create a hard-coded
array of films as well and I've already
done this because this is kind of a
mundane task I understand that at home
you're following along or if you're I
mean I don't know if you're at home
watching this video but wherever you're
watching this video from you really want
to follow along so I I'm very aware of
not pasting too big a pieces of code but
this case unfortunately it's going to be
like maybe 20 lines of code that I'm
going to paste in here but it's a very
mundane task that I don't want to do by
hand so I'm going to paste it in here
and quickly actually not quickly slowly
scroll through this paste it code so you
can also follow along so here's here's
the array of films hard coded and it
begins from here you're more than
welcome to pause the video at this point
and go ahead and write the exact same
code at home but what you could all to
do is to clone the GitHub repository for
this um
which as well in order just to copy
paste this piece of code so I'm just
going to quickly
scroll through this I don't know why I
say it quickly because I'm scrolling
very uh very um slowly so here's what I
pasted if you want to grab that code as
well at home okay
great stuff now that we've done this
let's go ahead and create our Notifier
now this is a state Notifier State
Notifier is nothing that is coming from
for instance
um
from a riverpot is actually built into
flutter itself and you may have worked
with it before but if you haven't worked
with it I'm just going to walk you
through how to use it so we want a films
Notifier that has a list of films okay
it has a list of all the films in the
system and it allows you to update any
given film with a favorite flag so you
can say favorite or not favorite that's
the only thing this Notifier has to do
so let's just create a class in here we
say films Notifier okay and we say this
extends a state Notifier that works with
a list of film okay that's it now we
have to call a and we have to create a
Constructor for this so let's say create
a Constructor and you can see in here we
don't have a we don't want the caller to
our Notifier to pass a list of films to
us so we remove this but we internally
call Super if I can spell it super
all films as it was suggested right
there okay
so we pass all phones to our super so
our films Notifier by default is
populated by a list of our films as it
is uh mentioned in hero as as it is
written there we want an update function
so we say update any given film with the
is favor flag so let's go ahead and say
void update and then I say a required
film parameter okay and then we say bull
is favorite
actually maybe we should remove the
required it's actually nicer to say
updated film with the Boolean flag like
that okay so what we're going to do in
here is to say we're going to map the
state and find our state with a given ID
if we find that ID then we're gonna copy
that film but it is new favorite flag
otherwise we're just going to use the
same film that was in the state so you
can see because we're working with a
state Notifier we have access to an
object called State and that state is a
list of films and what's Magic about the
state is that internally the state
Notifier has overwritten the setter for
state so if I say state is equal to
State you can go copy the or sorry
select this equality and then right
click on and say go to definition oops
let's see a set State here you can see
here's a Setter for it and they've
overwritten the center for state so
anytime you update the state with equal
equal sign then you get updates to your
and to the classes that are listening so
you can see in here and add a listener
let's see
update should notify you see
so this this whole thing is allowing you
to avoid having to write a notified
listeners manually so by just setting
the state internally flutter is going to
notify all the listeners if it has to if
the state has actually changed okay so
let's go in here and say we go through
all the films that are in the state then
we map it basically and we say in here
that this is this film
and then we say in this error function
and we say if this film
its ID is equal to the given film's ID
okay then we I'm going to bring this
down in here
then let's put the question mark in here
as well I know it's very red at the
moment but that's okay then we say this
film
it should be copied with the new is
favorite flag okay so we're basically
because I don't know if you've actually
worked with the map function the map
function gives you every object in an I
triple and in turn it expects you to
return a new object of any type and that
new object will then be added to the
resulting eye trouble so basically in
here we're doing a for Loop and also
we're changing the state at the same
time okay so that's how Map works if
you're not familiar with map I really
suggest that you read the documentation
about how map actually internally works
as well okay or maybe not internally but
just get a high level overview of how
Map works and do some exercises at home
as well just to learn how it works okay
so now that we have this film copy in
the case that we actually found a film
with that ID then we're gonna say it's
um copied otherwise with this operator
we're going to say take this film
exactly as it was before okay so this is
where that and this is where this ends
and then we say to list and I believe
this should do the trick for us yeah so
this is how our code looks like at the
moment
so you see we say state is State and
then we go through every film if we find
the film with the given ID that is
inside this film then we copy this film
which is coming from the state itself so
we don't change his title and subtitle
Etc and we just update his favorite
otherwise we take this film exactly as
it was let's just put a comment here as
well and I think we could just do some
better
formatting as well but by putting some
commas where they should be all right so
now our state's Notifier to be honest
with you is finished there's not much
more that we have to do
and let's go and create the favorite
status if you remember from our
application in here we have three
different type of favorite statuses all
favorite and not favorite so let's go
ahead and write that so I'm going to say
favorite status and then I'm going to
say all favorite
favorites and not favorite okay
so that's our favorite status let's go
in here
and then what we need to do is to create
a provider that it keeps hold of this
favorite status so that the UI can
update the provider and the reason that
we're putting it inside a provider
remember is that once you're in riverpod
you need to be in the provider world you
need to create pretty much everything in
terms of providers because if you do
that then using their references you
know the ref
argument that gets passed to every
provider and then you can hook into
other providers so what we need to do in
here is to create a favorite status
provider which is of type State provider
and this state provider then is going to
keep hold of the favorite status other
providers are going to listen to changes
that happen to that favorite status
provider and if the status changes then
they're going to create new objects to
return okay so I will show you how this
actually works so we have the favorite
status let's create a favorite status
provider which just keeps hold of a a
copy of this favorite status okay so
let's say final favorite status provider
and this is a state provider because it
keeps a state object all right and then
we say it keeps the state of favorite
status
and the ref can't just be ignored so the
first parameter gets ignored and by
default we have the favorite status set
to all as you can see in here okay then
we're gonna go and say and this is our
favorite status
and then we want a provider that gives
us all the films so all films okay
so we want a provider that gives us all
the films so let's say final all films
provider I think I misspelled it here
and then we say this guy which has all
the films is gonna directly work with
the um with our state Notifier which is
this guy okay so film's not a fire so
let's say that this guy is a States
Notifier provider States not fire
provider and when you do that you
actually have to say what your Notifier
is and also you can see it's it's a
films Notifier and also that films
Notifier manages a list of films so this
is how you would constrain the generic
parameters to the state Notifier
provider okay so this guy holds all the
films for us and in in return it creates
a Notifier remember when we later work
with this guy we can actually grab its
Notifier just like this remember this if
we say ref watch and then we say this
guy Notifier do you remember this and
then we have an update function all of a
sudden because that's the update
function on the Notifier right so that's
how you would work with this provider
later as you'll associate actually
okay so we have all the films now we
want also two other providers one to
grab all the favorited films and the
other one to grab all the non-favorited
films okay or not favorite films so
let's say favorite films and then we say
final and favorite films provider now
you would say okay so is his favorite
films provider it can also be a state
Notifier provider the question is does
it have to because if you look how
notify the film's Notifier works it has
by default all the films but we don't
want all the films what this guy wants
is just to get the favorited films and
wait a minute we have all the films
already in another provider so can we
not just get the all films provider and
then grab its films and then grab all
the favorited ones and that's exactly
what we're gonna do actually so for the
favorite favorite films provider this
guy is going to be a plain provider so
we say it keeps an eye trouble of films
okay
and also we need the ref actually in
this particular example okay and we
create an error function and close the
error function right here now using the
ref what we're going to do is to say we
have the ref and we're going to watch
the all films provider okay so all
phones provider and then we say where
the element is not it's actually
favorited okay so we'll say this element
is called a film and we say film is
favorite just like that okay so we're
watching the changes that are happening
to uh the all films provider if they
happen you see if they happen and the
these changes happen when you actually
go and favorite a film or remove the
favorite from the film then this guy
sends an update then this favorite films
provider will then be updated by default
okay let's copy this code and then paste
it right here because we're gonna say
not favorite films or non-favorite films
okay and change this and we say not
let's change this as well to not
favorite not favorite films provider is
exactly the same thing as the favorite
uh films provider
except in here we just have to flip this
flag and say that the film shouldn't be
favorited okay or shouldn't happen
favorited
now what we also need is to create a
films list widget which is going to be a
consumer widget if you remember from
this guy
how our application should look like we
have this filter on top but we also want
a list so let's go ahead and create a
separate component for this list which
is going to be a consumer widget so I'm
just going to copy the home page that
we've created in here okay I'm just
going to copy that paste it in here and
what we're going to do is going to call
this guy films
widget okay and then I'm gonna change
this
like this okay now we have a films
widget and we're going to change a
scaffold as well because this films
which shouldn't return a scaffold you
should just return the list view okay
and let's go ahead and in here actually
say that it returns and expanded and
this child is a list view Builder and we
just leave everything empty for now okay
so that's how it should look like and
we're going to populate this list view
soon
good stuff now what this guy needs is a
provider actually this guy needs to grab
a provider but what provider
problem is that we are going to pass
this guy three different types of
providers and actually two different
types of providers all films provider
favorite films provider and not favorite
films provider I know that's three but
there are two types one is a state
Notifier provider and the other two are
just simple providers so how do we tell
this guy that it is allowed to work with
two different types of providers without
making our code look horrible well
it turns out that all these providers at
their core they conform to a another
provider that is called Always alive
provider base and I know that's a
mouthful to say but if you go into their
source code you'll see that so you can
see in here that the state notify
provider actually is using the always
live provider base in here which you can
see is a mixing okay so let's go out
into the normal provider class as well
and that is also mixing in the always
alive provider base so if we made our
films widget work with a an always a
live provider base that has an eye film
then it will work for all those three
providers okay so three providers and
two provider types let's go in here and
say final always live provider base of I
turbo I turbo film then this is going to
be our provider so and then in here we
go ahead and add it as a parameter so we
say required
this provides okay so the problem with
the Constructor is done now we need to
go ahead and grab our films we know that
our films are inside this provider so
let's watch changes to that provider so
we say final films is ref watch provider
and you basically now have an eye
trouble of film so the rest is just pure
flutter you don't really have to do so
much except for when you favorite an
unfavorite elements or films okay so
let's go in in this list view Builder
and we're going to say
the item count is going to be the film's
length and then we're going to say item
Builder and we grab the film okay film
element ad that's really good GitHub
copilot helped me with that
now we have the film let's grab its
favorite icon okay because depending on
if film is favorited or not favorited
we're gonna have a different icon for it
one is a heart which is not filled and
the other one is a heart that is filled
inside okay so final favorite uh
favorite favorite
icon is film if it's favorited then we
go to the next line we say then const
icon icons
favorite and then otherwise let's see if
GitHub co-pilot can't help with that
yeah that's actually the code that I've
written before so it could help really
well with that
then we return a list tile in here okay
so for our list tile what we need to do
first is to set up the title so uh let's
say title then we say it's a text a
widget with the films title in it then
we say the subtitle is a another text
widget actually with the film's
description and let's fix this in here
and the trailing component is the
important component in here because it's
this heart icon in here okay so the
trailing component is very important so
let's go ahead and say trailing and this
is going to be an icon button okay as
you'd expect and its icon is going to be
the favorite icon
as we've written it in here you see we
have the favorite icon and then we have
the unpressed let's see unpressed like
this it's going to be a void function
all right and we say final is favorite
let's just grab the film's favorite flag
is favorite whoops film is favorite and
then we flip it okay
so we flip the favor flag hot restart
isn't our hot reload wasn't working
because our application wasn't in the
foreground now after that what we want
is to tell the Notifier this guy
that a film's favorite flag has changed
so I just showed you before that we can
go and say uh
ref read then we say all all films
provider you see here we go directly to
the all films provider okay because if
we say here provider
which is our provider then you can see
that in here we don't have a Notifier
okay we need the Notifier to the all
films provider because that is the
object that is going to take care of the
updating okay then we say in here
Notifier and then we call the update
with the film and the new is favorite
flag in there good stuff so that was
really the um
class that we had to write for our
phones widget before we actually get
started with the actual implementation
of the home page itself we also need to
implement this little guy in here this
all favorite and not favorites so this
guy is just going to display
a list of our let's see the enum which
we call the favorite status okay and we
could just go ahead and do that easily
actually it's going to be a stateless
widget so
let's say STL in here flutter stateless
widget okay and I'm going to call it
filter widget as you can see in here all
right
and this guy is a stateless widget but
it is still going to work with the
favorite status provider but how it is a
stainless widget now the key is that
consumer widget do you remember we
worked with consumer before consumer is
gonna give you a widgets ref anywhere
you are so you don't actually have to
create a consumer widgets as you can see
in here let's see we're creating
consumer widget at the top level but if
you at anywhere in your application need
to work with providers you can just
create a consumer as the parent widget
and in here then you get this Builder
which gives you a widget ref which you
can then hook into all sorts of
providers okay and that's exactly what
we're going to do in here so let's
create a drop down button of favorite
status so this is just pure plus plotter
this is just pure flutter so I'm not
going to go too much into it because
this is just a drop down and which we
should all know how to work with okay
but I'm going to explain it a little bit
as well so drop down
and button and it's let's just say it's
a value
whoops
like this
its value is going to be our ref watch
our favorite status provider status
provider okay so you see the favorite
status provider actually always gives us
the current value for uh for that enum
so the selected value okay so if we put
it in here final uh Foo is this you can
see Foo oops we don't have a ref okay
ref is here you can see Foo is actually
your favorite status by watching the
favorite status provider you get the
favorite status that is currently
selected okay that's why we're sending
it to the value of this drop down button
in here okay we have that in there and
then what we need to do is also
Implement items so we're going to go in
here and say the items are going to be
our favorite status and then we're gonna
take their all the values that are in
that enum and then we're gonna map them
so let's say FS as in favorite status
then we're going to create a drop down
menu item per favorite status so let's
say drop down menu item
and the child is going to be a text so I
know it's very red at the moment but
we're gonna fix all of this soon so
let's say the child is
um FS two string and we're gonna
actually split it by dot so split it by
Dot and then we're just gonna take the
last item because by default actually
let me fix this last item
here last by default if you have an enum
like this let's go back in here
I know that was a lot of red stuff but
don't worry we'll fix all those
um favorite status uh if you if you take
the values then you will get a new to
string them then you get an array that
looks like this
favorite status all
and then you get favorite status
favorite so these are the strings that
you get but what we're doing when we're
doing the split we are saying that we
don't want this part we're splitting it
by dots and then throwing away this one
okay so we're getting the last component
the first component is going to be this
one the last component is going to be
this one okay so that's how we actually
display this you see it says all
favorite not favorite it's not showing
favorite status dot all okay so that's
just a little bit of a trick and you can
do it in other ways as well you can
create a maybe a getter on this favorite
status that actually returns as title to
the application as well but we haven't
done that now it's just using this one
for now okay so that's really good we
have the child and let's go ahead and
create the value as well so that's the
child and its value is going to be their
favorite status okay
now let's say that this is to list okay
and put a comma in there let's put
commas everywhere that is applicable uh
good sore child put the child at the end
of this
good and like that and you can see the
code as it is now is a lot more readable
so this is the items these are the items
inside the drop down button
and
that is really it to be honest with you
so we just need to do the unchanged and
then we're done so let's go ahead and
get help from Visual Studio code and say
add required argument unchanged good and
then it gives us the favorite status
hot reload isn't working because we're
not in our application let's go in here
is unchanged and let's change this to
favorite status so when we get a new
favorite status we just need to tell
this guy so this provider that we had up
here do you remember this favorite
status provider okay we just need to
notify that something has changed so
let's go into our ref and say we read
the favorites status provider okay not
only that we actually read it State and
then we set the state to
um to the fs like this and we unwrap it
now this looks like a little bit of a
handful and you may be like okay but
what is all of this like what is that
state why am I not just doing this
and to be honest with you the reason
behind is very simple you just have to
do um you have to do a trial and error
like if you just type ref read and I
usually do this if I say Foo is this
then I look at the data type oh it's a
state controller it actually allows me
to change like if you go to state
controller State Controller okay it it
allows you it says a state Notifier that
allows modifying its state from the
outside it's very simple that's how you
would modify the state okay however if
you just read the favorite status
provider what do you get you get your
favorite status you can't change it it
has nothing for you to change but if you
just put a dot in here you can see you
get the Notifier and also the state as
well okay you see so you can also say
actually notify in here and then dot
state if you want to but we're just
using this state in here so I would
really suggest that when you're working
with provider or
sorry when you're working with riverbot
or actually anything else in any
programming language if you're not
familiar with how it works just do a
little bit of a digging around Google it
maybe just play around with it I find in
flutter that playing around with the
code and having a look at the source
code helps a lot and also reading the
documentations okay so for now just know
that we're doing a an a
there are so many ands and A's we're
doing
asynchronous a read of this provider's
estate controller and we're setting its
state to the favorite status that's all
we're doing okay and you can actually
remove the data typing here as well so
it still works all right
that's really good we have the filter
widget and we also have the list so what
we need to do then is to go ahead and
sorry the films widget and we also have
the filter widget we can go ahead in our
main component and put it all together
so let's go to home page in here and
then we go to the body of this app bar
and let's just change it to films as
well okay so let's go to our application
see how it looks like films yes as it
should and here it also says films then
we're gonna dump that component that we
created and so let's just create the you
see this component the filter widget
let's dump it inside a column because in
the next child of the column we're going
to add the films widget so let's go in
here and say the child oops and this
body is a column and as children we're
going to start with the um the filter
one
the filter which I'm just going to copy
its name let's bring it up here we say
the filter widget and it's a const
actually so uh let's go in here
put a comma in there as well to get a
formatting right you can see it's at the
moment saying all and then we can change
it and it stays the same you see it
stays as you change it
and that that means our filter which is
working as it should it's communicating
with the provider
now in here what we need then is to
create a uh our consumer that wraps
around our filter so this is a little
bit of a tricky one so I'm going to
explain it a little bit and I really
hope that you you stick with this
explanation and you hang with me until
I'm done with this explanation you see
we have two components in here let's go
back to this application
we have this widget on top and then we
have the switch again here when we
change this when I change all favorite
not favorite I don't want this guy to be
re-rendered I just want the list to be
re-rendered okay so what I can do then
if I go ahead in here and I dump my
um if I then write code like this
somewhere in here and this the changes
to our favorite status provider will
then trigger and rebuild of this entire
build function because we're dependent
on this ref object in here however if I
create a consumer widget in here as you
can see in here with its own builder
then if I do something in here like this
changes to this filter with will not
rebuild this widget okay so that's
that's what we're gonna do in here the
list is going to be inside own consumer
and then in here we're going to look for
the current filter so we're going to say
final filter is ref watch
and we're going to say the favorite
status provider so if we want to know
what uh what you've chosen in here if
it's all favorite or not favorite okay
you can see now our filter is a favorite
status okay so let's switch to the
filter filter as you can see in here and
then I'm going to get help from Visual
Studio code to add all the cases okay if
it's the case of all then I'm just going
to return return films list
uh films widgets did we call it films
widget maybe we should call it films
list
yeah let's call it films list uh films
list as you can see in here okay so I'm
going to say return a films list okay
and
um
let's say it's provider is
um all films provider okay because this
the case of all we pass the allphones
provider to the films list that's how it
should be okay and then we say if you're
working with favorites then I'm just
going to copy this code if you want to
only see favorited films your provider
should be favorites films provider okay
and if you're working with not favorite
films then your provider should be not
favorite
films provided just like that okay so
I'm gonna save this and see if it can go
back to our application
right here okay I'm gonna hot restart
the application
like this and now let's see if it works
if I go to all I can see everything if I
go to favorite I don't see anything not
favorite I see all of the phones in here
of course if I go ahead and favorite any
of these films you can see at the moment
we're on not favorite if I favorite any
of these they disappear immediately from
that list so favorite favorite favorite
and then I can go to the favorite list I
can see all of them in here and if I
remove the favorite they disappear from
this list as well so all I can see in
here and you can just favorite and
remove the favorite from any of these
items as well
so I would say this application is
actually now working exactly as it
should and as we intended it to work
from the beginning so you saw quite a
lot of things happening in this
application and you saw your simple
providers that are watching another
provider you saw also a state Notifier
provider and you saw a state provider
and which were changing its state from
the UI manually and also we saw a state
Notifier which is the core of our
state's Notifier provider so this was
this was actually quite a long example
and but if you look at the code it's not
so much code to be honest with you it's
just 250 lines of code and the loss of
those lines were auto-generated for us
anyway so and many of those lines are
also these hard-coded hard-coded films
so I hope that you enjoyed this example
because for me actually this example is
very important because this is the
turning point in this course after this
example we're going to go ahead and
create the main application that we
wanted create from the beginning of this
course which is that insta Instagram
clone so this example is going to be the
last example of this course and the next
one is going to be a full-fledged
application that works with provider now
I want to tell you that this next
application this Instagram clone is
going to be a huge application we're
gonna create an entire app together it's
going to be really fun but it's also
going to be quite a long one so if you
want to go ahead and grab a cup of
coffee or a tea or whatever you want to
do and go ahead and do that before we
get started with the next example and I
hope to see you there
wow that was really good we're done with
the examples that we wanted to create in
this course now it's time to actually
get into creating the real app that we
wanted to eventually get into creating
and that is this uh Instagram clone and
which is uh basically the core of this
whole whole course but it's taken up to
this point to get to it
now I wanted to start this um particular
example by showing you how this
application actually works it's very
similar to Instagram it doesn't have all
the features of Instagram but it has the
core features of allowing to allowing
you to log in with different social
media
um such as Facebook or social logins I
mean such as Facebook and also allowing
you to log in with Google as well it
allows you to for instance um tap on any
of these links to create an account on
those uh social platforms such as
Facebook or if you want to go to Google
as well you can do that so it sends you
to the sign up for immediately
you can see we've just called it instant
gram just as a little bit of a playful
uh turn on Instagram so it doesn't have
the exact same name
um and I'm not sure if you can actually
upload such an application to App Stores
but you may be able to if you just call
it something else perhaps
um and also
um actually yeah you will definitely be
able to upload this application to
various app stores if you change the
name only so this should be fine so I
wanted to show you how this application
really works so let's go and have a look
at how it actually really works so and
I'm going to press and you can see in
here I have two simulators it doesn't
have to be the audio simulator it can be
the emulator or you can run it basically
on two different applications and the
reason I'm running into two different
simulators is to log in with two
different platforms and basically test
how these two applications interact with
each other because as you'll soon see
there is a specific area in this
application where you can see all the
photos and videos that have been
uploaded to the system by any user so
it's nice to have two different users
logged into two different accounts into
the app so that you so that it can
basically interact with each other okay
so let's go ahead on the left hand side
as you can see there are two different
simulators and one is an iPhone 14 Pro
the other one is 14 pro Max I've zoomed
into them at different levels like if I
go to their default zoom level the
iPhone 14 pro Max is a little bit bigger
than the iPhone 14 pro as you'd expect
but I just wanted them to be as big as
the screen allows them to be so I just
basically went here and dragged the
iPhone 14 pro screen to be as big as it
fits into the screen you can see in here
and the iPhone 14 pro can also be become
a little bit bigger and that is the
reason that they're at different levels
so the iPhone 14 pro status sorry the
nav bar stops here the iPhone 14 sorry
the iPhone 14 pro Max's nap are stops
here whereas iPhone 14 pros and have
more steps here simply because the
iPhone 14 pro has been zoomed into more
than the iPhone 14 pro Max as you'd
expected okay so that's why they're
looking a little bit different on these
on this particular external screen that
I have okay
so let's go ahead on the left hand side
and I'll log into an account so I'm just
going to try it with Facebook in here so
let it log in okay and you can see now
I'm logged into my account on the left
hand side now on the right hand side I'm
going to use Google to sign in and I'm
going to use my account in here
and log in with that account now you can
see every user gets their own home
screen so this is denoted by the little
profile or the person icon in here to
display that this is your personal
content now this user has uploaded just
one photo and this person has uploaded
two photos
both users have apps and they all have
access or not just both users but all
users to this application have access to
this home icon and this home by pressing
this home icon they can see all photos
and videos that have been uploaded by
all users in the system so this user can
also go here and see all the photos and
videos that happen uploaded now you can
see in here that you also have three
buttons on top of the screen and um
maybe before we go there we can also
have a look at the search view so you
can go into the search view you can see
we have a little Lottie animation in
here and a little text in here saying
that you haven't really searched for
anything yet you can start typing
something in here to see what content
shows up like a h
um and we'll soon see actually how the
search is working it looks for
description and text inside any of these
images or videos that have been uploaded
to the system okay so that's how search
also works in our application now we
have three buttons on top in here one is
for uploading videos the other one is
for uploading photos and the third one
is for logging out so if I press the
logout you can see we get a dialogue log
logging out just logs the user out of
the system I can log easily back in
using any of these options all right so
this user is logged back in and I can
upload a video there is no video at the
moment on this iOS simulator so I can't
upload a video you and I can just press
the upload photo in order to upload a
new photo to the system and we'll we'll
test those soon actually
so that's for the uploading part also
then when you go into any photo you can
tap on any photo in order to get that
complete or actually it could be any
video as well it doesn't necessarily
have to be a photo you get that content
you get a like button comments button
and also you see some previous comments
that have been populated on this photo
from before so this is you can see this
particular post is posted by me and I
I'm allowed to delete this post or share
it and this user can also go in here and
find the same exact post but he cannot
delete it because he doesn't own it
however he's posted something very
similar himself which he has access to
delete so let's go into the same content
as you can see they're displaying the
exact same content both of them now this
user is going to go into his own photo
and like it okay now you can see the
other users screen got updated by saying
one person lied to this now if this user
also likes this photo you see both these
screens are updated to say two people
like this unlike unlike and then you can
see that both screens are updated so
this is real time updating between these
two devices without us really having to
do any socket IO management we're just
using Firebase in this application I'll
show you all the details about that now
this user has access to delete this
content as well we're not going to do
that but it's very simple to do is just
delete a dialog appears you press the
delete button and the content gets
deleted okay now apart from pressing the
heart button in order to like or unlike
a photo you can also go into comments
for that particular photo so we go in
here sorry this was basically not a
comment this was the title for this post
so there are no comments posted at the
moment we go into the common screen you
can see both uh simulators are saying
that yeah there is no common person in
here the owner of this post can say
hello world
hello world okay just like that and post
the comment you can then see both
screens have been updated with that
comment the user who posts a comment can
delete that comment as well so just like
that and then both screens are updated
and this person can say hello world one
and post it and then from another screen
we say Hello World 2 and post it
you can see the hello world 1 is
deletable by this user because he or she
posted that and the second comments
which is Hello World 2 is deletable by
the second user on the right hand side
and only he or she can delete that so we
can go ahead and test the delete comment
feature as well you can see that comment
is deleted we can delete this comment as
well okay but we can actually post again
these comments hello world one and then
hello world 2. a hello world two and
then maybe three and four hello world
three and then hello world four
from the other device okay hello world
four and then if we go back to the post
you can see the post always displays the
last three comments on any post and if
you want to read more comments you can
always go ahead and press the comment
button in order to see all the comments
on that post now these posts have their
own comment buckets so if I go into this
post I can see all the comments but if
this user goes into another post of
course those comments are not available
on this post because they're basically
hooked into a specific
posts so to say
so this is the type of application that
we're gonna develop in um in this video
this is a huge application it might not
look like it but it has a lot of
features for instance if I go in here
and if I delete this post so this user
is looking at the home screen seeing his
two posts and also the left user's posts
as well which is right here you see if
this user deletes his own post this
screen is going to get updated as well
and his screen is just going to say you
don't have any posts with a little bit
of a Lottie animation in here as well so
if they're both looking at the home
screen this user goes in here and
deletes this post
that post disappears from this user's
screen as well and goes in here and
deletes this post as well and both
screens are now going to say that there
is no content to display so there are
some nice animations happening there are
social login there's video uploading
photo uploading and also uh commenting
and liking of course so let's have a
look at the last bit of this part of the
video let's have a look at uploading
content so I'm just going to upload this
particular image as you can see in here
it appears here and allows me to
um allows me to write a comment about it
so a nice photo I took last year okay
and every photo posting has or every uh
media posting has the ability to um uh
it allows the user to basically define
whether people can comment and like that
photo so if this user says that liking
is not allowed on this photo and then
posts it there we go it's loading now
that photo is posted now you can go in
here now you see that there is no like
button that appears on the screen simply
because this user hasn't allowed anyone
to like this photo now if the other user
goes to the home screen they see that
post they can go in here and they're not
allowed to like it either now let's make
another post and in this one we say my
other post and in this one we disallow
comments and we post it there we go
now this is going to load and the
content is going to appear here you can
see that this user is allowed to like
this post but is not allowed to comment
on it and same for this use or so every
post is allowed to have comments and
likes and and the person who posts that
content is allowed to
um say whether those contents are
allowed whether liking is allowed and
comments or a lot so this is just a
simple overview of the application that
we're going to develop in this course
and it's all going to be based on
riverpod of course and
um we will we can just basically get
started with it I and one thing I just
wanted to mention is that
um this since this is a huge application
that we're developing and it also
requires social logging with Google and
also Facebook there are lots of moving
parts that I can't control such as like
uh Facebook's application creation
because we have to create an application
for this app on Facebook so we actually
have to create an app for it so that we
can connect it to that app and allow
social logging with Facebook through
um through our application in order to
do that we have to create the Facebook
app application and those parts are
outside my control they need to be done
on Facebook's website we're going to go
through all of those but
I've done that myself already but since
I've done it it may have changed as well
the process so it's going to be a little
bit of an experimentation phase as well
in the beginning to get everything up
and running so we may run into lots of
issues in order to get these things
working but don't worry about it we'll
solve those I'll try to cut the bits and
pieces of the video that are not
relevant and just show you the relevant
content where we get things working
basically so without further Ado let's
just jump right into it
I'm really glad that we've had a look at
how this application should look like so
everyone gets a good understanding of
the different components that are
required in order to bring this
applications code together
two of those components actually three
of those components are Firebase for
storing all the data photos we have
Firebase storage that stores the photos
and videos and we also have Firebase
data databases that allow us to store
all the data such as the comments and
the descriptions and details and also
the likes and this and removing likes
for instance so we have Firebase as one
of the components and we have also
Google login and we also have Facebook
login that we have to set up for our
project now
these parts of the project are the most
volatile to set up in that there are and
there are very like very much moving and
alive every day in everyday Facebook can
change the way that they do social login
for instance and then update the SDK or
update the code that is required to work
with that SDK so we need to be a little
bit Vigilant here and understand that
the instructions that I provide to you
in here may change from time to time in
that Facebook or Google may change their
the way their sdks work with Firebase
for instance so the core of the concepts
are going to be the same however the
implementation May differ a little bit
so
um as long as you follow along with this
course I think you should be good to go
in order to set up these sdks at home as
well so without further Ado let's go
ahead and set up our project first so
I'm going to bring up a terminal window
exactly at the same location as before
that basically we have all our other
examples in here you can say example one
through to six so let's go ahead and
create our project so I'm going to say
fluster create Instagram
clone van dot or actually let's say
Instagram clone course
um now that actually before we specify
the name for our project it is quite
important to understand that the name of
the project for you can just be anything
anything you want it to be however when
we then go and create the Firebase
application for our for our um flutter
app then that's a name that we create on
Firebase needs to be globally unique so
it does help if we already go ahead and
create a very unique name for our
fluster application as well so that the
application's name on Firebase matches
our flutter application name it doesn't
necessarily have to be like that but if
you want to go ahead and do that as well
and come up with a completely unique
name that is you think is also available
on Firebase go ahead and do that now but
for now I'm just going to say fluster
create Instagram clone course okay and
then I usually specify the organization
as well and this is and the reason
behind it is that specifying the
organization name from the beginning
using flutter create is so much easier
than having to go through all your
different platforms later and changing
the bundle identifier for iOS
application ID for Android etc etc so if
you have a reverse domain name for your
organization it's so much better to set
it up right now using the dash dash org
argument to the flutter create command
in terminal so I'm going to go ahead and
do that now so this is going to create
my application
which is called Instagram clone course
and I'm gonna CD into that Instagram
clone of course okay that's really good
now the next step that we have to take
is to set up a Firebase for our project
so in setting up Firebase for our
project is going to be quite a long
process actually and you have to have
the Firebase CLI installed in your
computer but don't worry about it I'm
gonna help you go through all those
steps so the first thing that we have to
do is to open up a web page and let's go
in here and say setting up
setting up
Firebase iOS okay and then if you say
setting up Firebase iOS you will end up
at this place it says add Firebase to
your Apple project and then you can just
tap on there and in here you can see it
says add Firebase to your Apple project
and I think to be honest with you what
we could do is just to say adding
Firebase to flutter so let's say setting
up Firebase flutter
like that and then we will go into this
link that says add Firebase to your
flutter app which is a lot more relevant
to us in this case okay so you can see a
huge web page in here with lots of
instructions on what to do and we're
going to start with step one in here
that says that if you haven't already
installed the Firebase CLI now I already
have the Firebase CLI install on my
computer and I know that because if I
say Firebase or if I say which Firebase
I can see that it is available here
locally to this current user
as the Firebase executable basically so
you may not have that and if you don't
have the Firebase CLI you need to go
into this link and follow the
instructions in order to install the
Firebase CLI I know from some of uh some
of my pupils that have mentioned in our
Discord channel that or the Discord
server that they have problems
installing
um Firebase CLI on Windows particularly
and a hint is that to install Firebase
CLI on Windows using npm which is a node
package manager and if you use if you
install node on your computer and then
use the npm command that comes with node
in order to install the Firebase CLI
that's just so much easier okay
now after doing that we need to ensure
that we're logged into Firebase and I
and I know already that I have already
logged into Firebase before using my
company's user and if you haven't done
that please issue this command in the
terminal Firebase login in order to log
in with your user then we need to copy
this command in order to activate the
flots of fire as CLI in terminal and
I can see that when well for me it may
take a little bit longer for you if you
haven't done this command in a long time
and so dark pop Global activate and then
flutterfire CLI okay
after doing that we need to go ahead and
set up our flutter fire or our flood
servers applique flutter applications uh
Firebase instance so let's issue this
command in the terminal
and and then in here I'm just going to
go ahead and say create a new project
okay so please go ahead and do that too
so it says give it excuse me it says
give it an ID and in here you need to
ensure that you're giving it a very
unique ID so that no no one else has
taken this name from from before so
let's say
what should we actually call it I I
think maybe we should or I'm gonna I'm
gonna call my project at least I'm gonna
say Instagram clone course found out or
something like that
so let's go ahead and say Instagram
clone course uh van Dot N remember the
name of your
uh Firebase application cannot contain
underscores so
um the name of your flutter application
can't include dashes but the name of
your Firebase application cannot include
underscores so that's why we've named
our flutter applications and with a
underscores Instagram clone course with
underscores in between but for the
Firebase name we cannot specify
underscores we have to say dashes so
this is a unique name which I'm pretty
sure no one else in the world has taken
because it includes my name at the at
the end of it but for you you need to
ensure that you specify a unique name
for you and as soon as you take that
name no one else can reserve that name
for themselves so let's just
um let's just take a chance on this one
and see if anyone else has taken this
so it is doing some work in here
I'm not really sure how this is going
it is really taking its time so
I'm just gonna let it do its work and
maybe soon it will be finished so let's
see
actually yeah it just finished so I
didn't actually have to do any editing
on the video to pause so now we're
getting this commanding here sorry this
prompting here saying whether we want to
include Mac OS and web but I'm going to
remove Mac OS with the space key in here
and just create an IOS and Android
project we don't need to test this on
Mac OS right now so we're just going to
focus on IOS and Android and I'm going
to press the enter key
and let's see what happens then
um whether it's going to be successful
at this step as well or not
so it says registered uh
new Firebase IOS app I don't know why it
has to say it so many times it could
just say it once and I would get it
and it says registered a new Firebase
IOS app blah blah okay it says the files
Android build Gradle and Android Bill
Android app build Gradle will be updated
to apply Firebase configuration on uh
and Gradle build plugins do you want to
continue of course yes
okay so it seems like now we set up our
Firebase project basically and then it
says that you have to go ahead and
initialize Firebase in your application
so from your philosopher procedure run
the following command to ensure that
your flutter's have Firebase configure
is just up to date and we've already
done that so we know that that works
okay so let's go ahead then and say
flutter pop add Firebase core so let's
paste that in here which adds the
Firebase core plugin to our filter
application okay so that also went
successfully
we don't have to do the flutter fire
configure because we just did that I
actually find this a little bit strange
that this command is provided right here
though we've just done that before so
um I don't know why they've written this
in here and maybe it's just a call like
a caution to say that you need to ensure
that you've done this before you
continue but we've already done that
before we don't have to do it again so
let's go ahead and open our project now
in
um in Visual Studio code but perhaps
before doing that we need to ensure that
our project has a git repository now I
don't mean that you need to go ahead and
create a GitHub repository I just mean
that even if it's a local gith
repository it should it should suffice
and the reason behind that is that Azure
coding you may may you may make mistakes
and I may mix and I may make mistakes it
was quite a difficult sentence to
actually say there were so many m words
in there and and what we're gonna go
ahead and do then is as were as we're
developing our application we're gonna
add bits and pieces to the code and
commit those changes and if anything
goes wrong then we can reset the changes
and go back to the last commit that
actually worked so even if you're doing
something locally on your computer I
highly suggest that you create a git
repository for it so that you can commit
your chances and get to the habit of
committing your changes often instead of
committing and pushing the last moment
so let's go ahead and say get in its
dots in here
and it says it initialized a git
repository and let's just say git add
all and then I'm going to say git
commits and let's just say in here first
step okay so now if you say git log you
can see that first step is the first uh
commit basically on our project okay now
that we've done that let's go ahead and
open our uh our uh repository or our
code in Visual Studio code and then I'm
going to go to a workspace setting and
the first thing I'm going to do I'm
going to say zoom level is five so
everyone can see the screen a lot better
and let's make sure that uh yeah
everything's fine in here let's just go
to the main Dart file then main Dart in
here and as you can see the instructions
provided in the web browser in here it
says that you need to ensure that you're
importing these to files in here so I'm
going to copy those and bring them into
our app right here okay
and let's get rid of the primary sidebar
good stuff all right now that that is
done we need to go to the next step and
that is ensuring that our main Dart file
includes this code as well so let's go
in here and paste it in here and we need
to also ensure that our main function is
an asynchronous function all right and
it says rebuild your flutter application
and do flutter run that's completely
fine so let's go in here and then say
first that we want to select the device
iPhone 14 pro let's just say okay
and then I'm going to bring up the
outputs in here then we're just going to
run our application and this running to
be honest with you could take some time
if you're on a Macintosh this first run
especially with Firebase installed in
our application could take some time
because Firebase and that has been added
to our application brings with it some
other libraries as well that could take
some time to compile and link to our
main application it could defer also
from IOS and Android so if you're at
home watching this course with Linux or
Windows the compilation could be a bit
shorter or maybe even longer actually
I'm not sure how it's going to work with
Gradle to be honest with you on a Linux
machine because I haven't tested this
right now on Linux but surely it works
also on Linux if you're deploying on
Android so let's just run our
application and on Mac then it's gonna
for iOS is going to be delegated to
xcode and for
um
or Android if it's Android emulator or
an Android device this task is going to
be delegated to Gradle and it could
basically take anything between a few
seconds to a few minutes as you can see
for iOS is doing Pawn install and this
initial pod install is usually a very
time consuming task and before we get
started actually let me just stop this
if you're watching this course at home
and you're on a Mac and your main target
is on iOS IO simulator and I complete
understand this may not be applicable to
many of you watching this course at home
but I need to mention it for those who
are watching this on a Mac anyways so
it's good that to that you go to your
path file for iOS okay and in this pod
file please uncomment this line and in
here let's just say that platform iOS is
what should we say perhaps we could say
platform iOS is 15 okay so we are
targeting at least iOS 15 and anything
higher than that is fine but we're not
targeting anything lower than iOS 15
okay so you need to ensure that you do
this and then let's go ahead to terminal
and then we're going to say flutter
clean okay so that the build folder is
clean
and then we're going to say flutter pop
get so our dependencies are installed
afresh
good the errors are going to go away
then we're going to go as and say run
without debugging let's see how it goes
this time so this is going to delegate
it to uh I'm just going to go ahead and
do the Pod install again of course
because we did a clean just now as you
can see and then it's going to go ahead
and try to run our applications so let's
give it some time and see how this
process goes I I know from experience
that this Pro sketch I take quite a long
time so let's just wait for it until
it's done
okay really good stuff I didn't actually
have to wait so long so let's close the
widget inspector and I'm going to bring
up my iOS simulator in here which I can
see is the iPhone 14 pro right now and
uh what we could do is to change this so
that it doesn't have this very very
bright screen we could go ahead and say
that our application is actually using
dark mode so let's remove
pretty much everything in here
and I'm going to add a scaffold
application in here so I'm going to
remove pretty much maybe keep the main
file and then I'm going to say FSA which
is a flat flutter scaffold application
and I've already explained this before
where I get that from there's a video on
my YouTube channel which you can go and
watch on how to create this FSA code
snippet in your Visual Studio code as
well so I'm going to remove that code
and we have the main function in there
and then we have our app and then we
have our home page and then I can remove
the rest of the code that was written
for us so let's see
my app and let's just remove everything
else that was in here which was that
counter application with the
um with the floating action action
button so it says my app in here I'm
going to say app and let's go into our
application in here and enable Dark
theme so let's say theme is theme data
dark and then also Dark theme is theme
data.dark okay so this should make our
application go into a dark theme so
there we go iPhone 14 pro
uh Dark theme
is are we getting any errors in here yes
perhaps actually yes on handle accession
binding has not yet been initialized in
saskara on the service binding binding
is done by calling so let me do that and
let's restart the application
I can see we're still getting that error
async uh
and to me this looks fine
current platform
and that's that's pretty much the code
that we have to write I believe in here
add Firebase plugins and that's not
necessary so let's see actually what is
happening in here it says typically this
is done by calling widgets flutter
binding ensure initialize so let's let's
just take this code right here okay
so we paste it right before Ron app
like that and then we restart our
application completely and let's see
typically this is done by calling
perhaps this has to be done before
Firebase so let's put it in there
okay and restart our application and
this time we're not getting any errors
and but the screen is still white and we
need to we really need to fix that
because even though we've specified the
theme to be dark it's still really not
taking effect so what this could be is
because we need to go to our theme mode
okay and our theme mode we could say
dark
and also we may need to go our Dark
theme in here actually the theme we
could say theme data
and we could say uh let's create a theme
data in here actually for our theme and
let's say brightness is brightness dot
dark okay
and let's go ahead and say the primary
Swatch is blue so primary Swatch is uh
colors.blue all right and then that's
that's our theme and then let's say dark
theme we bring it up here
um we say we actually have to configure
some colors perhaps that are going to
fit our application so let's say theme
data
and let's say brightness and brightness
is going to be of course dark as we saw
before okay
and for the primary Swatch
in here let's say colors blue gray okay
and then we say indicator color also as
colors blue gray blue gray like that so
we have the theme data we have the theme
setup and then the theme mode is dark
let's just restart our application and
see uh
I wonder if you're actually running this
application on the wrong device or
something I'm just going to stop this
app and run it again and see
what happens because we've changed
pretty much everything that was required
in order to make our application run in
dark mode but still nothing has happened
so let's see if you completely restart
the application whether things are going
to be changed or not so I'm just going
to let it do its work I can see our home
page is there and our app is here and
this all looks fine to me so let's see
if things change now things are working
a lot better and we have our dark
applications so you can make these
modifications as well and these are just
some basic colors to be honest with you
we're not going to go into how flotter
works this course isn't about flutter
development really it's about State
Management with riverpot so there's
documentations about how you can set up
dark mode for your application but these
colors are colors that I've chosen for
this particular application and for
instance this indicator color that you
can see in here is going to be this
beautiful color that we have in here do
you see this so if I move the tabs that
is the color that we've chosen in here
the indicator color okay and then we
have the primary Swatch as well which
you will see in different places inside
our app as I'll show you later so these
are basically the first steps that we've
taken now so we've Now set up a Firebase
for our application so that was the
first step that we had to go through
in order to get started basically with
our application fantastic now that that
part of the setup for our application is
done let's go ahead and set up our
dependencies now this one's going to be
a doozy this is this is a very boring
part of the application creation I
completely understand it but we have
quite a lot of dependencies and we for
instance are going to depend on Lottie
we're going to depend on Firebase we're
going to depend on uuid hooks River pod
fonts awesome and we're going to depend
on flutter Facebook auth we're going to
depend on a lot of plugins it's almost
20 of them plugins and um actually
libraries so let's just let's just go
ahead and add all those dependencies to
our application before we continue
because it's always easier to have all
the dependencies ready in our
application than having to do flutter
pop at later and to be honest with you
the reason behind this is that these
dependencies can come at any time during
the installation of the application so
it is usually A disruption to how you
develop your application if you have to
install a lot of dependencies and um or
maybe even one dependency like for
instance you're developing a new feature
then you have to add a dependency and
all this and you have to recompile your
entire application so it's an
interruption and I would say actually
it's a disruption also to my flow at
least so and when I'm developing I just
want to have all the dependencies ready
if I know from the beginning which ones
there are going to be for instance
Lottie for animations so this part is
going to be a little bit boring I
understand but let's go ahead and add
all the dependent disease and we don't
have to deal with this later so let's go
and you can use fire sorry you can use
Visual Studio code to do that so you can
say flutter add and let's see dependency
flutter dependency I think depending
install or something flutter
um let's see what what commands we have
clean Focus generate get packages hot
a new project open blah blah
uh
uh I actually don't know which command
it is in Visual Studio code toggle slow
blah blah Pub
add perhaps or dependent Pub
get packages upgrade packages but I
don't have that particular command I
know that there is a command which you
could Visual Studio code that you can
use in order to install packages but
I don't seem to have that command or I
don't know what that command actually is
because usually I do that through
terminal but for those of you who are
watching this course if you and know
what that command is Visual Studio go
ahead and add your dependencies using
that instead maybe it's easier for you
so I'm just going to say flots for pop
add and before we do that let's go to
our pop spec yaml file and see and which
dependencies have already been added by
us and we can see that the only
dependency is Firebase core so we don't
have to add that again but let's go
ahead and add all the other dependencies
so I'm just going to copy this command
because we're going to use it quite a
lot of times and let's say Firebase off
because we need that for authentication
um with the social authentication as a
social logins okay
the other one is going to be Firebase
storage so I'm going to say Firebase
storage and we need Firebase storage in
order to store our photos and videos
that the users upload to the system then
we need cloud firestore and this is in
order to install a to add sorry to store
all the likes and when people dislike
something or actually remove their likes
I mean or people comment on something
and also make posts the information
about posts are going to be stored in
cloud firestore and the post content
such as the videos and the files
themselves are going to be installed in
Firebase storage okay we also need uuid
in order to uniquely identify it for
instance posts posts and comments and
likes okay then we need Hooks riverpot
and that is what that goes without
saying that we need hooks River path for
this project okay and we need font
awesome flutter and and maybe you
haven't used this before but font
awesome flutter is a plugin that you can
use in order to bring some special
um basically a special fonts into your
application which we use in here as you
can see this Facebook icon and this
Google icon they they come from font
awesome okay so that's what we need font
awesome flutter installed in our
application
now we also need a flutter Facebook off
so let's say flutter Facebook off and
that goes without saying as well that
that is because we need to allow the
user to log into our application with
Facebook login token we also need Google
sign in and sign in okay and that also
goes without saying because we need the
logging in or authentication with Google
as well we have this image picker in our
application so if I bring up our app in
here and let's see if I can log in with
I think Google in here perhaps
uh if you remember when you wanted to
upload something we have this dialogue
that opens up in here so for that
dialogue we need a special plugin so
let's go ahead and add that plugin in
here so I'm going to say flutter pop add
and we have image picker okay
and this image picker
its name says Image Maker but it also
allows you of course to add a video
picking to our application as well and
we have that in the UI if you remember
if you just tap this icon then the video
picker is going to disappear which only
displays videos and since there's no
videos at the moment in this audio
simulator there's no content displayed
in here but I'll show you later how to
add videos to your iOS simulator as well
so that's not a problem so we have the
image picker now let's go ahead and add
the image Library as well and we need
the image library in order to actually
manipulate images in our application
because when a user uploads an image
to our platform we generate a thumbnail
out of that so and that thumbnail will
then be also uploaded to our Firebase
instance or Firebase storage and also
into Firebase
um Cloud as well or the cloud firestore
so these uh basically the thumbnail will
be stored in one place but its reference
will also be inside cloud firestore and
the reason behind it is that we don't
want to display full images and when the
user is looking at this view or this
view
excuse me we just display thumbnails and
as you can see actually the quality is a
little bit lower and the reason is
because we generated a thumbnail out of
the full image we don't want to take too
much resources basically and that's what
we need this image
package for okay so since we're using a
Hook's riverpod
package we also need to actually install
flutter hooks as well because we need
hooks as well but you may be saying well
Hook's rubber pot should have flutter
Hooks and River pop but I mean it does
but you you still need to manually
install flutter hooks if you want to use
hooks as part of Hook's River pod I hope
it makes sense hooks riverpot is
dependent on flutter hooks you don't
have to bring in flutter hooks unless
you actually want to use the hooks part
of hooks riverpod I know it may be a
little bit complicated but just for now
go ahead and install that so let's say
flutter hooks
and you'll get this more as we go on so
we have now flutter hooks let's go ahead
and add collection as well collection is
another package that we need and the
reason behind it is that later we're
going to do some equality between either
volts and we want this equality to be
index independent so uh an eye trouble
of one two three is then going to be
considered equal to three one two
because it contains the same elements
okay and that's what we need this
collection package for now we also need
a intl and that's for
internationalization and that is because
we are going to have date formatting in
our application so if you tap on a on a
post you can see that we're formatting a
date displayed in here and for that we
need intl package so let's then go ahead
and say flutter pop add video thumbnail
as well so and that is because when a
user uploads a video to our system we
need to generate a thumbnail for that
video using the image package we could
generate a thumbnail for our photos but
we also need a package for actually
grabbing a thumbnail out of a video and
this package is going to help us with
that we also have video player in our
application so let's just say add video
player plugin to our application
we haven't seen the video parts of the
app yet but I can demonstrate that soon
to you but in order to have a video
player and app we need to have this
library or this package installed okay
so we're almost done we just have to
also add Lottie and Lottie helps us
display these animations these beautiful
animations in our application you can
see in here this is a Lottie animation
and this Lottie Library helps us do
those beautiful animations in our app if
you look at when the user goes into a
post there is a share button in here and
this share button requires a plugin not
the button itself but the action for
that share button it requires a plugin
to display the native share dialog or
the share share sheet in any in like
Android iOS or if you're also targeting
Mac OS Etc it brings up the native share
dialog in those platforms so let's go
ahead and say we want to add share plus
underscore plus which is name of the
package and last but not least we also
need a URL launcher okay and your
launcher is used in these cases that
when you're logged out and you see this
beautiful login page you may tap on
Facebook or Google and tapping on any of
these it basically sends you to the
registration page for those websites so
this opens a new page or URL and for
that we need URL launcher package and a
launcher as you can see in here
okay so if you then look at your pops
back yaml you should have all these
plugins and packages added to your
application and I know it is really
boring but these are very very important
to the creation of our app so after
you've done this what I suggest that you
do you stop the install you stop the
execution of your application the issue
flutter clear and we could flutter clean
because you really need to do a clean of
the flutter apps derived data because
yeah we've installed so many new plugins
and packages after doing that we go and
say flutterpot get
after doing the clean
and we let it do its work then we're
gonna start the application from
beginning actually no not the yaml file
but the dart file so I'm going to do and
I'm going to let it do its work this
could actually take a long time because
this brings with it so many pod files
for iOS and also so many dependencies
for Gradle for our Android apps so if
you're at home and you're doing this on
Linux and windows depending on your
computer's
um processing speed and also your
internet connection and bringing these
dependencies could take some time and
compiling all of this actually so I
don't know how long this process is
going to take on my computer but what
I'm going to do is I'm just going to let
it do its work I'm going to be quiet and
once this is done we can't continue with
our course well after a long time for
waiting actually on this process I can
see that pod installed for iOS simulator
has or for iOS platform has success has
been successful now if you're as I said
before if you're targeting Android which
I think probably most of people most of
those people watching this video are
indeed a targeting Android because you
may be on Linux or Windows and I think
the majority of people watching this
video are actually in windows and Linux
so Gradle may have done a better job of
adding all your dependencies but
cocoapods which is a third-party
dependency management for iOS that the
flutter team has decided to use could
take some time on Macintosh for those of
you who are using Macintosh to go
through this course so it did take a
long time for me it may take a long time
for you as well so now that that is done
we should then go ahead into our iOS
simulator and not this one and I can see
our application is running as expected
there is no errors or anything displayed
to the screen and and the only
difference is that now we have all the
dependencies required in order to get
started developing our actual
application
so after the dependencies are in place
what we need to do is to go ahead and
register a Facebook application you see
we have our own flutter application and
we want to allow the user to log into
our app using Facebook social login in
order to do that we have to associate
and create actually create and Associate
a Facebook application with our flutter
application okay and to do that you need
to go ahead
and create a developer account on
Facebook's website and the link for
creating a developer account is the one
that I'm showing you here and this link
may actually change in the future I'm
not sure what it is going to be in the
future but you can always go to your web
browser and say create Facebook
developer account like this and then you
should meta for developers so this is
where you should end up basically in and
then what you need to do really is just
to follow the steps that are provided on
this web page and create your developer
again we're not going to go through the
creation of a developer account because
I've already created my developer
account and it is actually hooked into
my email address and it is kind of pain
in the neck to go ahead and create
another developer account with another
email address which I probably need to
just
make up so
um if you if you haven't done that go
ahead please and go and create a
Facebook developer account which then
we're going to use in order to create
our Facebook application okay
after you've done that we should be able
to go ahead and create a new Facebook
application on the URL for creating a
new Facebook application at the time of
recording this video is the following
developers Facebook apps create so if
you don't want to just paste paste that
you can go to developer.facebook or
developers.facebook.com and then you can
go into my apps in here and from here
then you can create a new application
now you can see I've created an image
sharing van dot which is my app which is
hooked to this particular application
which we've already demonstrated but
what we're going to do is to go ahead
and create a completely new Facebook
application now together and then hook
it to our flutter application so let's
go ahead in here and say create app and
again these steps are very very volatile
meaning that they can change the UI for
Facebook's developer developers portal
could change so I'm just showing you the
concepts of of what you need to do at
the time of recording this video and but
they may be modified later by Facebook
so let's see in here what we have what
type of app we have let's just say that
we're creating a consumer application
that allows Facebook login okay so let's
just press the next button in here and
what we're going to say in here is that
our application in this case is called
Instagram clone course okay so I'm just
going to say insta I think actually we
can't use the name Instagram inside a
Facebook application so let's say
um
image sharing course or something like
that
and I'm going to say that the contact
person is me and then the business
account there is no business account
really for this application okay so
let's see it's going to ask for my
password I'm just gonna see if I can
populate this field and then press
submit in here
and let's see if it can come out
successful from there really good okay
so now that we've created an application
uh what we need to do is to basically
have a look at our settings in here and
basic
let's have a look at our basic settings
in here I can see the app ID and also
the app secret and these are the things
that we need to go ahead and then feed
into our Firebase project okay so let's
keep our um
our window open right here and then
let's go to
console.firebase.com and the application
that I just created in here I think it
was called Instagram
clone correspondent so go ahead to your
console firebase.google.com Instagram
clone course founded click on that and
then we're going to go in here and
actually enable uh Facebook login and
let's just see how that goes I don't
have all the steps in my head to be
honest with you these steps change from
time to time well we're just going to go
ahead and make the best of it so let's
go into settings and then project
settings and let's see we have
Integrations perhaps
and see if it is a part of the
Integrations or if it is service
accounts or general isn't any of those
perhaps let's see what we have in here
so we want to basically enable
um
social login with our uh with Firebase
so let's see what we have Integrations
add my Google ads it's none of these
really
um extensions is not there
add app blah blah to apps
authentication yeah that's what we want
so let's go into authentication here's
project shortcuts and then we say get
started
um and again it's there's really no
point in me explaining exactly where to
find authentication because these things
move a lot so it's basically that you
need to find authentication in your
Firebase consoles in your Firebase
projects console okay so in here and
then I'm going to say I want a provider
for Facebook and you can see in here it
says okay give me the app ID and give me
the app secret okay so let's go ahead
and enable this and then I'm going to go
ahead and bring the app ID
let's go ahead and say app ID and app
secret it's completely fine that you're
seeing the app secret as well because
before I release this course I'm going
to delete this application from Facebook
so
um even if you want to play around with
this you're more than welcome to but I
unfortunately I don't think the
integration will work because I will
have deleted this application by the
time this course is actually released so
let's go ahead and copy the app ID and
then I'm going to go and copy the app
secret from here okay
and let's just bring it right there now
uh now we can press the save button okay
now we can see uh Facebook's login is
enabled and in here it says to complete
setup add this oauth redirect URI to
your Facebook app configuration and then
we say learn more it says Firebase blah
blah and then we go ahead with these and
let's see Google sign in with apple
Facebook iOS
uh there's lots of documentation in here
and I'm not really sure where we
actually have to paste that URL at the
moment but I'm sure that will figure it
out okay
so we've now uh we can go ahead actually
and enable
um Facebook login uh to our to our
Facebook app as well so let's let's go
in here actually see how the login stuff
works
to um
verification business verification data
protection we didn't make any changes
there so and we can go to Advanced and
see how that looks like
app restrictions age or so Security
app page domain manager share remove app
we're not going to do that and let's go
to dashboard and see if there's anything
that we have to change in there image
sharing course okay
and then we have Facebook logging here
and that's that's pretty much what we
have to set up in our Facebook
application now so let's press setup and
again if this part of the video is
looking a little bit like like me
improvising it truly is because I've
already gone through these
um before but these things change from
time to time and I can't have all the
steps always ready in my head so I am
improvising I do know the general steps
that I have to take but we're going
through this journey kind of together so
I apologize if this feels a little bit
more like improvising to you but the
reality is that it almost half of it is
improvising I know the steps but they do
from time to time so let's go ahead in
here and say that we want to add
Facebook login to our iOS application
okay
so you need to ensure that you stay on
this page and then I'm just going to
right click actually let's see if you
can
no okay it was just a part of this page
so IOS and Android yeah you don't have
to do anything special so let's just
type click on iOS and then we're gonna
set up the Android stuff later okay it
says to make sure your apps compatible
with iOS 11 be sure to use the latest
Facebook SDK that's fine okay
and in here we're using uh cocoapods
let's see in other no yeah we're using
cocoapods so let's say let's say that
we're using cocoapods you don't have to
do any of these because uh flutter will
have already done this for you that's
what the Pod installation was all about
so and just choose cocoapods from here
and then press the next button
okay now it says give us your bundle
identifier and the bundle identifier you
can actually find it from your uh info
plots so let's go to visual studio code
and I'm going to say info plist iOS
Runner okay let's say bundle identifier
and it's a CF bundle info dictionary
actually not that one here this is a
product bundle identifier let's see if
you can find it in our application and
this is the product bundle identifier
okay so you will find it inside your
xcode project file which is a file
usually you don't go into excuse me but
it's actually maybe coming from here as
well for Mac OS so we can just go in
here
and copy this bundle identifier right
here okay and we go back in here into
the Facebook's website and then save
that all right so that is done and then
we press continue and now it says enable
single sign-on for your app enable
single sign for app by sending single
sign-on to yes below all right we set it
to yes
and then save and next okay now it says
configure your info PLS file with an XML
snippet that contains data about your
app that's fine and we can see in here
that is saying copy and paste the
following XML snippet into the body of
your file and inside the dict okay so
there's lots of stuff in here and says
um app ID we need to change it with our
app ID so yeah it's quite a lot of
things that we have to do now so let's
go ahead and I'm just going to copy this
code okay and I'm going to close
everything that we have opening here and
save the main file I believe yeah that's
fine save it then I'm gonna get rid of
the sidebar primary sidebar close this
one close that one at the bottom and
let's go ahead and say open info PLS in
iOS Runner so this is for those of you
who are saying application up for iOS so
let's go within this dict in here and
then I'm gonna paste all the code that
was provided by Facebook so let's go in
here okay so we have all of this set up
right there and we have to actually
change them so it says in Array string
in the key CF bundle URL schemes replace
app ID with your app ID okay so they
mean this one this app ID needs to be
changed with our app ID so let's copy
the app ID from here and then we just
paste it in there so it will be FB and
then your application ID okay
what do we have to do next it says in
string in the
keyfacebook app ID okay and it is right
here and we have to change the app ID
with our app ID so I'm going to copy the
app ID again go in here and change it
and right there okay then we need to go
into the clients token replace a client
token with a value found under settings
Advanced client token in your app
dashboard so I'm gonna go and find that
and it says client token so we need to
go into settings Advanced and then
client token so let's go to settings
and then let's go to Advanced
get Advanced access okay
uh not sure what all of this is there's
just so much information on the screen
okay uh and what else did I say we
should go to settings Advanced and then
clients tokens so client uh client token
settings advanced
client token right there so I'm just
gonna copy this client token okay and it
said that we need to bring it instead of
client token we need to write our client
token right here good
and then it says in string for the
display name replace app name with the
name of your app so for uh the app name
we're gonna say what do we call it image
sharing course so image sharing course
let's just call it okay
so after that is done it says to use any
of the Facebook dialogues example login
that can perform apps switch to Facebook
your app's info PLS also needs to
include the following so let's just copy
this code and I'm going to bring it at
the beginning of this and gonna
indent it a little bit and it says
in this array we could actually indent
this as well so it says application
query scheme and then messenger share
API and FB API that's completely fine
and it says your project will need to
include the keychain sharing capability
in order for logging to work in Mac
Catalyst applications and we're not
targeting Mac catalysts so we're not
targeting Mac at all so we're pretty
much done with this setup and we can
remove some of these white spaces that
are placed in there and we should be
good to go really so uh that's fine now
let's press the next button
now it says connect the app delegates
and we don't have to do any of this
because we're actually using flutter so
we don't have to do any app delete
related code to be honest with you so
let's press next in here and it says
then add the Facebook login button and
we're going to do that in code later so
we don't have to do this native Swift
Code in here either press the next
button and it says check current login
status well we don't have to do that now
and press next and it says ask for
permission and don't worry about it
we're going to do that in the flutter
code as well and we're pretty much done
with the setup of our IOS app so so iOS
is set up now the next step is to go
ahead and set up for Android and it says
download the latest Facebook SDK for
Android now we don't have to do that
because we're using Firebase and it says
go to Android Studio new project minimum
SDK and then select API 15 or higher and
create your new project blah blah blah
in your project open your app Gradle
scripts build and add the following
repository to the build script okay so
this could be actually important to set
up let's see if Firebase if flutter has
already set that up for us so we find
this build script and we can see Maven
Central has already been added here so
we don't have to add this Maven Central
and it says in your project open your
app Gradle scripts build Gradle module
app and add the following a compile
statement let's search for this and see
if fire if flutter has already added
that and I can see that it is not added
so if I delete this from here nowhere
has to spin added to our application
unfortunately so let's go into our build
Gradle file in the module app so
build.gradle here
and we need to basically
let's see if I can remove the sidebar
appearance
sidebar okay what does it says that we
have to add this implementation let's
see if that implementation has been
added somewhere else as dependencies we
go in here and then take this
implementation right here and then paste
it there okay
good stuff now that that is done build
your project add the following
statements to import the Facebook SDK
package and we don't have to do that to
be honest with you so because we're
we're using flutter so we don't have to
write some native coding here then we
press the next button okay then it says
your package name your package needs
uniquely identifies your Android app
blah blah okay you can find this in your
Android manifest where your apps build
Gradle files so let's see we are
actually in the build Gradle file right
now so let's see if you can find our
package name
uh package name
here it is that's our package name okay
so I'm just going to copy that and I'm
going to paste it right here
and it says default activity class name
this is the fully qualified class name
and for this I'm just going to go to my
other application and see what we've
already done in the other app which I've
already set up from before okay and I
was image sharing event
let's go in there and see in the
settings uh I believe we had
basic let's go in there
uh actually let's go to dashboard and
let's see if I've already changed that
from before or not looking for something
else my products Apple has Facebook
login settings good
let's go in there and let's see how
we've set up that one for Android so
settings Quick Start
I wonder if you can actually extract
that somehow from this
and we've already done all of these so
let's just see here it is so you can see
that this is the default activity class
name s e pixel the testing riverpod and
then main activity so let's just copy
this main Activity part and go into our
um code and see the activity is called
main activity in here
and the package name is sepix salty so I
believe we have to copy the package name
like this okay and go into our settings
and here that we were configuring and
then just say dots main activity so it
is your package name dots main activity
and that's what we're seeing in uh in
here I believe so that's the package
name package name dots main activity
okay that's what we've done here as well
so let's press the next button in here
and continue
now it says add your development and
release key hashes to ensure the
authentic authenticity of the
interactions between your app and
Facebook you need to supply us with the
Android key hash for a development
environment okay you will need the key
certificate to blah blah key tool from
the Java development kit so jdk to
generate
deployment key hash open a terminal
window and run the following command
okay I'm just going to copy that
um and then let's go to terminal all
right and I'm just gonna paste it right
here
let's see enter a keystore password I'm
just going to say password
okay
okay then we got a uh a key in here and
this is a horrible password by the way
please don't use this
um and then if you're and there's
instructions on how to do that on
Windows as well okay so the key hash is
this one all right so that is mentioned
right there so
uh that one's fine and I believe
actually uh
that I can continue with the other
application as well and the key hashes
were also providing here and it's
completely fine for me that you're
seeing these key hashes to be honest
with you because these applications will
have been deleted by the time this
course is out so
um so that's how you need to generate
the key hash and I'm going to press the
save button here and then press continue
and it says enable single sign-on and I
believe that in the other application
I've already enabled single sign-on so
let's just enable it okay and then press
the save button
and it says then if you if you use
version five five or later after
Facebook so you don't need to add an
activity or intent filter for Chrome
custom test this functions including the
CK create streams in your Facebook app
ID for those needed to enable Chrome
custom tabs okay
uh so maybe we actually don't have to do
all of this uh but who knows who knows
really let's let's go ahead and follow
these steps as well so it says open your
app arrest values strings XML file so
let's see if we can find that so
uh oops strings dot XML file and we
actually don't have that so now the
question is whether we should go ahead
and create this strings XML file or not
and I think since this is a step that
has literally been recommended to us
here it is best that we go ahead and
create this strings XML file and put all
these values in there we just have to be
careful where we're exactly putting
these values because from what I know we
need to actually as you can see actually
you don't have to know this one before
we need to change two XML files one is
the strings XML file and the other one
is the Android manifest in the app so
this I believe this XML file we need to
create but this XML file should already
exist in our application we should just
be able to manipulate it so let's go
ahead and have a look in here if we go
into the sidebar so if I bring the
sidebar
um I believe we can go in here and say
appearance primary status activity panel
is it the panel it is not the panel uh
it is perhaps the secondary actually it
wasn't
um which one is its status Primary
Center layout
full screen I'm like enabling everything
pretty much in here status bar and then
we have also the activity bar
uh it's right there so it was the
activity bar that I actually needed so
uh it's not obvious really so I'm going
to remove the status bar
activity bar should be there panel is
going to get removed and a secondary
sidebar can also get removed for now
okay so let's go in here in our app um
structure
and we can see we need to go into
Android and then the app folder because
it you can see it actually recommended
Here app rest values okay and we can in
here see app and
we don't have the rest values because we
have to go into into app SRC
and we're going to go into Main and in
here we have the rest because you see
this is a flutter application and the
structure is a little bit different and
we have rest okay and we need to go into
values and right here we have values you
see we have stars but we don't have
um strings XML as it is recommended
right here so let's go ahead in in
values and create a new file and say
strings okay dot XML
and the strings XML should just simply
be a series of uh resource values with
the string names and then inside them we
should have values so since we don't
have an example of something like this
already so if we look at the strings
that XML you can see that there is no
example of how it should actually be
constructed so we can go and search
Android XML values okay we can go in
here and see how that typical uh
a file should look like and you can
actually see an example of how it should
look like right right here so I'm just
going to copy this from here because it
has the resources and I'm just going to
go back there into our strings XML file
and paste it right there and remove this
bull from here okay so that's basically
what we want now we have to go ahead and
add some values in here as you can see
there are string names with values in
there so I'm going to paste them right
here and ensure that they're formatted
correctly as well okay and also we're
going to have an app name in here so I'm
just going to copy that and let's go
ahead actually see if it's suggesting
that we add the app name because you see
it's saying app name should be a string
so let's just add a string in here for
app name as well so we're going to say
app underscore name and then close that
string as well all right so for the
Facebook app ID let's go ahead and copy
our app ID right there okay
now for the protocol scheme you can see
it says FB and then one two three four
is so it is the app ID as well okay so
we're gonna place our app ID here right
after FB so ensure that you're not
deleting FB basically from your login
protocol scheme okay and then you have
to have a clients token so let's go and
see if we can find our clients token
somewhere so let's go in perhaps here
and then we go to basic settings and
open it in a new tab and see if we can
find some sort of a token in there so if
I search for a token there is no token
in there
and there is a client token right here
so it's inside the advanced settings for
your Facebook application so let's just
copy this client's token and then I'm
going to paste it right here and for the
application name what should we call it
maybe we should say Instagram
uh clone or something but I think we
actually pasted this application name
somewhere else as well inside here our
app is called image sharing course so
let's just call it image sharing course
as well okay so it doesn't this name
doesn't necessarily have to have any
dashes or anything inside it's just a
plain string basically okay so now that
we've done that we can close this
settings screen and basically we're done
with this step let's go ahead and now it
says open the app manifest Android
manifest XML file so let's do that
Android manifest is inside app Android
app SRC main okay so this is this is I
would say one of the most difficult part
of sending our application up because
this part is very uh time consuming to
do I would say okay so what do we have
in here we have
our application set up in here and then
our manifest starts there and we should
just follow the instructions that are
provided here from Step number four so
it says add the metadata elements to the
application element for your app ID and
client token so if your application is
here which for us is here you can see we
have to add these meta tags in in there
okay so let's go ahead and add these
mental Tags I'm going to go ahead and
add the meta tags at the end of this so
here our application ends you can see
there's already a meta attack okay so
let's go ahead and add the other meta
tags that are provided right here so
let's just copy these okay and then
paste them in here and I like to format
these like the other values are already
formatted so like that okay and then we
take this as well and that can have a
little space in there okay so that's one
of the meta tags that we had we had to
add and we go in here and format this as
well and bring the value to the next
line like this and then a little space
in here to ensure that it follows the
same structure as the other meta tag
that was already inside the Manifest
file
that part is done and now it says add an
activity for Facebook and an activity an
intent filter for Chrome custom tabs
inside your application elements okay so
we need to copy this code and bring it
as well inside
um
inside the application
so we have you can see in here we have
an activity already inside our
application so we're not going to change
that at all we're just going to go right
after that activity okay boom right here
and then we're going to add these uh two
activities that are provided in here so
I'm just going to copy this code it's
going to look a little bit disgusting
because it's not formatted correctly so
let's see if it can format it properly
okay so for this one we should say
that's the name it's fine Facebook
activity we don't have to change that
and let's bring this here and then the
Android label seems to be fine okay so
let's go in here and look at this
activity seems to be okay in 10 filters
and it doesn't seem like we have to
actually change anything okay so it is
fine the way it is so I'm going to
remove some white spaces from there and
we're good to go there it seems like it
so we didn't have to actually change
anything in these values all right
then it says add a user's permission
element to the Manifest after the
application element after Okay so this
shouldn't be inside the application so
let's just copy this guy and then go
right after the application element and
then paste the user's permission right
there okay so let's have that there and
then it says optional to opt out of
advertising ID permission uh add a
user's permission so if you want to opt
out then we need to copy this and place
it inside the application Level but
we're not going to do that for this
particular example so now it seems like
we're good to go so as you can see it
says build your project and this is
quite important because we need to
ensure that all these changes are
actually working I've seen I know it's
from experiences sometimes if you make a
mistake in this file then of course
Gradle isn't going to be able to build
your application so let's stop the
running of our application on i o
simulator and then here I'm just going
to say select device then let's see if
we can create a new Android emulator in
here
and that wasn't possible so that's okay
the reason for that is that I have an
Android device that I usually create or
run my applications on so what I'm gonna
do and I'm gonna pause the video go
ahead and connect that device to my
computer and then do a compilation for
for that particular device and see if it
can actually run our application on that
particular device
now that we've set up most of the things
that we needed for our application and
right before we actually run our app on
an Android device I need to mention that
we need to do a few more changes in
order to get this application actually
working and be being able to compile it
but what we could do is a since I've now
connected my Android device we could go
to select device and then choose an
Android device in here for instance and
then I'm going to bring up the terminal
in here and type scr cpy which is an
open source utility that allows you to
mirror your Android device on your on
your computer easily so I'm going to say
scrcpy so my Android device is now up
here and running you can see so we can
basically run our application whenever
we need to however as I mentioned there
are two more things that we need to do
one is to ensure that we've enabled
multi decks actually three more things
that we need to do and we need to First
enable multi decks for our Android
application and there are some guides
and that are available for this
and there is a stack Overflow actually
for this I'm going to paste it right
here and you can see that there are some
instructions on how you can enable multi
decks for your app okay so what we need
to go and what we need to do is to go
and open our default config in here
which is in our apps build Gradle so
let's go ahead and search for this
default config as you can see in here
okay and you can see that we have our
default config right there and we just
need to change a few things so here we
have our application ID and for the Min
SDK version I'm just going to enter 19
in here okay and then we have the target
SDK that's fine flutter version name
that's fine what we need to add in here
is this value multi-dix enabled and it's
um sorry this key and its value should
be true so I'm going to paste it right
there okay and remove the white space
and then we need to go into dependencies
so search for dependencies in this file
you can see it right there we have the
Android SDK latest release that's fine
which is for Facebook okay and we need
to also add our multidex value in here
it says one zero three and that's
exactly what we're gonna use in this
project as well so let's just copy that
okay and then bring it right here that's
really good okay so that's for enabling
multidex let's see uh this value if we
need to do that as well which is inside
our Gradle properties and that's
probably actually something we need to
do as well so we go into our Gradle
properties and let me remove this from
here we can see a few values in here
that's fine and that's fine and that is
fine as well so it's just ensuring that
you have these values inside your Gradle
properties file as well so I'm just
going to close that file and close this
build Gradle close this build griddle as
well okay so that's one thing that we
had to do then we need to also ensure
that we you can add a f FB or Facebook's
authentication to our flutter app
because there are some steps that
actually Facebook itself misses
um from its own guide so if we follow
this guide I mean we haven't really
finished this guide yet so let's just
um saying next in here and it says okay
go ahead and log some app events but
this is just being done natively and
we're not going to do that we're going
to do it through uh flutter we're not
going to add this login button and
natively so we could just go ahead and
ignore that as well register a callback
we can ignore that as well okay and
let's go in here check login status
ignore again and then we're good to go
on this guide however there's another
guide that we need to follow and that is
for adding Federated Authentication
using Facebook as well to our flutter
application and that's a Google
documentation so I'm just going to copy
its URL and bring it up here and paste
it right there you can see Firebase
Google come docs alt flutter Federated
auth
okay so let's go in here as you can see
it says oh you have to set things up
like this and
um right before this I actually wonder
if we should
configure and the Facebook
authentication a little bit more because
there are some things that we're missing
I'm sure and I'm going to bring up the
URL for that so let's go in here and see
Facebook me do app docs for intro so
let's go in here there are some things
that we're missing and we've already
added the this dependency so let's go to
Android configuration we've already done
these done these token is already set up
we've added the application the client
token that's fine but one thing that we
haven't done is specify it right here at
the end of our guide in here you can see
it says go to manifest package so let's
find this manifest package all right so
I'm going to go back to our project
manifest package oh we don't have that
because simply I think this is um
perhaps inside another file that we
haven't created so if we look at this
platform provider I believe we need to
go into Android manifest file again so
let's go in here and find our Android
manifest Android manifest file
right here
okay so we have our application and
right after excuse me right after a
manifest
we have to paste that queries right
before application so let's go let's go
back in here take this queries that is
specified right here and go in there and
paste it oops right there okay and
that's fine I think the spacing is a
little bit strange I don't know why
there's three spacing before this this
is a really strange space It should be
four one two one two three four so the
one that ipased is actually correct and
the one that is here is not correct
spacing but um that's fine as well I
think the spacing is something that the
Gradle isn't going to pick up on all
right so that that is done now that that
is done let's go to iOS configuration
see if we've missed anything we've
already changed this upon on up on top
of our pod file and that is fine select
an app or create we've already done that
bundle identifier and that is set up
already by flutter Source okay says what
should we do in here a client token
we've already done that
okay and we've done these URL schemes I
believe as well so if we search for this
in our flutter application we should be
able to find it inside our info peels as
you can see in here okay that's already
in Google services so we don't have to
do anything about that this is not a
part of the info p list and it says to
use any of the Facebook dialogues along
and share that can perform an app switch
to Facebook apps your applications will
this also needs to include this
dictionary so let's search for this and
go into info plist okay and search for
this guy and it says FB API and FB
messenger share API and that's inside an
array
and
these aren't really included so what we
could do we could copy all of these to
be honest with you and place them inside
our application exactly as it is here so
I'm just going to take this array like
that okay and go ahead into our info PLS
file right here we have FB app API if
sorry FB API and we have FB messenger
share API and I believe they were
available in here as well so let's just
call Copy those and paste them right
here oh that included an array I don't
want the array I want just the strings
so let's take the strings and then place
them right here then I'm going to do
some formatting and I'm going to select
all these that I just pasted in here
which have wrong formatting and then
bring them right here okay
that was really good and that was really
it for IOS and Android configuration we
should be good to go but you never know
so I'm gonna say select device and then
choose my Android phone which is right
here then I'm gonna ask flutter to go to
the main file so main Dart file and then
I'm gonna just run our app on Android so
let's go in here
and then it's delegating the task to
Gradle as you can see in here so I'm
just going to wait for this griddle task
either to go and through successfully or
to fail if it fails we're going to fix
the problems if it doesn't fail which
actually I don't have to say if it
doesn't fail because it seems like it's
already failed
um it says one or more plugins require
higher Android SDK version fix this
issue by adding the following to blah
blah compile SDK version 33 so let's go
in here
and and let's have a look at this
compile SDK version
and we can see that it says let's have a
look at this compile SDK version it says
compile SDK version okay so it seems
like we may need to actually uh change
that value of 19 that we wrote Min SDK
version is 19. and I wonder if we
actually have to change that to uh 33 as
it's mentioned in here okay but let's
let's see how it goes because it seems
like it's running the Gradle task
anyways so uh
let's see let's just give it some time
oops there are some notes okay
platform 33 revision 2 finished
uh Java users or overrides a deprecated
API recompile with blah blah good okay
and mapper three successfully load blah
blah okay and it seems like our
application is actually running now uh
so here is our app on Android so maybe
we didn't actually have to change
anything
um by adding the following so
I wonder if you go in here
compile SDK version so if we change this
to 33 and there's so much going on on my
screen that I can't myself see what's
really happening so it's as you can see
it's an Android app build Gradle and I
just changed the compile SDK version I'm
going to stop the execution of the
application and then I'm going to run it
again and by going to the main dark file
and run it again and let's just see but
at this time when we change the compile
SDK version if that particular error
actually goes away or we have maybe
caused another error by introducing that
compile SK version of 33 so let's just
give it some time to compile an app and
if that error goes away then we know
we're good to go otherwise we will have
to change something in here and it seems
like it's actually Gone Away by just
changing this compile SDK version so it
does pay off to sometimes listen to
warnings and errors that appear on the
screen so let's remove the widget
inspector and let's go in our Android
app and I can see this is running on an
actual device right now so that's a
really really good sign okay after doing
all of that let's stop this and then
select device I'm going to say iPhone 14
pro which I believe is a simulator that
we've been testing our application on so
I'm just going to say iPhone 14 pro
and and then let's run our app afresh as
well on IUS because we change some stuff
in the info PLS file I believe so let's
make sure that our app also composed on
our simulator and to be honest with you
we could also try to compile this
application for a real device but we're
not going to do that right now because
there's no real good utility uh that
mirrors an iPhone applications or an
iPhone screen on a Mac screen except for
um Quicktime and that's I feel that that
is a little bit unnecessary at this
point in this course so
seems like the xcode build is done let's
go to our simulator
and see if our app is going to run soon
on it there we go so we have our IOS app
and we also have our Android application
set up and ready to go and it seems like
we've configured the Facebook
SDK properly on our app and but we need
to also do a few more things to ensure
that we are are able to do the Google
sign-in so let's go ahead and follow the
Google sign in plugins
instructions so that is in Pub Dev
packages Google sign in okay
and you can see that there are some
steps in here that we have to take in
order to allow Google sign in on both
IOS and Android so let's follow these
steps and I can see that the screen is
so white and it really hurts my eyes so
what I'm going to do is I'm going to try
to open this page in a Chrome browser
and I'm going to bring I'm going to
close this one let's go to a R Visual
Studio codes which is dark oh thank God
for that and then I'm going to bring up
chromey here and I have a plugin on
Chrome which allows us to have dark mode
on any page basically so I'm really
thankful for that
um okay it says the is integration for
our Google sign-in package
um is first registry application we've
already done that make sure the file
your downloads download in Step One is
named Google services that is already
done move or copy into my project iOS
Runner that is already done
and all those already done a dialogue
will show up blah blah then add the CF
bundle URL ties attributes below into
okay let's go into our CF our info p
list in here as you can see iOS Runner
okay and then let's search for that CF
bundle
URL types and um it is an array
that is so string is an array with
dictionaries in it seems like it so
let's take this dictionary and bring it
in here and it's key is
a key and its value is an array
that is so strange okay uh
URL schemes that's for Facebook it seems
like it Okay so we've already added this
bundle URL types and it's an array and
it's in there it's a dictionary and then
there is a key
and then you can see it's an editor and
then you have URL schemes so
this does look a little bit strange I
mean the way it is formatted but I think
the only thing really what we have to do
in here is to add this particular key in
here you see the the string so let's
just copy this
both
all right
and go back to visual studio code and
then and then just paste it in here
and it says
we have to I think we have to get our
apps identifier in here what is what is
this copied from Google services info
plist key reversed client ID so let's go
and find this reverse client ID okay
which is right here
and then I'm going to copy this value
and let's go back in our info p list and
then paste it right here okay so that's
it that's really all we have to do I
believe so end of the Google sign-in
section all right I can see the bundle
type role is not specified in here so
let's I wonder if we should actually do
that we probably need to let's go inside
this and then add this key with this
value with the editor value okay so boom
boom good stuff
that part seems to also be done as an
alternative to adding Google services
info pills to your execute project you
can instead configure your app in Dart
code in this blah blah okay we're not
going to do that I mean we can't
configure as well in Darker but we're
not going to do this step at this point
iOS additional requirements know that
according to blah blah starting apps
that use login Services modes also
offers sign in with apple option when
submitting to the Apple app so this is a
really good point because
um if you're if you're gonna submit our
application to the IOS app store then
you need to ensure also that you're
adding Apple sign in to your app but
we're not going to do this in this
course because if we go back I mean I
know we've been configuring a lot of
stuff up to this point but the core of
this course is actually to learn about
riverpod and we we're not going to go
and do lots of sign-in options in our
application because they don't really
bring so much into the riverpod course
itself and but the Facebook login and
the Google login they're going to help
us at least a little bit understand how
a social sign ins work and you can go
ahead and add Apple sign-in as well only
to your IOS app if you want to but
that's outside the scope of this course
and then it says import this package
Google sign in ETC and then initialize
Google sign in with the Scopes you want
okay available Scopes that's fine all
right okay so it seems like we've
already now gone through the these
instructions as well so if I stop our
application and select device iPhone 14
pro and then try to run our main Dart
file again on the simulator it should go
through successfully
so
it seems like we've now configured our
application fully so I don't think we've
actually missed any step it seems like
our app is running successfully both on
IOS and Android and I don't know which
app we actually had here on Android it's
one of the apps that is placed somewhere
in here testing riverpod testing flutter
it's uh my e-commerce Instagram I
believe it's this application so this is
our Android app and this is going to be
our IOS app and they both seem to have
been linked to Facebook login and Google
login successfully we don't know that
but we have to start using those
features before we can be 100 sure about
that so great stuff well done if you
followed the course through to this
point we're done with the very boring
configurations of social logins and
that's one of the unfortunate uh
the truths about social logins and that
they need so much configuration it would
have been so much easier if you could
just say I want Facebook login with just
one command I would just configure
everything for us maybe there's a
utility for that I don't know but good
stuff we're done with that step so let's
just go ahead and focus on actually
doing the authentication with riverpod
not up the basic setup of our
application is done we are finally gonna
get started with the code and to me this
is the most exciting part and that's why
I'm very happy maybe you actually notice
it from my voice I think the setup of
the application is necessary but it is
definitely something that I don't look
forward to when I'm creating new flutter
applications or native iOS or Android
applications or even back-end
applications the setup is usually for me
at least the most boring part so enough
with that let's get started with the
code so what we're gonna do right now is
to go ahead and set up the
authentication process in our
application and this authentication is
of course going to use riverpot I need
to mention that we're gonna write quite
a lot of code to start with Excuse me
and um right after writing this all of
this code then we're gonna test it on
our application so there is going to be
quite a bit of code writing before we
can actually test it with some dummy
buttons and what we're going to do is
we're going to allow uh Google login and
Facebook login inside our app after all
that logging part the code is written
we're going to go inside our home page
and add two buttons and enable the user
to tap on any of those buttons one for
Facebook the other one for Google and
sign in and then we're gonna test our
authentication with those dummy buttons
okay so
um I'm gonna try to show you examples of
how this actually looks like on the
screen by referring to the complete app
which is right here on the left hand
side and so I'm gonna get rid of this
simulator here and this uh actual
Android phone and to be honest with you
we can actually stop the execution of
our program we don't have to run it and
I'm going to bring up terminal and also
stop the execution of our app with
scrcpy which was running on an actual
Android device so let's go ahead and
start creating the files and writing the
codes that aren't necessary for our
application we're going to start with
the authentication so let's go to lib in
here let's go ahead and create a new
file so let's say new file in Visual
Studio code inside the lip folder then
let's say state slash auth slash
constants slash constense.dart okay so
this is how we're going to structure our
app we're going to create quite a lot of
folders you can see inside lib we have
state and this is the state of our of
our application not just authentication
state but state in general and in there
we have our auth so we know that this is
authentication State and then in there
we have a constants folder and in there
we're going to have a constants file
okay so let's get rid of the sidebar I'm
going to close the main Dart file and
the info PLS as well so we can focus on
this one let's go ahead and create a
Constance class and this class is going
to contain three constants that are
authentication process is going to use
one is with one is an error that we're
going to throw telling the user that and
this account exists with different
credentials and this is used with
um when you have authentication
Federated authentication with Google and
Facebook and that if you log in with
Facebook with an email address and that
is already logged in with Google then
you're gonna get an error and you have
to link those accounts together so and
the other two uh strings that we're
going to Define in constants is one is
going to be for google.com which is
going to be the domain that we're going
to use for logging in with uh with
signing in with Google and the other one
is going to be the email scope that
we're going to extract but don't worry
about it I mean I know it's a little bit
abstract right now because we're not
actually using these constants but you
will get it when we actually start using
them so let's go ahead and create an
immutable class okay if I can spell it
immutable and immutable comes from
um foundation so let's say immutable
class
constants okay and I'm going to get help
from Visual Studio code to import
foundation and I'm going to go ahead and
say immutable okay
like that let's go ahead and Define and
say static const account exists with
different
credential okay and I can see it wrote
the code for me and that's because I've
already written this code before so it
knows exactly how to write it and when I
say it I mean this is a GitHub co-pilot
that is doing this work for us okay
let's say static const and Google com
and that is google.com and then static
const email scope let's see if it can
finish that for me as well and then
let's go ahead and create a private
constant Constructor for our constants
class so that it cannot be initialized
from the outside world so const
constants and a private Constructor just
like that so this is how you can also
create your
um your own constants in Dart so you can
specify them using class static con
variables or properties okay
so that's the first file that we had to
create let's go ahead now and create a
another file that specifies our
authentication result which is an
enumeration and it's going to say either
authentication is aborted has succeeded
or has failed all right so let's go to
our Explorer in here inside lib we have
state we have auth okay inside auth
right click on auth itself and say new
file then let's create a folder we call
it models and then in there we're going
to create a new file called auth result
dot Dart okay just like that I'm gonna
get rid of the Explorer and let's say in
an auth result
and in here let's just say aborted
succeed success
and failure okay so these are our
authentication results so that was that
now
we're going to go ahead and create a new
class and we're going to call it auth
State and this auth state is going to
include the authentication result which
is this guy and a Boolean property
telling uh telling our application
whether the auth authentication is
loading or not at the moment and this
loading is then going to be hooked into
a loading screen and we're optionally
also going to have a user ID as well
okay so let's go ahead and Define this
user ID our user ID is actually a string
so let's just Define a type definition
for it let's go in lib state
and let's see in here lib State and we
could perhaps create this in another
location so it's going to be in lip
States right click on state that's a new
file and then we're gonna say posts type
defs okay
and then we're going to say user
underscore id.dart and the reason we're
creating this so you can see this new
file has been created in lipstate and
then posts is because this user ID is
going to be also extensively used when
we are dealing with user posts so a user
post is going to have a user's ID
embedded inside it the person who's
actually made that post that's why it is
more relevant to have the user ID as
part of the posts folder than to have it
as part of the auth folder okay so it
really doesn't matter so much where you
place this but if you're following along
with the sips that I'm providing in this
course it's actually best that you place
it in the same folder because all your
Imports then are gonna just fall into
place when you're following the course
so let's say typedef and we're going to
say user ID is a string so that's really
it that's the contents of this user ID
file
then let's go ahead and create our off
State the one that I said has the
loading property in it okay let's
collapse this
and the auth state is going to be
created inside the state auth models so
let's see State auth we have constants
and we have the models folder already so
let's go ahead and create a new file in
here and call it auth State off
underscore state.dart okay
great stuff now in here we're going to
create a new class called off State so
let's say immutable
a class off State as you can see in here
okay and this immutable we're gonna
bring from Foundation of course and say
show immutable all right because we
don't need the entire foundation for
this
good stuff let's go ahead and Define a
property for this guy that says auth
result which is uh basically the result
so let's say auth result and it's going
to be Auto imported using using visual
studio code if you are using another
editor that doesn't have Auto Import you
will have to import auth result manually
and we call this result okay let's say a
final bull is loading okay and then
final user ID and optional and this is
going to be Auto imported as well and
we're going to say this is Argus ready
I'm going to get help from Visual Studio
code to create the Constructor for this
class so I'm saying same const putting
curly brackets in here and a colon at
the end
and can't have a value of null but no
one said that it should have the value
of null and let's make all of these
required parameters so required just
like that okay so we have a constant
Constructor for our auth state
now when the application starts we have
an auth state that is not known so we
don't log you in automatically we just
be like yeah I don't know what the
authentication state is at the moment so
let's create a constant Constructor for
our auth state called unknown which sets
up these three properties accordingly to
an unknown state so we say const auth
State and then dot unknown
okay and in here there are the three
properties are going to be set up like
this result is null is loaning is false
and user ID is set up to null as well
okay now what we're going to do is also
take the auth state and create a
function on it that says and that we
basically copy the current state of off
State but we just flip the is loading to
another Boolean value so we've done this
before so let's just do it again so we
say auth state it returns off State and
the function is called copied with is
loading okay and we say bull is loading
and in here we return a new off state
that only changes is loading but it
reuses the result from the self and
reuses the user ID from self as well
so as any model objects for a river pod
and you need to also ensure that you're
implementing uh identical or equality
and hash values on your model objects
because it's very important and that's
how riverpot Works under the hood in
that when it's providing you with new
values it actually checks whether the
new value is equal to the previous value
or not
and if it is equal then you don't get a
new value but if it's not equal then it
will emit a new value so it is very
important that you implement equality
and hash values for your model objects
and ensure that that there are actually
working as expected or they're designed
as expected okay so let's override the
Boolean getter for equality so we'll say
bull operator or not getter but operator
and we say covariant auth State other
okay
and then first we say okay we they're
equal as long as they're identical
identical uh this and other or
we if they're not identical and then we
actually check their uh values so we say
or the results uh is other result
and is loading is the other is loading
and user ID is the other user ID so this
is looking fine to me you can see that
Visual Studio code is saying that since
you've implemented equality you also
have to implement hash codes so let's go
ahead and Implement hash code for this
auth state so let's remove this to do in
here and we're going to use object dot
hash as you can see in here and then
hash three values in here which is our
result let's go in here and say result
is loading and also we have that user ID
for our hash value okay that's really
good so now we have an auth state in
here which our authentication mechanism
is gonna emit instances of whenever the
authentication State changes okay
and remember we also have this as
loaning in here meaning that even if the
authentication state is unknown it is
loading property can be set to True
using this copied with is loading
function all right
after we're done with that we're going
to go ahead and write the meatiest and
the most important part of our
authentication and that is the core
authenticator this authenticator is
going to do the heavy lifting of
authenticating you with Facebook and
also with uh Google so there's a bit of
code involved in this and we're just
going to go and break it down into small
steps after we're done with the
authenticator writing this new class
that we're going to go ahead and write
just now
we are pretty much at home with
authentication to be honest with you the
only things that will be remaining are
the notes fire and the provider and I'll
walk you through all those steps
separately so don't worry about that
let's go ahead and start implementing
the authenticator okay so we need to go
into State auth and we which we have in
here and in here we have two folders
constants and models we're going to
create a new folder in here called
backend which is our authentication
backend and in there we're going to
create a new dart file called
authenticator Dart so let's go here on
auth folder and I'm going to right click
on it and say new file and then call the
full there is going to be a folder
called backend slash and then we're
going to say
authenticator.dart okay so this is the
core of the authentication so very
important that we take it once upon a
time so authenticator okay
now we need some properties in here and
like the user ID getting the current
user ID and we're going to get the
display name and email and we're going
to have some functions such as log out
and log in with Facebook etc etc okay so
let's go ahead and implement the four
properties and one by one the first
property is and we want to we want to
know if you're already signed in or not
okay so uh we're basically
um actually before we do that is sign in
we have to implement user ID so let's
let's Implement a getter that gets the
current user ID so let's say user ID is
going to be Auto imported it's an
optional value a getter called user ID
and we're going to go to say Firebase
auth and that's going to be imported
automatically instance
instance current user user ID as you can
see in here okay
so that's getting the current is ready
we also need to know if you're already
logged in and if you have a current user
ID then we know that you're already
logged in so let's say bold get is
already logged in and we're going to say
this is user ID as long as it's not null
okay then we know that this Boolean is
true
if user ID is not then this is false
okay
so
we also need to get the current display
name so let's go ahead and Implement
that so we say stream get display name
like this okay and we say Firebase auth
current user display name or empty as
you can see in here okay so you could go
ahead and create maybe a getter that
gets the current user and then you could
reuse that getter in these two places if
you want to because it's you can see
it's duplicated so you could go ahead
and say if you have a look at this
current user it returns a user if you
could say user current gets current user
and this returns this and then in here
you could say current user current user
as well but I'm not going to do that I'm
just showing you different ways of doing
the same thing okay
good stuff last but not least the last
property is the email property getting
the email property you can see that uh
Firebase sorry GitHub copilot is trying
to write that code for me it's almost
correct so I'm gonna accept it it needs
to be an optional value and it needs to
remove that last unwramping for us so we
don't want uh and like um an email
that's always set to a value we want the
actual email if it's present okay
now that the four properties are set up
let's go ahead and write our functions
one is for logout
yeah actually there are three functions
one is for logging out the other one is
logging in with Facebook and the third
one is going to be logging in with
Google with logging in with Facebook
being the most difficult one actually so
let's go ahead and do the most easy one
first and that is for logging out so
let's say uh we have a function that
returns a future avoid which logs you
out of the application so let's say
future void and we're going to call it
log out and this is an async function as
well okay so what we're going to do
we're going to sign out from three
different places from Firebase auth
Google sign in and Facebook off so let's
say we await Firebase off instance sign
out okay then we're gonna await uh
Google sign in and that's going to be
Auto imported dot uh Google sign in like
that sign up and then we're also going
to say await Facebook auth and that's
going to be Auto imported as well
instance dot logout as you can see in
here okay so now we've done the logout
function successfully
let's go ahead and do the Facebook login
now okay so this is going to be a
function that returns an auth result as
we've uh as we've implemented it here
you can see auth result okay so it
returns a future of auth result which is
going to be Auto Import and we're going
to say log in with Facebook okay and
this is an async function so we're going
to take it one step at a time in here
so first we're going to await Facebook
authentication a logging in so we're
going to say a login result so let's say
final login result is equal to await on
Facebook auth
dot instance Dot Login oops not logout
log in
login like this okay
so we have that login result and then
we're going to get your current token if
after logging in with Facebook because
you see when you do this the entire
login dialog for Facebook will appear
and if the user cancels it then you need
to cancel this entire function and
return an auth result that is equal to
aborted okay so in order to know whether
the user has canceled this dialog or not
you need to look at the token that was
returned in the login result so we say
final token is login results
dot access token dot token okay and this
value you can see is a string and since
there is an optional in that in the
entire chain this value is going to be
an optional string as you can see in
here okay then we say if the token
if token is null that means the user has
aborted user has aborted the logging
in process okay then we say return auth
result dot abort it okay so yeah we're
not going to continue after that then
what we need to do is to get your
credentials so let's say final auth
oauth credentials is Facebook auth
provider uh dot credential from that
token so we get the credentials from
that token okay then we go into a try
and catch block so we say try and then
we say on Firebase auth exception
and then we catch e
for now okay and then we're gonna go
into try so we're going to say await uh
Firebase auth
dot dot instance and then we're going to
say sign in with credential okay because
we have the oauth credential so let's
write oauth credentials right there okay
and we're waiting on it as I can see and
that's that's correct and then if this
goes on successfully so now that we've
got a Facebook off uh credential you can
see in here is actually oauth credential
and that oauth credential can be passed
to Firebase in order to actually log you
into Firebase because you see even
though you're logging with Facebook it
doesn't necessarily mean that you're
logged into Firebase as such you need to
get an oauth credential and then pass it
to Firebase so that you're logged into
our application successfully if this
goes on successfully then we say return
auth result success all right however if
you get a Firebase auth exception in
here the error could be that your
account exists with a different
credentials
um with a different credentials server
what this really means is that if you
have Federated signing in like you have
Google sign in and you have Facebook
sign in if you've already logged in with
Google and then you'll log out and then
you try to log in with Facebook with the
exact same credential you're going to
get an exception and that is simply
because Firebase is going to be saying
nope I have already logged you in with
another oauth credential that is linked
to another provider which is Google now
you're trying to log in with the same
account same email but using Facebook
and that's not accepted so what we need
to do first extract your email we say
final email is e-email okay
then we say final credential is e
credential then we say if the error code
you see is a string and then we're going
to go into our constants you see right
here it's going to be Auto imported and
we have this particular error we say
okay if you've already logged in with
another provider and let's go to the
next line
oops and
your email is not null so we actually
got your email and also credential is
not no okay
like that all right
and like that
then we go into the Google sign-in uh
basically get your provider we say final
providers
is await Firebase auth
auth like that instance
and then we fetch your sign-in methods
for that email okay so we want to get
your previous providers that you used
with that email such as Google in this
case okay then we say if the providers
contains constants Google com so if
you've already logged in with your
Google email which is the same email
that now you're trying to use to sign in
with Facebook then we actually await uh
log in with Facebook and sorry log in
with Google and this is a function that
we're gonna just go ahead and write as
so let's go ahead and create this
function at least in here and we're not
going to implement its results uh we're
not going to implement its code for now
but we just have to have it so that we
can use it up there so this is an async
function okay
and we could just for now say return
auth result uh
auth result failure for now okay so if
you had already logged in with the same
email address with Google and then we
log in like that and then we say
Firebase off
uh instance
Uh current user and we say link with
credential with that particular
credential okay so we're telling
Firebase auth that hey we know that this
user had logged in with user now we're
trying to actually log him in with user
and if that goes successfully then we
link these two credentials together and
this is what if a Federated
authentication actually is it means
you're you're allowing the user to log
in with the same email address using
either Google or Facebook okay
if that all goes successfully then we're
going to say return auth result success
success like that and in here we say
return auth result dot failure okay so
it can go ahead in here and have a look
at the code where inside the if
statement in here okay
you see the if statement ends in here
and if this goes unsuccessfully then we
return auth result success otherwise we
say auth result failure okay there's a
lot of code but let's go ahead and
finish it up with logging in with Google
so it's very similar to the Facebook one
so let's say so here we're going to go
and say final Google sign in as you can
see in here and we're going to say
Google sign in we're going to add some
options in here and we're going to say
this is equal to Google sign in and the
Scopes are going to be email so we
actually need the email scope in here
okay so and that's coming from Constance
email scope and now you know why we've
defined this okay so now that we have
the option we're going to say sign
in account is await Google sign in await
Google sign in
like this and then we're going to sign
you in with those options those options
and sign in
okay and we say if the sign in account
is null if you if this value is not
no then we are going to say return
authresult.abort so we know that you
didn't actually sign in with Google in
that case Okay because this is gonna you
see this is gonna display the Google
sign in dialog to the user just as this
call up here is going to display the
Facebook login dialog to the user okay
so very similar to each other
and then that part is done we're going
to get your
um authentication results so we're going
to say Google sign in authentication in
here so we say final Google auth is
await
sign in account uh authentication okay
and then we're going to create an oauth
credential final of credentials is equal
to Google auth provider like this and
then we're going to say credential okay
and this has a few parameters you can
see it has the access token and we're
going to get that from Google off in
here let me just change the name for
this as well to Google off like that
Google off access token and Google auth
uh ID token all right so we can actually
put the ID token perhaps up here as well
it doesn't really matter okay now that
we have the auth credentials we're going
to go ahead and give it to a Firebase
the exact same way we did it for
Facebook so let's say try and we're
going to say await and Firebase off
instance sign in with credential like
that okay and then we're gonna pass the
oauth
o auth credential I believe which which
one was it
auth credentials we call it perhaps we
should call it oauth credentials so
oauth
or off yeah that's fine and we're gonna
say oh uh
credentials okay so that's in the try
statement and if that goes fine we're
going to say return auth result success
uh success good stuff and then if we get
any errors we're just gonna say return
auth result
out failure okay so that was really it I
know that this was a lot of code and you
may be a little bit over what
overwhelmed with this but the easiest
way to explain this is that you need to
actually read the documentations for
social science and I've done that I've
tried this and tested this and I know
that the way that I've written it works
you may be thinking oh but van dot knows
how exactly this works and how does he
know but I don't know how this code
actually works and how should I write
this code on my own the answer is I
didn't know how this works either I just
wrote the document I just read the
documentation and understood how I
should implement it I tried maybe 100
times before everything started working
so don't think that I know everything
I've just read the documentation you can
too so but I am just providing you with
the code that I know works but don't
think that this code just magically came
to my head is it's just a result of a
lot of trying and failing and then at
the end succeeding okay
really good now we're done with the
authenticator so we can go ahead and
write our notifiers and providers
with all of this in place I know that
we're all eager to get started actually
using our Google sign-in and Facebook
sign in however if you remember
correctly we enabled only Facebook sign
in in our Firebase console for our
project so what we need to do now is to
go to console.firebase.com
and in there enable not only Facebook
sign in but also Google sign in so let's
do that now I'm going to bring up a
browser window and I'm going to type
console.firebase.google.com and I'll
bring this screen here
so you can see it as well
so let's go ahead and find our Instagram
clone which is this one instagram clone
course found up okay and if we go to a
little bit lower in here you can see
that we have let's see if we can find
Authentication
here we have authentication so let's
just click on that
and if we go to sign in methods you can
see that Facebook is at the moment
enabled so what we need to do is just to
add a new provider and that's going to
be Google Okay so let's just click on
that and it says Google sign is
automatically configured on your
connected apple and web apps to set up
Google settings for Android apps you
need to sit and you need to add a shab
on fingerprint for each app on your
project setting okay so let's just
enable this and it says update the
project level settings below to continue
project public facing name okay so this
is the public facing name for our
project so let's go ahead and say that
this is Instagram
at clone course Vandal and of course you
need to go ahead and add the relevant
name for your project being here as well
and it says this will be the name
presented to users when they're shown
any public instances of your project
okay and it says project support email
and I will choose my email which is the
user that I've logged in with
okay that's really good let's just save
that
and you can also see that it says in
order for for this project to actually
work on Android you need to go ahead and
configure the shaft one certificate and
download Google services Json in Project
settings okay and so download and update
your configuration files to make sure
Google sign-in works for your apps the
instructions for Android and Apple okay
so we need to we need to do both of
these so one for Android and one for iOS
so let's have a look in here and see
what we need to do it's a Java Android
kotlin and so it says in your module app
level Gradle file blah blah so we need
to do some
um
configuration basically for our Android
application and I don't think that we
need to do all of this it's just that we
need to ensure that these parts are in
place okay so it says uh if you haven't
already add Firebase to your Android
which we've already done okay and I
don't think that there is a section in
here for flutter which I really doubt
that there is
so actually there is an awesome teaching
with Google on Android flutter and then
this one is authentic so it's
documentation authentication build
let's see if there's uh one for flutter
as well password authentication email
link authentication phone number get
started which section are we on at the
moment so it's Android Google flutter
there is no sections specific for Google
I can see in here so what we need to do
is just to go ahead and see if we can
add all of these also to our application
and I actually wonder if all of these
need to be added before our sign-in can
work because I don't think really that
I've added any of these to
um
the iOS sorry the riverpot application
that I've already created so what I
think we could do is just to leave it
like this like it is right now and then
we're just going to go and test our how
our application works or it doesn't work
then we can go ahead and configure more
if things don't work as expected okay so
let's just close all of these tabs that
we have in um Visual Studio code and
let's just go to our main Dart file in
here and add two buttons in there okay
so in the home page we're going to add a
column with two buttons one for a Google
sign in the other one for Facebook sign
and we're just going to test it out and
see if things work as expected so let's
go ahead and say body in here and then
we're going to say column okay and for
children we're going to say that we have
two text buttons so let's say text
button
and let's say that we have an unpressed
and then for the child we're gonna say
const text Facebook okay sign in
with Google yeah maybe that's fine let
the first one be signing with Google
let's put some commas in place so to get
the formatting right as well
after signing with Google let's say sign
in with Facebook Facebook okay and we're
going to go ahead and now test our
signing in with Google so let's let's
turn this function into an asynchronous
function then we're going to say
authenticator okay and that's going to
be Auto imported and then we're going to
say instance actually we haven't created
an instance yet but it is probably a
good idea that we create an instance of
our authenticator okay so let's say
authenticator and then we say sign in
oops login was it did we call it yes
login with Google okay so we say final
result and then we are just going to
print this result to the console for now
okay and then we can actually have a
little log function in here you can say
import Dart developer and this is a log
function that I usually use actually for
my projects and then we'll say as
devtools show log and then we have a log
extension on an object that can
basically invoke a tostring function on
that particular object using devtools
lock function all right so you can add
this also to your project I've added a a
very handy code snippet to visual studio
code for log so if I just type blog you
can see it is right there and I can just
bring it to any file that I need
so in here I'm just going to say go I'm
just going to go and say result.log like
this and this is how you use it and for
Facebook as well let's just put the code
in here and ensure that we're awaiting
on these results as well it's very
important okay awaits and then let's
turn this function into async as well
and in here we're going to say login
with Facebook okay good stuff so now
that is done I'm just going to say
select device iPhone 14 pro and you can
select device on Android emulator or
Android device if you're watching this
video on Linux or a Windows machine so
let's see if this process is going to be
successful or how successful it's even
going to be all right
I'm going to bring up the console in
here
so that we can see the build progress
this is running xcode build and this
could actually take some time so I'm
going to be quiet until this process is
done and then we can continue with the
video after that
okay now I can see our application is
running so let's go ahead and remove
this inspector that we have in here the
widget inspector okay and let's bring
the uh the simulator to the screen so we
have sign in with Google in here I'm
going to tap sign in with Google and see
what happens and you can see it says
Instagram clone course and wants to log
in with the help of Google and you're
seeing this in Swedish simply because my
simulator is probably set on Swedish so
I'm just going to cancel this and you
can see then the auth result aborted is
printed to the screen let's go ahead and
change the language on my uh simulator
to English because it is yeah it just
makes sense that the language is
actually
um English will be all understand and
what's displayed on the screen so let's
bring English Us in here and use that
language on Android devices changing the
language goes really fast but on an
actual iOS device this process could
take a long time and it almost does a
mini restart of the entire operating
system when you change the language on a
real iOS device but on the simulator it
goes a little bit faster so and the
unfortunate part is that when you do
that it actually kills all all usfs that
are running on that device because it
kind of like does a restart so that is
the reason that our app also got
terminated so just keep that in mind if
you're watching this video on on a
Macintosh
so what we have to do is just to
recompile the application hopefully this
time around it goes faster since we
already have the derived data and as you
can see it did go faster
so we don't have to wait now so much
it's just we need to wait for the
execution of the application all right
so we have the iPhone 14 pro simulator
in here what we are going to do is just
tap on the sign in with Google and you
can see that the dialog will appear once
they use google.com to sign in and then
we're going to press the continue button
I'm going to use my account which I've
already logged in to on this simulator
okay I'm just gonna choose that account
and you can see now we get a successful
result from Firebase for logging in with
Google then let's try Facebook sign in
so let's just press continue in there
and it says continue logging with
Facebook and it says yeah this is
basically our application and then we're
just going to say continue
I turn on all activity turn off Facebook
activities still turn off for other apps
and websites you can turn on
we can just skip this step and submit
for longer review some of the
permissions Below have not been approved
for use by Facebook and okay so we
should just say
continue as funded okay
let's see what happens here so we may
get an error
okay now it says oh I see this is this
is the Federated login you see this this
is the Federated and sign it what
happened is that we tried to log in with
Facebook using an email address that
we've already logged into using Google
Now this part of our authentication is
kicking in let's go to authenticator if
we close this widget inspector which I
find really annoying sometimes let's
just close that and then we go to our
Federated login with Facebook in here
you can see in here we got this
exception now we got this exception that
this is account exists with different
credential and the email Isn't null and
then we say the provider actually
contains google.com now we're trying to
log in with Google even though we're
inside the login with Facebook method
okay
so that's a very important part of the
application if we didn't do this then
the login with Facebook would have
failed by this point so we're going to
say continue then it goes to the Google
screen and then we're going to get a
successful result printed to the screen
as well so it seems like now our
Facebook and Google logins are actually
working successfully so we don't have to
spend much more time on authentication
so that part was actually I would say
the most boring part of the course and
for me at least because it it contains a
lot of configuration a lot of like
abstract coding which is just like copy
pasting from one method to the other
uh so that part is done now what we can
do is go ahead and try to focus a little
bit more on the actual uh
River pot part of the authentication
process and that means our state
Notifier and the state provider okay so
what we need to do is just to go and
work on the Notifier and this Notifier
if you remember from before what we said
is that in riverpod when we're working
with State notification in that for
instance in this case we want to notify
our our application off an
authentication State on our off state is
already inside its own a class in here
so we want to propagate instances of our
of our off-state to different parts of
our application since this is a state
object it makes sense to go and create a
state Notifier so the point of creating
a state Notifier is that it will be a
class that will contain an instance of
off State and then it will be the
abstraction layer that riverpod will use
in order to communicate with our
authenticator okay so we basically need
to create a state Notifier that will
talk directly with our authenticator and
then it will do the login and log out so
that riverpot doesn't have to directly
talk with authenticator okay so we will
contain the state inside its own class
so to say all right so now that that
description is in place and we can go
ahead and close those files let's go to
the Explorer and create our state
Notifier which we're going to call auth
State Notifier and that's going to be
placed inside lip State off you can see
in here okay and then we are gonna have
a look at the subfolders that we have in
here we have backend constants models
let's go ahead and create another folder
which which is called notifiers and
actually let's say new file in here and
we say no to fires slash which creates a
folder for you called notifiers and then
we say auth
State
notifier.art okay so this is going to be
our state Notifier and I can actually go
in here and say remove the activity bar
as well
so that we can fully focus on our
application so let's go ahead and say
auth state
Notifier extends State not fire which is
going to be Auto imported from hooks
riverpot okay State Notifier and then
we're going to say auth state which also
is going to be Auto imported so just
keep in mind that I use the Auto Import
feature of Visual Studio code a lot so
that I don't manually have to import
everything I find it a lot easier just
to use Visual Studio code for these kind
of things so that coding can go a little
bit faster and smoother so if you don't
have Auto Import enabled please just go
ahead and do that in my opinion at least
is a very very big Time Saver okay so in
here let's keep an instance of our
authenticator okay so our authenticator
is going to be
is basically going to be an instance
that this auth state Notifier is going
to use under the hood so we need that in
here so let's just go ahead and say
final authenticator is const
authenticator but okay like this
and also we need to go ahead and then
create actually let's all to import this
as well
import Library let's just import it
using its full path okay and the
consequence for recall isn't a const
okay so it seems like we need to go to
our authenticator actually create a
const Constructor for it so let's go to
authenticator and just say that const
Authenticator
okay so now we have a const Constructor
in here and this error that we're
getting in here is if you remember from
before from all the examples that we've
done before and we actually did a
specific exam example for State Notifier
every state Notifier has to have an
initial state so that is saying that hey
you don't have an initial state so you
have to create a Constructor that
contains an initial State and passes it
to the Super class so let's get help
from Visual Studio code to create the
Constructor we're going to remove this
particular
um
uh this particular value that is being
here because we don't want the color the
call site to actually pass the state to
us we want to contain our own state so
let's say we create
um we call the super and we say we say
that our state is actually off State
Unknown by default okay
then inside here we're going to say if
Authenticator
Authenticator
dot is already logged in so if you've
already logged in with authenticator
remember this checks the user ID not
being null if we've already logged in
then we're going to set our state to a
new state we're going to say off State
okay so in here we have a few variables
that we have to set and the result is
auth state DOT actually it's called auth
result
offers salt which is already imported
and we're going to say we've
successfully
um signed it is loading is false okay
and then we're going to say user ID is
authenticator user ID just like that
okay so this part I think it makes sense
right because first we start at an
unknown State and when the Constructor
is called then we checked with our
authenticator we say if we've already
logged in then emit a new off State okay
so think of State Notifier as kind of
like
a very basic Stream So the stream's
values are encompassed in the state
object and if you change the state
object and that new state isn't equal to
the previous state then a new value is
going to be emitted inside your state
Notifier so whoever is listening to
changes that are happening inside State
Notifier are going to get notified about
it okay
good stuff now that we have that we can
go and and basically write
the rest of our state Notifier and the
first function that we're going to write
is going to be the logout function which
is going to be just delegated to the um
it's going to be delegated to our
authenticator so let's go ahead and
create a future voiding here and we're
going to call it log out
and async okay and remember again you
may be thinking oh but we've already
written these things in the
authenticator of course but the
authenticator isn't a state the
authenticator just simply calls some
functions if you've forgotten how that
works if you go to authenticator it's
just some functions that cause other
functions it has no state it doesn't
know like not nowhere in here do we know
if you've already logged in or if you've
logged out or whether things actually
went successfully or not it Just Returns
the results it doesn't contain the
results this guy does contain the
results the auth state Notifier okay
which is a state Notifier of that type
of state so let's go to the logout
function in here and we're going to say
the state is
we're gonna say State copied do you
remember we have a function copied with
is loading and then we're going to set
the loading to true so we're going to
say we're starting to load we're doing
something in here okay so whatever the
state was before take it and then set it
is loading to True okay and this is
going to be helpful for our UI as you
will soon see when we get into the
loading
um the loading screen okay then we're
going to say await also indicator and
then we're gonna just delegate this task
to our authenticator and then we're
gonna set our state uh to unknown as you
can see in here so
so basically this translates to start
loading log out and after that is done
just set the state to unlock we don't
know what the state actually is and this
unknown to be honest with you could be
called
um
could be called logged out but for now
we've just called it unknown but just
know that unknown is pretty much that
you're logged out okay
let's go and create a function that
allows us to log in with Google so let's
say future void and then we say login
with Google and it's going to be an
async function all right we're going to
do something similar that we did in the
logout function that we are going to
start loading then we're going to get
the result is await
awaits on the Authenticator oops
authenticator login with Google okay
um okay and then after that is done
we're going to get the user ID final
user ID is Authenticator
dot user ID after basically trying to
log in with Google we get your user ID
and we say if the result is off result
success so that you successfully logged
in and user ID is installed so you
actually got a user ID
then what we're going to have to do in
here we're gonna take and take this data
and that we have inside our
basically the user ID that we got we
need to store this data inside Firebase
so this is this is an important part
because all of a sudden we're gonna go
and start working with Firebase okay so
I'm gonna show you how things actually
look like inside the existing Firebase
database so that you get an idea of how
we should construct our Firebase
database in here okay so I'm going to go
to console.firebase.com and open the
Instagram clone Vandal which is the one
that I've already written it's for this
application okay so let me just bring I
don't know where my simulator went this
application that's already finished what
we're going to do now is just have a
quick look at the database for this
application so you get an idea of how we
should construct the database for this
one
because our app's database should kind
of mirror what this app is doing because
basically we're trying to develop this
application to the right so it just
makes sense that the application the
word writing right now should have the
same database structure as the one to
the right hand side okay so let's go
ahead to this one and again this one is
the already completed application all
right let's go into the Firebase
database firestore database in here and
have a look at how things look like you
can see that we have a little collection
in here which is called users okay and
inside this user's collection then we
have different values you can see this
is a user and it has a this user has a
user ID equal to this and email equal to
this and a display name equal to this
and another user who is like this you
can see they have different emails but
they have the same name in here okay so
what we need to do now is at this point
f after we've successfully logged in
with Google we need to go ahead and
basically create we have to have some
sort of a class that can go ahead and
store values for us inside Firebase
however if you look in here we have the
Firebase firestore database in the
already completed project but we haven't
created one in here so what we need to
do is somehow I mean I don't understand
a new structure at all but let's somehow
find cloud firestore
I think cloud firestore is the one that
we want so please go ahead into all
products in your Firebase console then
click on cloud firestore we need to
configure an instance for our
application okay and let's just say
create database and we're going to say
start in production mode actually so
this is going to be very important to
start in production mode okay and we're
just going to say next and it's creating
the database in US Central and I'm going
to say Europe West and this is something
that is probably important to you at
home and I mean what you choose is
important mainly to you so have a look
at the list and choose a server that's
probably nearest to you or the server
that is of preference for you I want to
choose Europe West
and then this is creating a cloud for
our store for us and then while that is
happening we can have a look at the
rules that I've already created for the
other applications so I can just explain
to you how these rules actually work
okay what you can see in here is that
we're saying that match uh actually let
me bring the data as well the data tab
do you see the data tab in here we have
different collections which is posts and
users and in each collection then we
have various documents okay you can see
in here we're matching against
Collections and then documents and we're
saying that read updates are allowed if
the request authentication is not null
meaning that if you've if you've already
authenticated then you can read an
update to any collection name in any
document okay and then we say allow
creation again the same thing is that
yeah if you've already authenticated
however you're allowed to delete if
you're authenticated and the collection
name is likes or comments and that your
user ID is the same as the document that
we've created this is a little bit
difficult to explain right now but what
this means is that you're only allowed
to delete your own likes and comments
okay at the moment you can see in our
database that we have posts but we don't
have any likes and comments and the
reason behind that is that because we
haven't actually done any likes and
comments let's go ahead in here and let
me see if I can log in in here
with Facebook
okay let's go ahead and create some
likes and comments so here are my own
photos and I'm going to go in here like
my own photo and then uh oh I haven't
enabled comments so I can go in here and
comment and say Hello World okay and
post a comment then let's go back to our
database and do a refresh in here and
see how it looks so you can see we have
a collection called likes and there's a
document in here and the date of the
like the post on which we liked or the
post that we liked and the user ID so
this is a user ID that liked this post
at this date and also there is a
comments collection and you can see that
there's a document in here the content
is hello world at which date it was
created on which post and by which user
so this is the structure that we need to
also mirror in our application comments
likes posts and users this user
collection is the one that contains the
display names okay that is how we for
instance know in here that this user has
written disk comments because the
comment itself doesn't contain the
username the users are stored in a
separate collection called users okay so
that's an important part of our
application to keep in mind how these
things work okay and that's what we need
to do with our with our rules
so let's go back to our application in
here and let's go to our rules and and
then what we're going to do is excuse me
is that we're going to take these rules
that are written in here and we're going
to copy them and just paste them inside
here boom and you're more than welcome
to have a look at these rules so
you can I can actually go here go to
visual studio code and create a new tab
paste them here and then enable word
wrap so you can pause the video at this
point and have a look at these rules and
if you want to you can go ahead and just
pause the video and write the same rules
for your application I hope that my
explanation explanation helped in
understanding at least what these rules
are doing
so there's a special there are two
special collections called likes and
comments in which only uh I mean the
delete the deletion operations allowed
only if you're actually the owner of
that particular document because you can
see in here we're referring to Resource
data uid and you may be thinking okay
but where is this coming from resource
is the current document so if you go in
here this particular like is like this
one is a resource okay and in here we're
saying that if you've if you sent a
request you need to be authenticated
with a special you with a user ID that's
the same as the resources data uidn look
here there's a uid inside the data okay
so the data collection of every document
contains these fields that you've stored
in it and uid is one of those fields so
this is how we're saying that you're
only allowed to delete your own likes
and comments but you can create new
documents anywhere and you can read and
update anywhere else as well okay
so these are our rules I'm just going to
remove this document from here and let's
just hope that I haven't enabled the
word wrap on the entire application
so if we have done that we can disable
that later so ensure that you've enabled
those rules inside the rules tab of your
application you can see that we don't
have any collections at the moment okay
so what we need to do now is to go ahead
and create some sort of a file that
allows us to talk to a Firebase
basically and the Firebase storage that
we've created okay so we need some sort
of a storage a class that helps us with
this so in here we're just going to
delegate the task of storing the user ID
with the current username and user email
into Firebase so let's go ahead and take
care of that now
so let's go now and work on this storage
class before we actually do the storage
class I just want to explain one more
time what this guy is actually doing
upon logging in with Google and Facebook
we get some information from our
authenticator such as the user ID and we
can actually have a look at our Getters
our display name and email and if you
look
at the database of the application that
I've already created you can see inside
the users collection excuse me there are
documents in here that say display name
email and user ID and these are the
properties that we have in here you can
see display name user ID and email so
what we need to do is to create a class
that can help us store users inside this
collection all right so first we're
going to go and Define some collection
names uh as like constant values static
constant values then we're going to go
ahead and Define some fields that we're
using across our applications such as
comments likes and posts they all have
some fields in them you can see for
instance post has aspect ratio created
at file name Etc and we also have in
here and we have display name email user
ID which is being used in other places
as well such as Commons for instance you
can see uid
um created at they're all fields that
are being reused across different
collections inside our fire a cloud
firestore
so what we need to do is to go ahead and
Define these constants first for our
collection and for our Collections and
our um field names okay and then we also
have to have some sort of a payload that
can store a user information such as a
display name email and user ID and then
we're going to store that payload inside
the user's collection all right so let's
take this one step at a time and start
with the Firebase field name Dart file
so what we're going to do is to go ahead
inside a lib state so let me bring up
the activity bar let's go to lipstate
and in there we have auth and posts
let's go and create a new file inside a
new folder so right click on the state
folder and say new file and in here
let's give it a name of constants slash
frbase field name dot Dart okay so these
are going to be our field names okay so
let's go ahead and then say we have an
immutable class
and we're calling it Firebase field
name in here okay and we have various
values in here so we have user ID we
have post ID and and I can show you what
these are actually our user ID you see
it's this one okay and then if you have
a comment and it's being posted on a
specific post ID so that's that field
okay we want a comment as well like the
comment value itself okay so that's the
field for a comment then created at
which is this field created at or if you
have a like as well if you like a post
then I believe oh we have a date on this
one we don't have a created ad actually
it's a date one okay and posts I think
has created ads yes created ads and to
be honest with you lights could also
instead of using date they could be
created at but for some reason chosen
date we could we could either fix that
change it to create it at or just leave
it as date as it is okay so that's for
created ads we also have the date field
as you just saw we have the display name
for every user so in here you can see we
have the display name and also we're
going to have the email field in there
as well so I'm going to go ahead in here
and turn all of these to static const
values so let's say static const and
then create strings in here okay just
like that
and for user ID is uid and I just want
to stress something in here as you're
writing this code as well at home or
wherever you're watching this course
from please be very careful as you're
entering these values because it's
important that you're not only using
these values correctly from different
places inside your application in that
year and not hard coding them anywhere
but it's also important that you ensure
that when you're saving a value under a
key that you're reading it under the
same key I've seen a lot of people on my
Discord channels on my Discord server
and they ask questions about the free
flutter course that I uploaded in the
beginning of 2022 and they get errors
that they can't explain why and it
usually comes down comes down to them
not having spelled things correctly in
the code and I completely understand
because it is actually a delicate job it
is it is difficult to get everything
right especially in such a huge
application
so I think it's really important that
you have a look at this code that we're
writing together here and ensure that
you're writing exactly the same code so
that we don't make mistakes then later
on for post ID we're going to say post
underscore ID and comment is going to be
comments created underscore ads data is
going to be date display name let's play
underscore name and then we have email
in here and then last but not least
we're going to go ahead and create a
constant Constructor for our class in
here and which is making it private
basically using an underscore as the
name for the Constructor
let's import foundation and let's say
show immutable in here okay so that we
can use the immutable tag in here
that's good so that part is done and
then we can go ahead and start working
on our user info payload okay so the
user info payload is going to be a class
that we can
um we can basically pass it some values
so we can give it user ID display name
and email and then it can turn itself
into a map and a map is a kind of a
dictionary that has keys and values and
then using that map then we can we can
basically take that map and store
directly into our Cloud firestore
database so let's go ahead and create
this user and this is to be honest with
you this is a trick that I usually do in
in flutter and it is important for you
to also know that that you can take any
object and you just extend the map view
and using that technique you can
basically create any object that's
serializable to a Json object okay I'm
going to show you how that is done now
excuse me let's go to lipstate and then
we are going to create a new file in
here so you can see we have state auth
constants posts and right click on
lipstate on the state folder
specifically and say new file then we're
going to say create a new folder called
user info and then oops user underscore
info if I can spell it and models okay
and inside models we're going to create
a new file called user info underscore
payload dot Dart
all right and in here then we're going
to create a new class so let's say an
immutable class a user info payload and
let's import foundation and say show
immutable okay and we're going to say it
extends map view the keys are string and
values are string as well so let's
import map view we're going to import it
from Dart collection and let's just say
show map view because we only need map
view really we don't need anything else
from Dart collection
all right so let's go ahead and create a
Constructor for our user info payload so
we say user info payload it needs some
values and we need a required user ID
remember we've already defined user ID
before which is a typedef2 string if you
go to user ID you can see it's a typef2
string and it was Auto imported for us
in here you can see and we're going to
say we need the user ID we also need the
display name so required string display
name and we also have a required
actually let's take this as an optional
and then we say email as well okay
and the reason these are optional are
are because if we go to our
authenticator you can see that these
values are actually the display name
isn't optional but the email is indeed
optional but we leave both of them as
optional for now anyways let's then call
and and this is a trick now you get your
values incoming values now you have to
serialize them into a dictionary and the
serialization to a dictionary is using
is is being done by calling super so in
super you just create a dictionary and
you're done that's it really that's how
you would serialize your values into a
map view okay so instances of user info
payload now are able to be basically
stored directly into a cloud firestore
okay but let's go ahead and add these
keys and values so the first key is
going to be a Firebase field name and
that's going to be Auto imported user ID
is going to be user ID and display name
is going to be display name or empty
okay and then we're going to go and say
email or empty
so you can pass null display name or
null email and will store empty as you
can see in here okay so that's for our
user info payload let's put a comma in
here as well to get the formatting right
that's really good okay so that's for
the user info payload let's go ahead and
store our Firebase collection names so
um we all as we've stored the field
names you also need to store The
Collection name so let's close this
field name in here let's close the user
info payload in there and let's go to
the sidebar and create a new file inside
lipstate constants you can see we have
lib State and then we have auth and we
have another folder called constants in
here okay
in constants we're going to create a new
file called Firebase collection name so
right click on constants new file
Firebase collection name dot Dart and
this this start file is going to be very
similar to Firebase field name so I'm
just going to copy the Firebase field
name paste it in here okay I'm going to
say Firebase collection name and like
this Firebase
collection name like that hopefully it
didn't change the other one uh no this
one's still called fire Firebase field
name good now we have the Firebase
collection name let's go ahead and add
our collections in here so I'm going to
delete these values let's see if you can
actually get get this right okay and
we're going to say something is equal to
an empty string like this okay and we're
going to go and add our values in here
so thumbnails
thumbnails and that is
um so we have comments likes posts and
users and thumbnails are going to be
inside our storage we haven't had a look
at storage yet you see this is our Cloud
firestore but we also have storage if we
go to storage and this is where we're
gonna store our uh photos videos and
thumbnails if you tap on any of these
you can see that this user has images
and thumbnails and thumbnails you can
see in here
if you tap on any thumbnail it has some
information as you can see in here okay
so you can tap on any thumbnail you can
even download it and we haven't gotten
to the storage park yet we haven't
gotten to the uploading part yet I'm
going to explain all of these as we go
on but just know that we have some
collections even in the storage which
those collections are called images
thumbnails and also videos so
um but we're what we're gonna talk about
though soon so don't worry about it so
let's just say thumbnails for now and we
say thumbnails
thumbnails okay and the other one is
going to be cons
and we say comments and then we have
likes
and we have posts
and we also have users okay and we're
going to delete the other two so we have
five collections right now in here's
thumbnails comments excuse me likes
posts and users okay so that's our
Firebase collection name uh class now
finally we can go to our user info
storage so let's go and create a new
file and let's see where we're gonna
create that actually it's gonna be in
lip state
lip State and we have already a folder
called user info in here okay and in
user info right click on user influence
a new file and then we're going to call
it back and for it you see this is the
pattern that we're using throughout this
application it is when you're creating
something a class that is talking with a
backend such as Firebase or
um any other backend then we're placing
it inside the backend folder in that
relevant subfolder okay so in here we
say backend and then slash user info
storage dot Dart okay so we're now going
to get started developing the user info
storage which is going to be used in
auth state Notifier so I'm going to get
rid of the activity bar to the left so
we get some more space to develop our
application
so let's create an immutable class in
here and immutable
immutable class
user info storage just like this again
we have to import Foundation just like
we've done in other places show
immutable
it's a bolt like this all right
then in here let's go ahead and create a
constant Constructor for our user info
storage then we have one function in
this entire class that can save a user
info and return a Boolean to us so we
say future bull
save user info and this function takes
in a few parameters required user ID
and it's going to be Auto imported user
ID and then we have a required string
display name and I can see some
discrepancies in here in that display
name is not a nullable in here but it is
nullable inside the uh inside our
payload but we can leave it like that
for now because the payload can handle
in null values anyways but if you want
to fix that you can go ahead and do that
now
so required uh required string I believe
it was email and that was optional as
well okay so let's turn this function
into an async function and start
implementing it so
the first thing that we need to do is
actually start working with Firebase
firestore okay and that is this database
that we're gonna work with the firestore
not the storage but the this one the
database so we need to import Firebase
firestore Firebase firestore and it's
going to be Auto Import okay so let's
grab the user information from the
Firebase firestore database so let's say
let's say final user info is Firebase
firestore
instance okay and then we grab a
collection and the collection that we're
using is the Firebase collection
and name which is auto imported users
okay so we go into the user's collection
and then in here we're going to say
where we're going to look for a specific
user with a given user ID okay because
we want to see if you already have a
user stored in this collection if you
already have a user with a given user ID
stored in this collection then we're
just going to update your display name
and email address but if you don't
already have a user then we're going to
create a new user for you if we don't do
this logic if we don't check whether you
already have a user or not then we're
gonna end up with different documents
with different IDs that contain the same
uid and that's not good so we want to
ensure that we only have one user per
user ID okay even though the documents
document names are different in here
okay but the important thing is one user
in the entire system with that user ID
that's the key in here so let's put a
comment in here and say first check if
we have this user's info from before
okay
so let's check then inside this and
where and then we're going to say the
field name is Firebase field name it's
going to be Auto imported the user ID
should be equal to the given user ID
okay and then we limit our search to one
and and then we just issue the get
command in here which returns a query
snapshot for us okay so boom boom the
get command in here and don't forget to
do an await on this okay so
then we go in here you can see our user
info is now of type query snapshot with
a map of string Dynamic is pretty much
Json okay then we say if
user info docs so we get the documents
inside it is not empty that's how we
know we already have that user's info
okay then what we're going to do is to
get this user's info first documents
reference and updated so we say okay we
got this user info then we say await
user info dot docs it is a little bit
strange format but this is how it is
first reference and then we say updated
you can see you can just update it with
a Json all right then we're going to
update it with a new display name and so
we say Firebase
field name display name is the new
display name let's remove those and the
email is the new email or
empty okay
so after doing that the weight we're
just going to return true so we say that
we already found this user from before
we know he or she exists already in the
system then we're just going to update
that person's display name and email
with the new values okay
good stuff if we if we didn't fall into
this if statement then we need to go
ahead and create a new user so let's go
ahead and create a new payload so we say
we don't have this user's info from
before
create a new user
then we say final payload is user info
payload which is the class that we have
created from before which is going to be
Auto imported and let's put a semicolon
in there okay so we create a payload and
we just have to store this payload
inside that collection now so let's say
await Firebase Firebase firestore
instance and then we're going to say
collection
and the collection is going to be
firebasecollection name dot users okay
and put a comma in there and
in there and we're going to say add this
payload you see this is the beauty of
creating these map view objects like our
payload you can just add it directly to
Firebase because it is a map view you
see it's a map view and this add
function requires a map so as long as
you've extended map view then your
object is indeed a map okay so
um I also notice that we need to pretty
much put this entire thing inside a try
and catch okay so let's go ahead in here
and say try and then we catch e in here
and let's go and take this entire code
that we've written up to this point boom
boom take it out and place it inside try
and return true at the end of all of
this okay if everything went
successfully and inside cache we're just
going to say return false as you can see
in here okay so this is our code
um that we've written so far it seems to
be fine to me try yeah
I don't think we've done any formatting
arrows to be honest so and we're
awaiting on this as well and returning
true good stuff okay I don't know why
this comment is written like that there
but we could just indent it a little bit
ourselves so to make it look a little
bit nicer okay now that we have the user
info storage
we can continue with our auth state
Notifier so in here in our auth state
Notifier we can now uh go ahead and
create a future function before we're
done with the login with Google we have
to create another function that can at
this point when you log in successfully
whether with Google or Facebook we can
delegate the storage of that user into
our Firebase database to this storage
what do we call it we call it user info
storage okay so let's go ahead and
Define our user info storage as a
property of our class so we say final
uh user info storage is a const user
info storage and let's import that
package okay
and then let's create a function that
can delegate this task to us so this
function is going to get the user ID
from us because the user ID is ensured
to not be null at this point okay so
let's say future
void and then we say save user info and
then we have a required string property
called or a string parameter actually
let's call it user ID because that's
what we have from before
use right okay so you may be wondering
you may be wondering okay but why is
this function taking a user ID can we
not just read the user ID from
authenticator and that's a good question
however authenticator cannot promise
that user ID is actually available it is
an optional use ready okay and if you
want to store it into Firebase using our
storage user info storage you can see
that user ID is not an optional
parameter so the only way we can make
sure that we're passing a non uh
optional user ID to this storage is by
this if statement and since that if
statement is local so we have a user ID
variable that is local to this function
after this check only are we sure that
this user ID is not optional so if you
type user ID you can see that oh it
thinks it's an optional but it isn't
really because we've already checked it
in here okay so we can surely just pass
it to this as a non-optional value you
will see soon so let's go ahead and say
user info storage then we're gonna save
this info save user info okay and let's
add a comment here and we have some
other parameters display name
is authenticator displaying and we also
need to say email is authenticator email
great stuff
now we have this function we can go
inside uh here and just await uh save
user info with that user ID okay
then after this state logging in with
Google we're gonna say state is auth
State and then we say result is the
authentication result and we're not
loading anymore and also the user ID is
that user ID that we read from here good
stuff that was logging in with Google so
we have to have something very similar
for Facebook so I'm just going to take
the login with Google and copy it and
then paste it right here and just call
it blogging with Facebook okay
so let's just double check because
always there is a chance of like when we
copy paste code that we are actually
doing something wrong so state is copied
uh we're setting the loading to true in
here we're going to say authenticator
log in with Facebook instead of Google
okay reading the user ID if it's
successful we do the save user info and
then auth state is being changed great
stuff and that was really all we had to
do with our auth state Notifier so there
isn't much more to do with the Notifier
now what we need to do
is to go ahead and work on the provider
you see we have the Notifier it is
notifying whoever is listening to it of
auth State changes but we actually have
to have a provider that actually changes
to sorry that listens to these changes
all right so let's go ahead and create
that so I'm going to go to view
appearance and get the activity bar
let's go to the Explorer and create our
first state Notifier provider or our
first provider in general in this
application and that is going to be
created inside lip State off
as you can see in here lips stayed off
right click on off and say new file we
create a new folder which is called
providers as you can see on the left
hand side slash auth state
provider.dart okay
and then we're going to go ahead and
write this very simple provider you see
when you're working with riverpot the
providers are actually the easy parts
and usually because you sometimes you
actually not sometimes most of the times
you have some sort of a Notifier you
have some sort of a state Notifier or
some other Notifier that is doing the
heavy job under the hood in your
providers your providers usually are
very simple to write except if you have
some sort of a stream provider which
we're going to write some of those as
well in this project but in this case
that we have a Notifier auth State
Notifier when you're creating the auth
state provider all you have to do really
is just to provide this Notifier to the
outside world so let's say final off
State
provider is a state Notifier provider as
you can see it's going to be Auto
imported from hooks riverpot okay for
this guy you have two generic parameters
one is the Notifier itself Notifier and
and then on Fires object okay so our
Notifier is called auth State Notifier
it's going to be Auto imported and the
object that this auth state Notifier
manages is auth state so let's just type
auth state in here off State it's going
to be Auto importers as well okay we
don't need the ref parameter so let's
completely ignore the ref parameter and
in here just provide an instance of auth
State Notifier to the outside world so
let's just save this file put a comma in
there to get that formatting right as
well that was really it for our provider
so
we didn't have to do so much more with
that okay so we need to now write two
more providers and one provider is for
us to know whether you're logged in or
not so we need to just know a Boolean
flag whether you're logged in or not so
that's going to be called is logged in
provider okay and then we need another
provider which is called user ID
provider and you'll see how we're going
to use these provider providers later in
our application so let's just go ahead
and create these providers and one is
going to be is logged in provider it's
going to be is in lib state
and it's going to be in off uh and in
providers let's go in off inside
notifiers and providers right click on
providers and say new file and we're
going to say is logged in provider.art
okay
and in islogged in provider.dart we're
just going to say final is logged in
provider
provider is now this guy is going to be
because you see this provider is not
going to do any work itself all it's
doing is gonna it it's gonna watch the
off State provider we have the off State
provider we want this guy to listen to
changes that are happening in this auth
state provider and depending on this
author assault it should return a
Boolean okay so we say we just wanted a
plain provider it's going to be coming
from uh hooks riverpod also imported
okay and it managed a valuable or it
returns a valuable in this case we need
the ref okay so let's go ahead and say
ref and we're just going to say ref
watch the auth state provider it's going
to be Auto imported for us and if it's a
funnel auth provider
now you look at auth provider you can
actually see it's the off State in here
okay so we could say auth provider or
let's say off State
and we say and return auth state DOT
result okay should be auth result dot
success let's Auto Import this
okay so this is how we're watching
another provider in our provider okay so
if you have a provider you can easily
get a handle of that provider in another
provider using this ref okay so now that
we have the is logged in provider let's
go ahead and create our user ID provider
which is going to be very similar to
this guy so let's go to the sidebar and
or whatever it's called I think it is
called activity bar okay
and in our lip State off us providers
create a new file called user ID
provider right click new file user ID
provider.art
okay now we're going to say final user
ID provider and provider is and this is
also a provider it's going to be Auto
imported from Hooks riverpod and it
returns an optional user ID okay and it
also needs the ref
and what this guy is going to do is
we're going to also listen to auth State
provider so we'll say ref watch auth
States provider Auto imported okay and
then we just take the user ID out of
this guy that's it really you see how
simple it is so we create providers that
depend on other providers and just give
us new values so if you have a provider
that has many many return values like
auth State provider if you see it's
working with auth state but auth State
itself is a complicated object excuse me
it's a complex object it has auth result
user ID Boolean and
what we want to do is to extract
different values out of this if that is
the situation you're in you probably
have a state Notifier provider and then
you can create small other providers
that cherry pick results or cherry pick
different properties of your bigger
provider which is what we're doing in
here okay so
now that that is done what we could do
to be honest is to go ahead and start
testing this so we have our providers
but we haven't actually tested all this
so if you go into our main door file we
can see that our application that we've
created in here is just a simple
application it has
um it has no provider scope meaning that
we can't work with providers so what we
could do in here is to go and just do a
very simple test
we're gonna go and create like two views
one is our logged out View and the other
one is going to be the logged in View
and in the logged Envy we're going to
just create a simple log out button
pressing the logout button is going to
log you out and then send you to the
previous screen so this is going to be a
a small test that we're gonna do but
this puts the entire authentication into
test so it will ensure that we can
actually see that our notifiers are
working our providers are working the
authenticator is working and etc etc so
if you want to go grab a cup of tea or
coffee and we can continue the course
after that
so what we need to do in here is first
of all we could actually have a look at
the code that we've already written
inside our application you can see the
app is already set up with the Dark
theme and inside there we have a home
page which at the moment is pretty much
actually is our login page so what we
could do is to extract this column with
the text buttons and bring it into its
own widget and just call it the login
page okay or the login View and then we
can have another view which is our
logged in view or the main view we could
call it okay so let's go ahead and
create a separate widget for this so
This column and we take it out all the
way to here and we just extract it let's
see if we can extract this into its own
widget so we say extract widget and
let's just call it
um login if I can spell login view okay
so this is our login view we could just
say constant here and then we so
basically this login view has the
buttons in order for us to be able to
log in and then we're going to have
another view which is going to be our
main view okay so
um I can see in here what we could do
because the the main view is going to
have a log out button okay and the
logout button is going to be placed on
the nav bar which is our app bar however
the app bar at the moment is created
inside this home page so what we could
do is to re change this home page to our
main view so say that this is the main
one you're actually logged in okay so we
say this is that main View
and we say for
when you are already logged in
okay
next thing that we have to do is to
ensure that our application is running
inside the provider scope so let's go in
here and say we wrap this with a widget
wrap with Widget provider scope in here
okay
and the function provider scope isn't
defined of course we have to import
hooks riverpot in here good and it says
we need to use constant here so let's
say const commas commas and remove the
cons from here as well okay so now we
have a provider scope and at this point
I really suggest that you do a hot
restart of your application okay
in this home in here inside our
application we need to go ahead and
create the logic for it returning either
the main View
or the login view so at the moment I can
also see our login view doesn't have a
scaffold so let's go ahead in here and
say this column needs to be wrapped with
a widget which is a scaffold okay and
let's go ahead and create an app bar for
it as well and it doesn't have a child
it has a body and an app bar that we
just call login view on top of it okay
and this one is the main View
let's go ahead and say maybe all right
so we have the main View and the login
view for when you are not logged in all
right and they both have a scaffold and
that's the important part okay what we
need to do then inside this home and
inside this widget right here we are
going to make a decision whether we have
to return the main view to you or we
have to return the login view so the way
to do that is that we we are going to go
and interact with the auth state
provider so auth State provider as you
can see in here okay so we say oh
because this off State provider contains
the state Notifier and which is the off
State Notifier button if I remember it
quickly we also created is login in
provider right so we could actually
listen for is login provider let's go
ahead and actually do that so we can go
inside the main View and oops sorry here
inside our application
and create a consumer so we say a
consumer okay and then this guy has a
builder so by doing that we get access
to the ref because we want to now start
listening for changes that are happening
to our is log name provider so we're
going to say final is logged in and
we're going to say ref watch is logged
in provider okay and that's going to be
Auto imported and you can now see we get
a simple Boolean saying whether we're
logged in or not and
this this at the moment you can see is
giving us a Boolean so we say if is log
n then we return the main view okay just
like that uh const main view else return
a const login view just like that all
right so let's put this to test I'm
going to bring up our simulator I think
it's the iPhone 14 pro so I'm gonna get
rid of this iPhone 14 pro Max that was
at the bottom of the screen because this
is our main application so I'm just
going to save and actually hot restart
our app you can see we have a main View
and a login view so that's a little bit
of a problem that we have to fix let's
go ahead and see what's happening
because I can see the main view itself
is containing the logging view so let's
go and change and actually remove the
body for our main view so you can see is
logged in was true and that is the
reason we got into the main view simply
because we've already logged in with
Google or Facebook or actually both so
what we could do is just to do a little
bit of a test and go into our into the
body of our main View and we could
basically say that yeah we want to have
a button that says log out all right so
let's let's take care of that right now
so we say we have a text button
and unpressed for now it's going to be
empty and then on inside the in in the
child we're just going to say log out
okay
good stuff so we are going to have a
button right here that is gonna allow us
to lock the user out so and what we
should what we should do is just to talk
to talk to the off State provider so in
here what we're going to do is to say
this function is an async function and
we say
um ref
actually let's see if we have a ref we
don't have a ref because this is a
stateless widget okay so let's wrap this
guy inside a consumer to get a ref
because we could either either wrap this
guy inside a consumer or we could change
this to a consumer widget so it doesn't
really make any difference for us at the
moment so let's just wrap this guide
inside a consumer and we say wrap it
with a widget and we say consumer and it
doesn't have a child so let's take the
text button out and just create the
Builder okay and this Builder now has a
ref and then we return the text button
inside this function and a semicolon to
make it all work then we're going to say
ref
and we're gonna get a hold of our off
State providers Notifier so we're gonna
read off State provider dots Notifier
okay and then we're going to say log out
as you can see in here so we're gonna
await on it okay so let me and let's
just first see if this all is working
and if it's working I will explain a
little bit more what is happening with
the entire login and logout process okay
so I think it is really good that we
have a look at how this code is actually
working and I will try to break it down
more because up to this point we've been
so focused with writing the code that we
haven't really stopped for a while to
see how it all connects together okay so
let's press the log out button and I can
actually see it worked so we came back
to
the login View and if you're wondering
who's making that decision it is right
here it is inside our app so the apps
home page is being changed depending on
whether you're logged in or you're
logged out and that is coming from the
provider and the is logged in provider
which itself is reading its state from
the off State provider and comparing the
results with success
so you can see that logic is happening
in here so you don't actually need
navigation between these Pages by simply
changing the home page of your
application you're literally navigating
between different pages okay so let's go
ahead and try to sign in with Google in
here and see if it works we sign in
and I can see right here then things
didn't change so we tried to sign in but
nothing actually changed on the screen
so let's see if we sign it with Facebook
we try to sign it with Facebook and
we're still staying on the same screen
so this is very important so the sign in
bit isn't really working as expected so
we're not getting redirected to where we
should okay so let's have a look in here
and see what is happening
authenticator prefer cons so we can
change that actually and let's have a
look at our results I can see our
results are being set to success so
that's really good the results are
successful but it seems like uh this guy
is not actually getting the results so
it's just reading the result when the
application is being run but it is not
really getting the result when the
application is running so let's log that
out to the console so this guy and we
say is logged in DOT log okay so I'm
gonna hot restart our application boom
and have a look at the screen so it says
yeah we are logged in so let's log out
it gets the value of false then I'm
going to sign in with Google and
like that we can see we get the auth
result success however our consumer
really is not getting any response in
here so our consumer doesn't know
whether things have changed inside the
um inside the is login provider or not
so what we could do in here is to go
ahead and change the way that we're
communicating and this is logged in
using our off State provider instead
okay so let's go ahead and see if we can
if we can actually grab our off State
provider in here so we say refwatch auth
State provider and we have a look at its
result okay and we say the result should
be
authresults.success for us to be
actually this Auto Import off result as
well boom okay so if you're for you to
be logged in you should actually make
sure that your auth result is successful
so I'm going to hot restart the
application I can see we're in the main
View and then we try to log out then we
try to log in with Google and press that
button and we're still here so we
definitely have some problem with how uh
how our application is working and why
we're not actually getting any results
back at this point from um from our
providers so we need to have a look at
that and try to troubleshoot that a
little bit and see if it can actually
get to the bottom of that
and solving this mystery shouldn't
really take us that long by just
reviewing the code that we've written
because we've already had a look at how
our Notifier works and we've seen how
our providers work we don't have to
really test those so much what we could
have a look though at at is what our app
is doing in here so you can see in here
we're watching the is logged in provider
okay and we're deciding which view to
show and this this is completely
bulletproof we can't have done anything
wrong in here but if we continue having
a look at our application you can see in
here we're actually logging out as well
using our off State provider but what
could have gone wrong in here is that
inside our login buttons we're creating
instances of our authenticator directly
and that's that's not really what we
should be doing because what is
happening happening in here is that we
are indeed working directly with a new
instance of authenticator we're
completely bypassing our
um notifiers and providers so this is
like a standalone object that we're just
instantiating in here so this is this is
not going to do what we need to do is
just to talk with our off State
providers Notifier and because that
Notifier is going to allow us to log in
and log out and it will just keep the
results inside the provider so let's go
into into this login View and start
talking with the off State provider in
order to log in the user with Google or
Facebook so let's say we get a an
instance of our provider and that's
using the read function okay because we
want to get a synchronous instance and
we say in here off State providers
Notifier okay because that is the auth
state Notifier and has the login with
Facebook and login with Google
functionalities in here and I can see in
here we're using user ID what it would
have probably been better if we said
authenticator user ID in here as well
um but that doesn't make any difference
it is the same value so don't don't
worry about it so let's go in here and
say we want the Notifier now to log on
in with with Google or Facebook so I can
see that we don't have access to a ref
simply because this is a stateless
widget our login View and it doesn't
really have any access to a widget ref
so either we could wrap this inside a
consumer or we could change this guy to
a consumer widget so let's change it to
a consumer widget and then we have to
add a new parameter in here which is our
widget ref so widget ref we call it ref
and then we can say ref read and then we
say log in with Facebook I believe or
it's Google login with Google all right
so this is going to be our call so in
here we await on that instead okay and
and we don't have to log any results all
right so that's really good and to be
honest with you we don't even have to
await on anything we could just take
this ref in here and place it like this
let's see just like that so we actually
call that function even though it's an
async function we don't have to wait for
it because yeah we're not doing anything
that we have to wait for so
and I mean that there's nothing
happening after pressing this button
that we have to wait for the result of
logging it with Google so let's change
this on press for Facebook as well and
let's go in here and say this is login
with Facebook all right and not as a
function called but you just actually
pass the function reference to your
unpressed okay so let's do that and do a
hot restart of our application so let's
go in here we can see the logout button
and then press that we log out log in
with Google let's go in here and right
there
and we should have now been logged in
and you can now finally see that we're
logging so there's there's a little bit
of a delay and that's fine because it's
doing some work at least and we could
actually confirm that all of this is
working by going into our Firebase
instance so let's bring bring our
application in here previously our
Firebase instance was completely empty
but now if you go to data
let's see Instagram clone uh course here
this collection you can see previously
was empty but our user info storage
should have now kicked in and started
storing this particular user's
information inside the users
table or collection so let's just uh
let's just refresh our application you
can see users is here there is a new
user with a display name of my display
basically email and then a user ID
stored right here okay so it seems like
that part of the application is working
so authentication is working we don't
have to worry about it so much however
if we log out of our application to try
to log in with Facebook you can see
there is a little bit of an error in
here and it says submit for login review
some of the permissions Below have not
been approved for use by Facebook submit
for review now okay so I wonder if you
could go ahead and try to submit those
details for review so let's say
developers.facebook.com
and we go into my apps and let's see if
I can find image sharing course image
sharing vanilla so let's go into image
sharing course
and let's see if we have anything uh
requests
that has to be reviewed so let's see if
we can actually submit this applicant
request permission or Futures you don't
have a current request
let's see if you have to add anything in
here to say that we need the user's name
Etc take a tour not now okay permission
some Futures standard ready to use blah
blah
okay looking for okay this is this seems
fine to me requests
okay what we could do is to go back to
our um Developers
and we have a look at the other
application that we've already set up so
in here
then image sharing vanilla we go in here
data use checkup I can see in here it
says complete and that is probably
something that we need to do into
um data checks so somehow we need to get
into a data check and
um
complete that because here we don't have
any uh requests or a feature setup
either so let's go in here into our
image sharing course so open up your
Facebook application that you set up and
here we're gonna improvise a little bit
because we need to find that particular
error and fix it so let's go in here and
see it it says submit for review for
login review so let's see if I can
actually copy the URL for this guy
becomes your app review request so it
actually comes here that's very
interesting so it comes to this screen
so request history you don't have a
current request before you cross
permissions or Futures read our app
review sample blah blah for okay so it
seems like we actually have to solve the
problem somewhere in here and we're
introducing three new data access levels
that offer you more flexibility standard
access okay Advanced access not now and
that the standard access is what we want
a user's Hometown we want the user we
don't want any of these actually we just
want the email address
so request advanced
return to standard access
to this permission will revert to
standard access that may impact your
app's ability and it's Auto granted
um
actually yeah we don't want any advanced
so
return to standard and email will be
downgraded to standard access to regain
Advanced access you don't need to submit
after okay
and I will provide my password
and then submit
Okay so
uh
okay so if we go back to our dashboard
let's see if our application now has any
problems that we have to uh address it
doesn't seem like it so if you close
this dialog and then say sign in with
Facebook do we still get that error it
seems like we still get this error so
what we need to do really is to maybe
Google is submit for login review so
let's say Facebook uh submit for login
review uh
I sent a request for review how to
submit a Facebook application for review
and uh it says in here request Advanced
access
sent a request for review
okay so it's in
all right interesting so we perhaps have
to go back to that page that we were in
so app review requests
and request permission or futures
and take a tour
actually a lot of things could have been
fixed if we had just taken a tour so
public profile and email are the things
that we need access access to and I
don't actually see anywhere that I can
select them and it says request Advanced
access to request of access is wherever
should you need to make a successful
test API call it may take up to okay but
we're not doing any of that and
filter access level
standard
and get Advanced access you can get
Advanced access to this permission
automatically okay
valid privacy policy or in order to make
okay go to basic settings that's
interesting so let's go to basic
settings and see if we've missed
something in there so terms of service
URL okay so privacy policy URL and I
believe I have privacy policy URL
actually on my website and because if I
have a look at the other application and
that I've already set up for myself and
I have provided a privacy policy and URL
I believe so at least or actually I
haven't and I can see the settings are
pretty much the same thing in here so I
don't really understand why we're
getting this particular problem only in
this application and not in the other
application which is fully working so if
we bring up the fully working
application in here and log out
log out and try to log in with Facebook
maybe we get this error here as well yes
we're actually getting this error in
here so we have to definitely submit our
application for review because
um otherwise we're getting that error so
the question in here is whether we're
gonna actually do that now or let's
Facebook's uh sign in work as it is in
developer mode before we submit our
application for review because
submitting an application for review it
really requires that you saw that you
place in all this information in here
such as terms of service privacy policy
this is pretty much like finalizing your
Facebook application for now we just
need the signing in with Facebook and
since that is working as it should I
think that we can leave it as it is
um exactly as it is without changing
anything so let's not waste more time on
that so
I thought to wrap up the authentication
part of our application by going through
a little bit how things are working okay
because we wrote quite a lot of code but
we didn't actually reflect on how this
code is coming together so let me bring
bring basically things down we've
written I mean when I say what I mean in
here is that we've written things from
the bottom to the top so we've written
like things such as our
constant files we've written things that
keep hold of our um posts uh how do you
say any here models
um when we have the payload I mean
payload
user info payload so we've written
things from the bottom to the top
however it sometimes pays off to
actually explain things from top to
bottom as well so let's do that right
now
you can see what we have in here is a
set of providers okay so providers they
all work with some objects on the hood
some providers such as a plane provider
such as this um
is logged in provider is a very plain
provider on its own
you saw in the previous examples that
you can create a provider that simply
returns just one value it caches that
value and then you can go ahead and
invalidate that provider in order for
that provider to recalculate its value
we haven't talked about invalidating
providers but we're going to see
examples of how to invalidate providers
in this course as well so here we have a
provider is logged in provider its only
job is to return a Boolean but how does
it do that how does it know that you're
logged in or not well
thankfully we have another provider
which is called auth State provider
which returns a an off State object you
can see it actually works with an auth
State we don't have to see the details
of how it works right now and because
we've already actually seen that before
but it's not so relevant to this
provider so as long as you have a
provider which can emit new values you
can watch it inside another provider and
cherry pick results or cherry pick its
properties and compare them with other
properties and return new values and
that's exactly what this is logged in
provider is doing okay so as long as as
long as the auth state provider is
emitting new values and we can actually
get those values and compare them or
maybe just return them directly if we
want to so that's how a provider works
okay and that's how we actually know
that you're logged in or you're a
lookout excuse me
so that's for the islog name provider
but how is the auth state provider
itself working so you can see the auth
state provider is excuse me is itself
very simple it is just one line of code
and it's not even dependent on its ref
when you see code like this using a
riverpod you know that the ref is your
window your provider's window to the
outside world if you see code like this
or if you see ref written like this and
not being used just know that this
provider is not having any dependency to
the outside world what it what that
means is that it itself is
self-contained so it has a stake
Notifier in here as you can see which
we're going to talk about soon more and
that's it really it doesn't do anything
else okay
just like any other providers it has to
have some sort of a backing the is
logged in provider its backing is just a
plain value it's a Boolean being
returned okay that's its backing
internally it's using the off-state
provider uh but yeah that's it's a back
end but it's backing it's just it keeps
a Boolean value but what does this state
Notifier provider keep well
State Notifier provider if you look at
its class definition it has a Notifier
which should be a state Notifier as its
first parameter and that's what we're
doing in here we're saying auth State
Notifier because the auth state Notifier
is in fact extending State Notifier so
that's in the contract that's something
that you and I aren't deciding that's
somewhere in the contract and we just
have to listen to it the auth state
Notifier
itself if you go into it you can see
that it's extending State Notifier
however it keeps an off State and that's
exactly what the contract of State
Notifier provider says it says the first
generic parameter that you give me
should be a state Notifier and it should
have some generic parameter and the
second parameter that you give me should
be that generic parameter to your state
Notifier and that's exactly what we've
done in here we're saying our state
Notifier provider is using auth State
Notifier as it's backing and this guide
keeps hold of objects of type auth State
all right so gluing it all back together
we're just returning the results and
from here which is an instance of our
auth state Notifier now this off State
Notifier is pretty much becoming a
Singleton at this point because our auth
state provider is being created only
once in this entire application and then
it's simply returning an instance of off
State Notifier so anywhere in your
application that you're using the auth
state provider you're using internally
this Notifier okay or you can actually
access the notify that's what I mean by
using the dots Notifier in here okay so
it's becoming a Singleton it's being
created only once and it's being
assigned to this auth state provider now
what is happening internally in here is
that when you watch for instance changes
that are happening to the off State
provider and let's go in here and say
ref watch okay the ref watch
off State provider and we say final
block
if you do this you can then see that
blah becomes an off State that's magical
right because that's the value that this
off-state provider is actually emitting
so the state Notifier provider becomes a
bridge for you to both be able to talk
to the state Notifier object itself
using the dot Notifier property of your
auth state provider or your state
Notifier instances provider uh sorry
estate Notifier providers instance
and it also always returns the auth
state which is the object that is
internal to the Notifier itself if you
watch the provider I know this is all a
lot of big words but just know that when
you create an instance of State Notifier
provider you're not only holding on to a
state Notifier but you're also holding
on to the State of the State Notifier
okay so that was a lot of words but I
think it's sometimes necessary that we
dig into these things and explain the
details of how they work okay so that's
for our providers I think that we're we
have oh we also have the user ID
provider but we haven't used this guy
yet so we could just leave it as it is
all right so let's go back to the state
Notifier provider and then go into the
off State Notifier and talk a little bit
more about how the off State Notifier is
working
you see the core of the off State uh
Notifier sorry the state Notifier
provider is a state Notifier and that's
what we're doing here we're saying all
state Notifier is extending State
modifier how does State notify actually
work internally if you read a source
code it's really just like a stream it's
it's pretty much you being able to
control this the state object that
you're emitting so anytime you set the
state you're actually notifying all the
listeners to this state at the to the
state Notifier and guess what do you
know who this The Listener to the state
Notifier is it is our auth state
provider so auth State provider
this guy is the listener to this state's
Notifier okay so it's really just a
stream you change the state the provider
gets a hold of that new state and then
the UI can read the state everywhere
okay so the state Notifier always has to
start with some state so if you're
saying that you have a state Notifier
subclass and it is holding on to an off
State ensure that you always give it a a
an initial State because if you don't do
that then you need to go ahead in here
and say this state okay and then remove
this
and let's see uh if we create a a
default Constructor for this guy you can
see how it works by default so here
super State sorry
so if you if you do this then your off
State provider auth State provider will
break because you have to now provide a
parameter in here okay so you should say
auth state.unnode all right so this is
not so nice because then always on your
provider is going to be responsible for
uh ex like for
stating the facts to your auth state
Notifier something that the Notifier
itself can take
can take control of so that's why in
here we have a default Constructor with
no arguments and we're calling super
with an unknown off state to begin with
but as soon as a new instance of our odd
State Notifier gets created which is
being created in the provider then we go
ahead and talk to our authenticator and
because the authenticator is the actual
class taking care of the logging in and
logging out remember that okay it's not
the auth state Notifier the off State
Notifier is responsible for talking with
the Authentication later and setting the
states all right because the
authenticator only returns results it
doesn't keep a state you see nowhere in
here are we actually keeping a variable
that knows whether you're logged in or
logged out that is the state that is the
job of your State's Notifier okay so
when you're creating your own providers
at home and just know that you probably
need to make it three levels deep you
probably have to have some sort of an
Authenticator
then you probably need a state Notifier
that keeps hold of the actual state of
authentication using the authenticator
and then you will want to export the
properties of your state Notifier using
various providers okay so three levels
deep keep that in mind
then we have a logout function in here
you can see it's just simply setting the
state to loading and then is logging you
out using Auto indicator and then
returning the result of unknown okay so
or naturally not returning the result is
setting the states to unknown
very important so it's working with
States the one returning the result is
the authenticator right authenticator is
the one actually returning stuff and the
state Notifier is the one keeping the
state
when you log in with Google we are also
we're not only talking with
authenticator but we're also saving your
user information using our little uh
utility class in here which is the user
info storage all right and this user
info storage is talking directly with
Firebase firestore database and as you
saw actually in here
in our let's see in here now we have
users as you can see set up in our
application all right so that's how this
class is working I think we've already
gone through the details of how this
class is working so there's not much to
explain except for the user info payload
which we did a little trick of turning
it into a map view so that we can
serialize it immediately without any
kind of a proxy into our Firebase
firestore okay so that is how our
Notifier is working and then we can just
quickly have a look at the authenticator
which is doing the heavy lifting of
talking with various vendors in here
Google Facebook and Firebase okay so and
Google is owning Firebase so we're
basically talking to two vendors Google
and Facebook okay so log in with
Facebook the whole point of logging in
with Facebook and logging in with Google
is that we're doing Federated logging in
Federated authentication and that means
that we're hooking your various
providers together if you're logging
with the same email okay so if you log
in with Google then we go ahead and
create an oauth credential and sign you
in to Firebase so remember our signing
in is actually being done with Firebase
so Firebase auth is keeping hold of our
authentication at the end however there
are various methods of signing into
Firebase with email address you can sign
in anonymously you can sign up with
credentials and that's what we're doing
if you sign up with credentials you have
to provide auth credentials and our auth
credentials are coming from this guy
Google auth provider in this case Okay
so giving us an oauth credential which
itself is an auth credential we're doing
the same thing for Facebook so we're
logging you in and the thing that is a
little bit special about the Facebook
login is that if you're trying to log
into Facebook with the same email that
you've logged in
with Google then you need to link those
two accounts using Firebase sorry using
yeah Firebase instance current user link
with credential all right
so that's a very important part of our
Federated authentication if you don't do
this you cannot log into Facebook using
the same email that you've logged into
your application before with Google okay
so now that this part is out of the way
we can go ahead finally and start
working with the login and sorry with
the loading in our application so I hope
that the explanations that I provided
with about our authentication process
actually helps you a little bit and it
does help me sometimes to put everything
into perspective and like get a better
understanding of how things are glued
together because sometimes we write code
and we don't reflect back on what we've
actually written and this was one of
those cases we wrote quite a lot of code
I tried to explain everything as we were
going on but sometimes it's very
difficult to explain every single detail
especially in this course because this
is not a like a from the ground flutter
course so I'm assuming that you already
know flutter quite well so I don't
really I can sometimes Miss obvious
things and need explaining and I assume
that you already know them so if but as
as always if you have any questions
about the things that I'm mentioning in
this course even while you're watching
the course you're more than welcome to
join our Discord server and ask your
questions there and I'll provide a link
to the Discord server at the bottom in
the descriptions of this video if you
want to check that out okay
so let's remove this blah from here and
um we're pretty much good to go in here
so what we should do really is to go
ahead and comment our code so let's say
git status and we get add everything
okay
oops and then we say git commit
authentication and it's done
all right and then we get log we have
our first step and then we have
authentication is done as a commit
message so what we need really right now
is to go ahead and take care of our
loading View and loading view is
one of the first graphical components
that we're going to add to our
application
if you remember we have a provider
called is loading actually we haven't
done this loading yet but we have an
auth state that has is loading in it
okay and that's the reason that we have
is loading Boolean property in here
because we're now going to go ahead and
take care of this little beautiful
dialog if you have a look at our
application which is already complete
and if we try to log in with Google
and we say login
right there did you see it I will try to
I will see if I can bring that
screenshot up so we can have a look at
it all right just took a screenshot of
it quickly you can see in here sometimes
things take time in our application if
you're posting a video or if you're for
instance
um
deleting a video or a photo or you're
logging it or logging out things can
take some time as you can see in here as
well like if you sign in with Google
sign in you see here take some time but
we're not showing anything to users so
the user may think that there is some
sort of a weird delay in the app but
they can't explain what it is so that's
why we need to have some sort of a
loading view now this loading view is
going to be created using a special
class or type of class which is called
an overlay meaning that it's not going
to place itself in the widget hierarchy
like many other widgets in our
application except it's going to be
displayed on top of everything at all
times so even if there's a dialogue
displayed in our application such as
just a with a show dialog in flutter
this overlay is going to be displayed on
top of that so we need to go ahead and
create this controller or this type of
component and I've already done this in
or we have already done this in my other
courses it is pretty much the same
loading uh controller and loading
overlay so if you don't want to write
this code because you've already written
it before you can just go ahead and grab
the code from before or you can if you
think this part is boring you can go
into the GitHub repository for this
application or for this course and grab
the loading view or the loading
components there are two files and you
can just grab them from the GitHub
repository but if you want to learn how
to do that at Swap you can just follow
along in this section of the course so
let's keep the screenshot here as a
reference of how this loading view
should actually look like all right and
we can go ahead and start writing this
component okay
so we have you can see for the first
time we have a string that says loading
and this uh sorry if we for the first
time we have a string that needs to be
actually uh stored somewhere in our
application up until this point we've
been inside the main Dart file and we
added some dummy strings like main view
log out Etc and there just have been
hard coded in here okay so we need to
ensure that we don't hard code things
right in our Dart files and like in our
widgets so we need to go ahead and
create a strings file somewhere so and
this will allow you to add international
internationalization and localization to
your application if you want to in the
future we're not going to do
localization in this course because this
course about riverpot so we're not going
to do localization with riverpot really
we're just gonna place our strings
inside a constants file somewhere so
that we can reuse those strings if we
need to okay so let's go ahead and
create this file and we're going to
create it inside the lib
views let's see if we can collapse these
lip and we don't have any views so let's
go ahead and create this file right
click on lib new file and we say views
and Views like that slash components
slash constants slash strings dot Dart
okay now since this is a very very
boring part of the course in that we
have to go ahead and just add like keys
and values into our application and I
think it would be really good if we if
we could simply
if you could simply copy paste this
content so we can create the class by
hand but the content we can copy paste
and I'm going to pause the video for you
so you can have a look at the content
that I'm going to paste or you could
grab this strings.dart file from the
GitHub repository off this course okay
so let's create an immutable class in
here we're going to call it strings and
then we are going to import foundation
and we'll say show immutable immutable
like that and we're going to create a
constant Constructor a private
Constructor for the string class because
we don't want anyone to create an
instance of it so we say cons strings
and a constant private Constructor okay
now we have to paste our strings in here
so I'm going to paste them like at
chunks at a time so like this all right
so you can see we have some strings that
are related to how the user can like and
unlike
contents
in our application so we can go ahead
and have a look at for instance how this
allow likes is create is used in in our
real app so if you go to and the fully
functioning app in here and create a
photo you can see or try to post a photo
and you can see that we have a string
here that says allow likes okay and
that's excuse me and that's where this
is coming from all Alex and then it has
a description it says by allowing likes
user will be able to press the blah blah
and that's the text for that okay and we
also have this allow lights storage key
and you'll see how these are being used
later just know that this part is really
just about when you're creating a new
post and you have some strings displayed
on the screen okay then we have some
assorted other
um contents in our application I'm going
to paste them right here okay
you can see comment is says comment okay
loading person people like this and
these are just some assorted strings
that were we're gonna use in our app and
it's it's a little bit um difficult to
explain where these are being used but
one of the main strings that we're going
to actually need and the reason we
created this strange dark file is this
loading string which if you remember we
had in our loading dialog right here
okay
and strings like this are like you can
say person and people you may be
thinking okay but why why do we have
person and people and the reason behind
it is that when one person likes a photo
we send we say one person like this but
if there's more than one person liking a
photo we say two people like this okay
and that's why we have the string
separate because then we can format
these according to the number of people
who liked a photo all right
so those are some strings as all and
then I'm gonna paste the last chunk of
our strings in here as well you can see
we have delete are you sure you want to
delete this and then delete this you can
see at the end of it there's no string
so because we can have videos and photos
so we can say are you sure you want to
delete this photo are you sure you want
to delete this video etc etc okay and
also we have some strings for the logout
dialog which appears in here so if
you're trying to log out of the
application then we display a dialogue
asking you whether you're sure you want
to do that or not okay so the strings
are now in place we can save this file
and again if you're unsure about whether
you want to type this or not chances are
that you don't so you can go and grab it
from the GitHub repository I'm usually
against copy pasting but when it comes
to boring things like this that keys and
values it's just gonna feel like an
essay if you're sitting at home or
wherever you're watching this course
from and you're just typing all of this
by hand so it's up to you if you want to
go ahead and type it you can pause the
video at any point and go ahead and type
these things that I pasted or if you
don't want to you're more than welcome
to just grab it from the GitHub
repository for this project the link to
which you can find in the descriptions
at the bottom of this screen okay
so doubles are uh strings Dart file okay
so the next thing that we have to do is
to go ahead and create the login the
loading screen controller now what this
controller object is is that uh the way
actually our login screen works is that
if you have a login screen or a login
dialog which which I think actually we
call login screen so let's just keep it
keep calling it login screen if you
already have a login screen
sorry a loading screen if you have a
loading screen displayed on the screen
and already you can try to display
another loading screen and the way our
loading screen logic is going to work is
that it's going to say oh you already
have a loading screen displayed to the
user instead of removing that one and
displaying a new one I'm just gonna
update the existing one with the new
text that you provided so if this is the
loading screen that you're displaying to
the user that says loading and then all
of a sudden you want to display another
loading screen that says please wait a
second this guy is not going to
disappear and appear again it's just
gonna stay on the screen and its text is
going to change okay so for that we need
some sort of a controller object some
object that keeps hold of this
transmission of new data to this
existing loading screen okay so let's go
ahead and create that controller object
and as as soon as we're done creating
controller object and we start
implementing the actual loading screen
you'll understand more how the
controller is actually useful okay so
let's go ahead and create the controller
object so if we go into lib and we see
we have views and we have components
that's really good inside components
we're going to create a new folder
called loading and then a new file
called loading screen controller so I'm
going to right click on components in
here and say new file and I'm going to
say loading slash loading screen
controller dot Dart okay and then we're
going to get rid of that sidebar right
there and to be honest with you you
could make it a little bit less
cluttered by removing the activity bar
as well so Focus completely on the
content itself all right let's go ahead
and create an immutable class in here
which we're going to call loading screen
controller so immutable this this should
now be very easy for you because we've
done this many times before loading
screen
control okay
and let's go and import Foundation like
that and then we'll say show immutable
and then
what we need to do in here is to Define
two functions one function is
for the loading screen to be able to get
closed and the other one is for to get
updated with new text okay and again
don't worry if this is sounding a little
bit abstract to you right now because it
kind of is sometimes I myself get a
little bit like question questiony when
I look at this I question like hmm what
is this doing and then I look at my own
implementation and then I understand the
reasoning behind it so if this sounding
a little bit abstract don't worry I'm
going to try to explain it a lot more
soon so let's go ahead and create a
function definition we call it type def
yeah close floating screen and this is a
function basically
we say it is a Boolean function that is
a function that returns a Boolean okay
and we typed into a type definition and
we call it update loading screen
and this guy also returns a Boolean it
is a function that takes a string
like that okay so this controller will
give us instances of this so we say
Final close loading screen close and we
say final uh update and that is update
now if we just create a constant
Constructor for this guy so we say const
okay required
and required
curly brackets and comma Ender so we
have our loading screen controller so
what's going to happen now is that we're
going to go ahead and create a component
called loading screen and this loading
screen is when I say component I mean
just say simple class
and this learning screen is going to be
a Singleton in our entire application
just to indicate that we don't have
multiple uploading screens there's there
should only be one really okay now some
people like Singleton some people don't
and
um I'm I from my experience Singletons
are useful but you shouldn't overdo them
so this loading screen class that we're
going to create is going to hold on to a
loading screen controller and an
optional value of loading screen
controller and once you ask this loading
screen a class to display a loading
screen then it's going to create one and
then it's going to create an instance of
loading screen controller and inside
that instance is gonna then have the
ability to close and update the existing
one once the loading screen is dismissed
it's gonna set this instance of loading
screen controller to null so that it
knows that there are no existing loading
screens on the screen to update or close
you'll see it soon actually it will make
a lot more sense in okay so let's go to
appearance and view the activity bar
then we're going to go in here inside
this loading folder and we're going to
right click on it and say loading if I
can spell it loading screen dot Dart
okay so we can go ahead and start
writing our loading screen so I'm going
to get rid of the activity bar again
okay
so let's say class loading screen like
that and in here we're going to create a
Singleton so let's create a private
Constructor we say loading screen
and just like that and we call it shared
instance
okay
so this is a private Constructor then in
order to create a a Singleton out of our
loading screen we have to do two things
we go ahead and Define a private static
or a static final uh private property so
we say final static final
and loading screen
I'm going to call it shared okay like
this which calls the private uh
Constructor and then we're going to
expose this private shared static final
property using a factory Constructor so
we say Factory loading
screen
dot instance
and then we say shared like that okay so
now our loading screen has a as has a
factory Constructor called instance
which always returns this shared static
funnel and property which then delegates
to the shared instance so we just have
really one instance of our loading
screen in the entire application this
class is not defined as immutable simply
because it can't be
because it needs to keep hold of a
variable hold uh it needs to keep hold
of a variable call controller so we say
loading screen controller let's import
it automatically and then we say
controller like this and we make it
private of course okay and you could
either make it private or not it's
completely up to you
so what we need then is to create a
function called show and then another
function called hide okay so let's go
ahead and create them so we say void
show
and this uh show has a required property
required named property it needs a build
context which is going to be
autoimporter I believe from Material now
I would call it context and then we say
string text is strings
dots loading okay so the text by default
is loading all right so this the
implementation we're going to do it soon
but for now we just keep it like this
because this function is neat is going
to need to delegate its work to another
internal function all right which we
haven't written yet
then let's go to uh and this uh to do
let's go and create the hide function so
we say hide all right and what this guy
has to do is to go to the controller and
let's see controller
we ask it to close Okay you see now
while we're using the controller with
two functions inside it because we're
delegating those tasks to the controller
and then we set the controller to null
like this oops all right
then what we need to do is to create the
actual meatiest part of this code which
is to create a loading screen controller
okay so we say we have a function that
creates a loading screen controller and
we call it show overlay all right this
show overlay has two required Properties
or parameters we say required build
context
and then let's see if you could complete
it for me
so that is that let's see what I
actually miss in here actually a class
member and a Linux screen it finishes
right there
try please let's go inside a classroom
oh yeah that shouldn't exist there and
um the text We're Not Gonna provide it
we're actually going to make it required
uh properly in here okay
so we have these two things our job here
is to create an overlay so
however we want to ensure that our
overlay can continuously get updates of
new texts so if anyone calls the
controller's update function then we can
actually update our overlay so we kind
of need to work with some sort of a
stream okay so let's create a stream
controller so we say final text control
and text controller is a stream
controller off string okay
and we have to import async I believe in
order to get access to stream controller
good stuff
so that's our stream controller then
what we're going to do is to say text
controller
text controller add and we add the
initial text to our text controller so
our stream is initializing itself or
it's starting up with the text as its
default string okay
then what we're going to do is to use
overlay apis so let's say final state is
overlay over I believe we said overlay
dot off context Okay then if we cannot
get the overlay state in here you can
see this is an overlay State object
which is optional so we say if state is
null then we just return
okay
so to be honest with you we could
actually do this first so we could say
the state is checked first and then the
text controller is being created all
right
because there is no point of creating a
stream controller if we're just
returning null if the overlay State
cannot be found all right using this
state object then we can actually create
our overlay and we can size our overlay
as you'll soon see so what we need to do
in order to be able to get a proper size
for this overlay like get the width and
height properly we need to go ahead and
grab our render box so we say final
render box
render box is equal to uh actually yeah
this is a good suggestion from GitHub
co-pilot this is exactly what I want to
write then we get the size we say render
box dots
renderer box.size okay so using this
size then we can proportionally size the
width and height of our loading screen
as well all right now we need to create
an overlay so we say final
overlay is an overlay entry so if you
haven't done this before this is how you
easily create an overlay okay
and the Builder it I believe it just
takes a context and you need to create
your overlay in here okay so let's
create a material uh instance return
material
then for the uh color where which is
this color you see it it dims the entire
screen when this loading screen is
displayed so we need to create a
material that covers the entire screen
and material and widget and set its
color to a very dark color basically so
we say color is colors dot black with
Alpha and we say 150 out of I think 255
is
yes it's 255. it's a dark black which is
transparent okay
so that's the color then at the so it's
child is going to be a center
okay and then the center has itself a
child which is going to be a container
so there's lots of stuff happening in
here okay so let's go into the container
and then start
um basically implementing the container
and this container is this white box so
it needs to have some proper size it
needs to have a collar etc etc and it
has to have rounded edges okay let's go
ahead and configure its constraints
because the constraints of this
container need to be proportional to the
screen and the screen size is right here
okay because we got it from our render
box so let's go ahead and say
constraints of our container are going
to be box constraints okay and our Max
width is going to be size width times
zero eight Max height is also zero eight
but we're also going to say a minimum
width of our size width size width times
half okay so we at least take half of
the screen we at most take the half
sorry we at at least take half the width
of the screen
most take 80 of the width of the screen
and at most take 80 off the height of
the screen so our loading screen is
never going to be bigger than pretty
much like this kind of let's see kind of
this
area Okay so because we don't want the
loading screen to be too big depending
on the content that you're providing to
it but since our loading screen is
configured with a text it would be
Madness if someone provided you with a
complete alarm ipsum to place inside
your loading screen so we're not
adjusting for that kind of a math
scenario okay
so we have our box constraints let's go
ahead and create the decoration to make
this a circular white container so we
say decoration and box decoration
okay and let's see if I actually could
suggest the code to me the way I want to
write yeah that's exactly one or what
I've written in my other application as
well so
colors white good and it is a it has a
circular border with a radius of 10
points that's really good
now for the child we're going to create
padding okay inside the padding then
we're going to have a single child
scroll view because if the contents of
your
um of your uh loading screen is going to
be too big to fit into the 80 of the
width on the Highlight screen then we're
going to create a single child chip
single child uh loading sorry scroll
here so let's go in this child and say
the child is actually a column to start
with and then we're going to wrap this
column inside a single child scroll view
wrap with Widget
single child scroll View and then wrap
this guy with padding okay
so this is the easiest way to actually
create this whole hierarchy all right
now the main axis size of our column
because the column is going to be the
one that includes this loaning indicator
and the text we need to ensure that its
main axis size is minimum otherwise
column by default always takes the
entire height of its parent and its
parent is a scroll view which also takes
the entire height padding and then that
is placed inside material which also
takes the entire height so you need to
ensure that you're minimizing the size
of your contents okay and you do that
through the main axis size and we say
main axis size
size of minimum all right
good stuff then we are going to align
all the components on at the center so
we say main axis alignment and that will
be main axis alignment off center all
right then for children we're going to
go ahead and add some components in here
the first one is going to be our um size
box you can see that there is a little
bit of a spacing up there so we say size
box
and its height is going to be 10 all
right
after the size box we're going to create
a circular circular progress indicator
so
a const of circular
progress indicator
like that
and oh child is undefined children
okay and then we're gonna go and create
another size box to create some spacing
between the circle progress indicator
and the text in here okay
and then right after this size box we're
going to go and create a stream Builder
and the string Builder is going to
create our label internally and it's
going to listen to this stream
controller so whenever the text is
updated the text of our overlay is also
going to be updated so let's go ahead
and say stream Builder
and it listens to Strings okay its
stream is our um text control
dot string you can see in here okay and
then we have to create a parameter which
I believe is the Builder Okay the
builder takes the snapshot all right
then we know that snapshot includes
strings all right then we say if
snapshot has data
okay then we're going to go ahead and
create our text and otherwise we're
going to return a container in here just
an empty container okay and we can't
make these cons right strange
okay then now that we have the data then
we can go and say return a text
and that text component is pretty much
going to be the one that we're
displaying in here as you can see okay
so this text is going to have the
snapshot require data as its actual text
and style is going to be theme of
context
and then we're going to say this theme
data
oops a theme
data actually we don't have that we I
think we have text theme that's what I
want a text theme and body medium
and we make it black so we say copy with
and we say the color should be
colors.black all right just like that
and a comma and like that so that part
is also done so now we have our stream
Builder and all the warnings have gone
away all right
after this overlay entry we have to go
ahead and actually create because you
see we've now created an overlay entry
in here which is this guy we need to go
ahead and insert it into our state which
is somewhere here
without that our overlay will not be
displayed to the user so let's go ahead
and say State insert and then we insert
our overlay in here now the magic is
going to happen because we need to
return an overlay SRA loading screen
controller so this is where the magic
happens and this is the turning point
where you'll definitely get why we're
using or why we even create a loading
screen controller so let's say return
loading screen controller and then for
the closing we need to give it a
function right so we control what goes
into the loading screen controller so
this is going to be a function
and in the function we say text control
Dot close you see we got control now
over the entire flow we create a loading
screen controller which controls then
how things work when you call close or
update on it since we have access to the
text controller and the overlay State
and the overlay in this function in the
show and what do we call a show overlay
function that is where we create these
functions and pass them to the loading
screen controller so it can be
self-contained okay then we remove the
overlay remove
and then we return true so we say yeah
it was successful
and then the update function is going to
be it's going to take a text you can see
in here okay then we just pass that text
so our text control
like that and we return true as well
okay and you'll see also why we're
returning true because you may be asking
yourself well if you're always returning
true what's the point of this the point
of this you'll see soon is going to be
inside the implementation of our show
function
because if our show function can grab a
hold of our controller and update its
text with this text then we will get a
True Value however if loading screen is
null and it doesn't have
um basically if it's not it doesn't have
the update function then we're not going
to get the value of true back then we
know that we have to create a new
overlay okay so we say if controller
dot uh oops controller
update with the text
or the value of false
if we could do that then we just return
okay otherwise
we are going to create a new controller
so we say control
is show overlay and the context and text
are going to be passed right here that's
really good
okay that was that was quite a lot of
coding that we have to do but I hope
that it makes sense now so what we could
do is to go ahead and actually test this
out a little bit okay so we could go
inside our application somewhere inside
for instance our
and where should we do that let's say
that as soon as we land on the main view
okay uh we could go ahead and actually
show our loading screen to the user
because at the moment let's actually run
our app we say select device
and run our application the main view is
for when you're logged in so it's a
little bit of a dumb place to be honest
with you to place a loading screen but
it's better than nothing I mean we just
want to test it really okay
so inside this build function as soon as
we land on the main view we could go
ahead and display our loading screen so
we could say loading screen Dot uh
loading screen I believe autoimported
dot instance and then we say show
or
what do we call it instance oh it's a
function and then we say show and the
context is right there and the text we
could say hello world
okay just like that you haven't read yet
saved this file so the way our
application is going to run now is not
going to have the loading screen it's
just going to run normally until we do a
save then we're going to see the loading
screen so let's see how long this xcode
build is going to take you never know
really
yeah
it's still running xcode build and here
it says xcodevelop has finished
so you don't really know what to expect
from xcode sometimes but
let's just uh wait for this process to
finish and as soon as I said that I can
see that it is finished so let's log out
all right and then I'm gonna save our
main Dart file so hopefully the loading
stuff is now placed right here and it
can actually get executed so let's sign
it with Google
signing with Google and now as soon as
we go to the loading screen we should
have seen our uh sorry SMS we go into
the main view we should have seen our
loading screen but we didn't so let's
see what happening here and oh it
couldn't find a render box in Typecast
so this context that we provided in here
we couldn't actually find a render box
in here okay so that was that was a bad
point in displaying this loading screen
so what we could do is to go in here
inside this text button unpress instead
of logging out we could just show our
loading screen to see if things work
boom now we can see our loading screen
it's looking really horrible so
definitely we've messed up something in
here and so either the text is not
displaying or the container is not
sizing itself properly so we could go
ahead and see what we've messed up in
there so let's open our loading screen
Dart file
excuse me
and have a look at the code that we've
written so we have some minimum width in
here okay and we have a Max width and
Max height as well
and we have padding which is equal to
eight we could change it to 16 and see
how it looks like
it doesn't look any different now but we
could hot restart the application and
say log out
and now I don't actually see the
contents and that's fine it's simply
because we've probably messed up
something in here okay so we have a size
box height 10 circular progress
indicator size box that's all good
and then return a container uh container
Center
and and we place all of this I believe
inside a container as well Center and we
have a container
summer we've also messed up the commas
so let's fix the commander to get the
formatting right that's not going to
really change anything about this and
the loading screen itself so somewhere
perhaps the size is incorrect I mean
that's the that's my first guess
uh with oh Max Heights no this is fine I
thought I found something but this this
seems fine to me
and uh the text seems to be fine as well
so I don't think we've done really
anything wrong in there it it could
simply be that we've uh we have a
problem with this size so uh I'm gonna
just say in here I I'm gonna add the log
function in here log
and then I'm just gonna log our size in
here so I'm going to say size lock okay
how to restart the application let's go
in here and bring up the output and
let's just log out and I can see
actually the size is incorrect so it
says 64 to 48 and that is really
incorrect because that's that's pretty
much yeah that's just completely wrong
so what we need is to uh
find a render object which is our render
box but we need to ensure that it is the
correct size so we need to ensure that
the context that is being passed in here
has the correct
context so it has the correct render box
that's that's what I'm trying to say and
the issue here it could be that this
context that is coming from the consumer
is really not the context that should be
available inside our applications build
function all right so we need to grab
this context and not this one so if you
have a look at this context we can see
that it's not being used so I'm just
gonna ignore that one and use the build
context that is coming into our main
view so I'm going to hot restart the
application let's see if that works and
now I can see that our loading view is
this way correctly so this is something
that can happen while you're developing
your flutter applications you just need
to know how build contexts work really
inside any app so in this case we need
to ignore the context that's coming to
the consumer because it doesn't have the
render box that we were looking for so
that was it really and what we could do
now we know that our loading screen is
displayed correctly okay and so we don't
have to
and do so much more we know that I mean
the hiding is gonna work the changing of
the text is also going to work as
expected so we don't have to test so
much more let's go ahead and revert the
change that we made and we can also go
ahead and remove the slowing screen uh
from here all right actually let's
remove it like that good stuff so we
pretty much reverted our changes that we
made to the main Dart file and you also
have some
unused Imports in here which we could
remove as well and the loading screen I
think we added a login here which we
can't remove now as well so let's remove
that
okay good stuff so uh what we can do now
is since we're done with the loading we
can go ahead and commit our changes so
I'm gonna bring up the terminal and say
get status have a look at our status we
change the main Dart file and we've
added some file files to live views so
again add all and you'll see that we've
added a thing
two files in there right
three files actually the Springs as well
loading screen loading screen controller
and the streams let's just commit them
and we say git commit loading screen
and then we can just oh we can't push
now because we don't have a remote so
that's okay as long as we're committing
these and if you're watching this at
home or wherever you're watching this
from and you have a GitHub repository
that you can uh set as the remote go
ahead and do that please so that you can
push your changes as well okay so that
was with this part of the application
with the loading screen and the next
thing that we're gonna do is to go ahead
and create a loading screen provider or
a loading provider actually so this
loading provider what it's going to do
is gonna look at different components
inside our application as the app grows
and whenever these components say that
now they're loading and then it's gonna
show the loading screen to the user and
in that way we're going to have a
centralized Logic for displaying and
removing a loading screen from from the
user's screen basically so go grab a cup
of tea or coffee if you want to and
let's continue after that so we're we've
left our application if you remember is
where we created or actually finished
creating the loading screen and the
loading screen controller what we need
to do now is to go ahead and create a
provider that can provide a Boolean
value to our entire application stating
whether any component in the application
is loading or Not So the plan is to have
various providers inside the application
such as when you're uploading a video or
uploading a photo deleting a post or
making a comment all of these different
components are going to be various
providers and as they're doing their
jobs they're going to provide us with a
Boolean value telling us whether they're
actually in the process of loaning or
not
then we're gonna culminate and mix all
these Boolean values inside one provider
which is going to watch all these
different other providers and then
combine those Boolean values into just
one knowing whether the application or
any component inside the application is
at the moment loading or not so we need
to basically create a new provider which
is going to allow us to understand that
and we're gonna call it is loading
provider so let's go in here and let's
see if we can bring the activity bar
back this is a never-ending story to
hide and show the activity bar so if we
collapse all these folders we can see we
have a lib and then we have state and in
state you can see we have constant post
user info let's go ahead and create a
new folder inside State and we call it
providers and in there we're going to
create a new file called is loading
provider so right click on State and say
providers let me bring it up a little
bit oops where did it go
oh it just disappeared so state right
click new file providers slash
is loading provider.dart okay and then
we're gonna write our file basically in
here so this is loading provider is
going to be a very simple file to begin
with it's just going to be a simple
provider and all it's going to do at the
moment is just to have a look at auth
State provider and if off State provider
is loading then it is going to return
the the value of true to us otherwise
it's going to return the value of false
so as I said the goal is to combine
multiple providers so we have to
structure this provider in a way that it
can listen to multiple providers so
let's go ahead and say final is loading
the provider
and we're going to create a provider and
Auto Import it from hooks riverpot we
need the ref because we're going to
watch various other providers and this
guy is actually going to return a
Boolean value to us okay so let's go
ahead and say final off state is ref
watch and we're gonna watch our off
State provider so off State provider and
we need to import this okay for it to
work then for now we're just going to
say return off State it is loading okay
however here we're then going to mix
other providers and some other provider
blah blah Etc okay but for now this is
the only thing we're going to do in here
is loading provider okay so and what we
can do though is to go ahead and add
this loading to our applications main
file because loading is something that
we are going to need and it's there's no
going around it I mean we we need
loading even right now we don't have to
wait until our application complete
before we add loading to our app so
let's go in here remove this log we
don't need the logging okay clean up a
little bit in the main file
let's go into our app and you can see
here we have a consumer and this is
really good this is exactly what we need
okay inside the Builder for the consumer
in the app stateless widget and to be
honest with you actually we can change
this app perhaps to a consumer widget so
we get a ref at a higher level as well
if we want to okay
but maybe we can get away with the way
we have it as well I think this ref will
suffice perhaps okay so what we are
gonna do in inside our app inside the
consumer we're gonna set up just one
place in the entire application where
loading is going to happen so the
listening to the Loading flag is going
to happen here and the display of the
loading screen is going to happen here
as well so we don't have to provide
loading and view in any other widget
inside our application this is the only
place is that's going to globally take
care of displaying the loading screen so
let's go ahead and we need to say ref
now here we are going to listen excuse
me we're going to listen to the is
loading provider now this is the first
time we're going to do the listen call
using our ref and you may be asking but
what is the difference between listen
and watch well when you're watching
you're basically getting a value and if
you uh if you're a provider in here you
can say is a login provider is returning
just a simple bull however you can be
watching a provider so let's say ref
watch and we say auth State provider
okay then we say final value and then
you can see your value is uh is the off
State okay so every time your um the
changes happen to this provider then you
get a new value provided back to you
however sometimes you're you may be
watching and off State provider's
Notifier okay and then you can see your
value is your off State Notifier any
changes that happen to that Notifier
then your watch uh so the the widget
that you're watching your provider under
will get rebuilt in this case the
consumer because you're using the ref of
the consumer to watch the values that
are happening to this provider the
difference between watch and listen is
that when you're watching sometimes you
will get an async value and we'll
actually talk about that soon and the
the whole point of watch is usually that
you listen to changes to provider and
then you will have to provide a new
widget to be displayed to the user
however the point of listening is for it
basically is not going to
rebuild your widget when changes occur
you're actually going to get a call back
saying what do you want to do with it
you don't necessarily have to display a
new widget so watching just keeping in
mind is that if you want to rebuild your
widgets do a watch so using the ref that
you're using to watch the closest
component that brings you that ref is
going to be rebuilt when a new value is
provided by any of the providers that
you're watching however will listen that
is not the case nothing is going to get
rebuilt you're just going to get the
ability to do something such as navigate
to a new screen or maybe show a loading
screen or whatever you want so let's go
ahead in here and take whoops and take
care of displaying a loading screen so
let's say
take care of displaying the loading
screen
and then we're going to say ref listen
and we're going to say is loading
provider and it's going to be Auto
imported okay
um and we could actually say listen and
this is listening to a bull value okay
and now you'll see that there is a
parameter in here let's go in here
and you can see it it provides you with
the previous value and the next value we
can ignore the previous value because we
don't care about how loading was before
it changed we actually want just this
parameter and we're going to call it is
loading okay so we say if is loading
then we're going to display our loading
screen so we say loading screen
and Dot instance
dot uh show all right and then we're
gonna use our context in here otherwise
if we're not loading we're going to say
loading screen instance hide all right
so that was really it so now we have a
loading provider that will provide us
with new values and whenever off States
uh basically State changes or obviously
providers State changes and then we
display or hide the loading screen so
there's not much more to it to be honest
and we can actually test this let's see
if we have a loading screen somewhere
which we can remove we don't have it
actually so let's have this right now
I'm just gonna hot restart the
application let's bring up the simulator
and then I'm going to log out you just
saw the loading screen just quickly
didn't you I actually saw it so let's
say sign in with Google you just see the
loading screen in the background
and I can actually see this right here
okay and then when you log out it's
displayed also very quickly but then it
disappears so it's just displayed right
now actually it's in the background uh
so it's right there so seems like our
loading is actually working and we're
not getting any errors printed to the
screen meaning that our widgets and
context are all
um correctly basically installed so
we're not dependent on any component
that's not that seems to be working but
it's actually throwing a lot of errors
in the debug console
okay good stuff let's go now now that
we've done this let's go and uh commit
these changes let's say git status oops
get status and then get at all okay and
then we're gonna say git commits uh
loading screen
loading screen like that and then we're
gonna oh I just keep forgetting that we
don't have a remote so I don't push I
don't need to push but if you if you do
have a remote you can just get push uh
in here okay
good stuff now we have our loading
provider and we're displaying our
loading screen
now we need to be working on our actual
login view which is this view I'll bring
up the simulator so you can see how it
should look like let's go in here and
log out so we're now going to take our
the first view that user see when they
enter our application which is this one
so the screen has a I believe three
reusable or three or four reusable
components one is this little component
here which is a divider it may not be
very obvious on the screen but you can
see it perhaps now it's a divider that
is being reused also here down here
it also has reusable components for this
Facebook button and Google button so
they're the their own components okay
and also at the bottom of the screen
excuse me we have
a reusable component for displaying Rich
text to the user and this component is
also going to be able to handle tapping
on URLs so whenever a user Taps on any
of the URLs actually to begin with this
component is also allowed to or able to
display links and once the user Taps on
any of those links then we're going to
get the ability to open that link in a
in an external browser so tapping on
Facebook will take you directly to
Facebook's
um registration page and tapping on the
Google link in here will take you
directly to Google's registration page
which actually looks absolutely gorgeous
so it's Facebook that has to perhaps
work a little bit under mobile
registration page so this is the this is
the view that we're going to be working
on and but we're gonna start with taking
care of this particular Rich text
component that's displayed at the bottom
of the screen okay so let's do some
reshuffling in here so let me me close
these tabs and we're going to start with
a component that we're going to call
link text okay so this link text
is is going to basically be dependent
actually on another component which is
called base text so perhaps we could
start with base text okay so base State
text and it's just a storage class it is
an immutable storage class that contains
a text and a text style and you can
either initialize the base text with a
plain text
or you could initialize it with in any
link so you could say here's a link if
this is as text and call this callback
when this link is tapped okay so all it
does really is that it keeps hold of
um it keeps hold of the data that we
want to display so it doesn't really do
anything itself okay so let's go ahead
in here and create this component and
we're going to call it a base text so
let's go and actually see it let me see
if we should start with base text or we
should yeah I think we should start with
base text now that would be good so so
let's go to lip views
excuse me
lit views
and in here we have components already
and we have constants unloading inside
this let's go and create a new folder
and we call it rich text okay so right
click on components and then we say new
file and we say Rich underscore text and
then a new file called base underscore
text.dart
like that okay
like this and now we can actually I'm
going to keep the activity bar because
we're gonna come back to it soon so
let's create an immutable class in here
and we say Mutual class base text okay
uh base text and as I said base text is
just going to be storage space so it
doesn't really have any logic inside of
the show emu tool
then what it has is it has two
properties one is text and the other one
is a style so say final string text and
an optional style as you can see in here
it's being provided to me simply because
I've already written this code before so
text time needs to I think import
material so let's just import I think we
could import material yeah and but we
don't need the entire material let's say
show text style okay we need colors and
and we also need text decoration these
are only three components that we're
going to need from Material okay so we
don't have to we don't have to pollute
our Dart file with lots of material
related classes and types if the only
things we need are just these three
types of material package okay so now
that we have these let's go ahead and
create a Constructor and let's make this
a required property and and this style
is not a required property simply
because it's an optional value and
make this a constant Constructor as well
okay so we are going to have two Factory
Constructors on this base text and one
of them is going to be to allow base
text to be initialized with plain text
and a default textile so let's go and
add that and the other one is going to
be to initialize Basics with a link
which we're gonna write a little bit
later so let's say Factory
Factory basetext dot plane okay and what
do we need for displaying a plain text
well we need a text and a style so let's
say required
required string text and then we need a
text style which is not a required
property and we say style and that's
equal to const text Style by default
like this okay and in here we're simply
going to initialize a base text as you
can see in here okay so nothing special
happening in here
however you can also create a base takes
the text that is a link and that link is
going to have a tap a callback which is
of type avoid callback
and in order to do that we have to
create a separate class for our base
text so it's going to be a separate
class that depends on base text and
however it has other properties so let's
go inside our activity indicator or
sorry our activity bar I think it's
called let's see View
activity bar yes and primary sidebar I'm
not sure about primary sart sidebar okay
that was this sidebar which is our
Explorer at the moment so inside this
Rich Text folder in here let's go ahead
and create a new file called link text
okay new file and we call it link oops I
don't know where I'm typing
new file link
text.dart okay and this link text is
going to be an immutable immutable class
link text and this guy is going to
extend bass text okay so that's Auto
imported as well let's import foundation
and say show immutable to get rid of all
these errors okay
now this guy also needs to provide some
values to Super and that's why we're
getting this error at the moment we
don't have a default Constructor that
gives all the required properties to its
superclass which are text and style okay
so let's go and create a Constructor in
here we say and actually before we do
that we need one more property for link
text than base text has and Link text
needs to know which void callback to
call when that link is actually tapped
all right so let's go ahead and say
final void callback and this is just a
type that is already defined we don't
have to Define this again okay untapped
like this and you can see actually void
call that we probably have to import it
from Foundation uh yes in here we should
say void callback so this is a just a
simple type def type def I believe which
yeah is a void function that has no
parameters okay so now we have that
let's go ahead and create a constant
Constructor so we say const and Link
text
and what we need from you is to provide
the supers text okay you say super has a
text that is a required property and we
Sorry a required parameter and we we
need to actually get that and also we
need the supers style but also we need
this untapped to be provided so we say
super uh required super text okay then
we need a required parameter this
untapped and also we need Super dot
style because super style is not a
required property okay
so we got link text now working and also
we have our base text so what we can do
is to go and implement this Rich Text
widget so a rich text widget is going to
be working with a series of Base texts
okay actually colors I can see oh we
forgot this
so sorry before we continue with the
rich text widget we need to complete the
base text class simply because we forgot
to add a factory Constructor that
creates a link as well we have one that
creates a plain text but we forgot to
create one that creates a link so let's
say Factory
Factory actually let me see if I can
copy this code from here okay so let's
copy that code and then we're going to
change the name of plane and we're going
to call it link and we have another
property in here we say required void
callback untapped okay and
um for the text style this is going to
be the fun thing we know that every link
has to be rendered by default like this
it has to be kind of like blue and it
also has to have an underline so let's
add that to the text style so we say a
constant textile that has the color of
blue okay and also it has a decoration
with text decoration underline so that's
that is a cool trick okay let's go ahead
and import void call back in here so we
get rid of this error that was appearing
here saying that base Tech doesn't have
an understanding of the Void callback
then inside here instead of creating a
base text we say this is a link text
okay
and we go in here and we say untapped is
untapped now let's say link text and we
have to import this as well package
Instagram okay so this is great and this
is I mean this is uh um for those of you
who are familiar with object oriented
programming this is nothing special
we're just creating a base class that
can create a factory Constructor that
returns an instance of one of its
subclasses you see this guy seems like
it's creating a base text and and the
Constructor is called link however
internally is creating a link text and
this is just a very common pattern an
object-oriented programming Apple calls
a class cloth screen and it is the
ability for a sub of a super class to
return an instance of its subclass in
one of its Constructors and that
subclass can add more functionality to
the super class okay so that's exactly
what we've done link text is extending
base text however it has a new property
called untapped and the Constructor of
Basics called link can create an
instance of Link text and just provide
this new parameter to it because base
text itself doesn't have that parameter
okay so class clustering is one of its
names all right
good stuff now that we have this we can
go ahead and work on our Rich Text
widget which is this guy in here so by
giving it a series of Base texts we're
gonna ask it to render those base texts
and by displaying the links and just
normal text with their Styles so let's
go ahead and do that now so we're gonna
go into
um our activity bar in here inside the
rich text folder and we're then going to
create a new widget and we're going to
call it a rich text widget so new file
Rich Text widget dot Dart okay
so right now we can actually get rid of
our activity bar because we don't need
it so we can focus more on the code okay
good stuff so this guy is going to be a
stateless widget so let's say STL in
Visual Studio code flutter stateless
widget and we call it rich text widget
like that okay
now this uh
stateless widget is going to have two
properties one is going to be an eye
trouble of Fate based text okay so we
say I final I turbo up base text and
it's going to be Auto imported and we
call it texts so this is like an array
or list or I treble of text to render
for this guy okay and then there's
another property in here which we're
going to call at style for all so you
can see in here that's all of these
links I mean regardless of whether
they're links or just plain text they
have the same font size and they don't
have the same color but they have at
least the same font size so this Rich
Text widget is going to have a text
style property an optional one that it
is able to apply to all texts that it
renders and this will give us the
ability to style every base text at once
so we don't have to create base text
with their own Styles all the time we
can just create base text with no style
within null style but in here provide
one style that gets applied to every
base text okay so let's go ahead and add
that and you will soon see how it
actually works so final textile text
style optional okay and we say style for
all
and I think we have to import textile
from Material if I'm not mistaken yeah
good
uh or actually material was already
imported container flutter SRC which is
container we don't need all of these
okay
um so we just need material and also
base text import at the moment all right
we need to also import link text but
we're going to take care of that soon so
so rich text widget let's add our
parameters to uh to the Constructor and
the texts are is a required parameter
I'm going to bring it a little bit here
actually because it's a tiny bit more
important than style for all so we could
also change it in here so text this
first doesn't really matter but it's
just for Aesthetics purposes okay so in
here let's go ahead and start rendering
our I triple of text base text okay so
let's go and create a rich text in here
so we say we return a rich text okay
and Rich Text is already a component
that is in material so you don't have to
do anything okay and we're just going to
use one text Span in here okay and for
this text span it's going to have
children of other text spans and this is
a little bit I mean this is and more
like a flutter lesson than it is a river
pot lesson so I don't want to spend too
much time on it but Rich Text is a
component that is able to display a list
of text spans sorry it's just able to
display one text of type text Matt and
every text span can then have its own
sub Tech spans all right so it can every
text span has a a children property so
in here let's go ahead and create just
one text in here we're going to call it
text spam okay
text span
so this is the render for all our Rich
texts basically all right so is children
is going to be our texts okay and we're
gonna map these texts okay and right
after this let's say two list otherwise
we get a really nasty error that's going
to be persistent for the entirety of
writing this code so that's not so fun
so inside these text let's call this
base text this parameter okay and let's
create an actual function in here right
so the argument list no that's that's
fine and then in here we're going to say
if base text
is an actual base text okay or actually
let's let's start with link text so we
say if this is a link text and it's
going to be Auto imported and then we
say otherwise all right so here what
we're saying is that we know that we get
a base text but base text internally
could actually be
a link text as well so this is how you
will break up that class clustering okay
so you're saying I know it can be a link
text as well so it requires some
knowledge about the details of the
implementation because if you were
provided a package with this type of
functionality you you will definitely
have to read the documentation to know
whether you have to do this comparison
with link text and base text otherwise
if you want to make this code somehow
maybe more readable what you could do is
to go to base text and let's see if it
can find it excuse me and then have a
property in here that says is Rich text
or is link So like
um
bull gets is a link text and it would be
saying this
is link text something like this
yeah so you could also do this so you
could then go ahead inside this widget
that you're creating and you could say
if base text
Dot is link text something like this
okay however the the
pause I'm gonna remove this code by the
way that we just wrote in base text the
positive about this base text is link
text comparison in here is that now
inside this if statement base text is
actually going to be if you look in here
it's going to have the ability to dig
into link text so base text variable was
promoted to link text simply because
with this is comparison if we did this
um approach of going to through is link
text getter you won't have base text so
actually let's instead of me explaining
all this let me just show you so if we
have this getter in here and then
instead of this code go ahead and say is
link text inside base text you don't
have access to untapped okay because
base text is still a base text is not
promoted to link text so let's remove
this and you can see now by doing this
comparison you have access to untapped
because SpaceX is promoted to link text
in this context alright so let's then
create and return a text Span in here
okay
and our text span is going to then have
some properties so the text is going to
be the base text Dot text and its style
is going to be style for all this guy
okay
style for all and then we're gonna if
the stealth roll is optional then we're
gonna merge it with the base text own
style so we're gonna either take this
style for all or if it doesn't exist
we're going to take the base text own
style or if style for all exists we're
actually going to merge it with the
text's own style meaning that the text
own style always takes priority okay so
let's go and say style we're going to
say style for all and then we're gonna
merge it with the base text
a style like this all right and then for
the um for its recognizer you can see in
here we say recognizer every text span
has a recognizer we're going to create a
tab gesture recognizer and then we say
on tap
is equal to base text on Tapped okay we
can actually do this I believe so uh
that should be fine yeah so we don't
have to create a separate function for
it okay and then so that's that's for
displaying the rich text it was really
easy right and for returning normal text
I'm just going to copy this code and
paste it in here and going to remove the
recognizer because simple texts that are
not links don't have to have a
recognizer okay and you can see in here
we have a one text span here for for
text there links and one text man here
that doesn't have a recognizer which is
four and display plain text all right
and we're doing the tool list in here
let me see if I have to put some commas
in here to get the formatting right
good stuff so it seems like now we have
our Rich text component okay so let's go
ahead then create a component that is
going to render this you see we have our
Rich Text widget and however in order to
display this string our login view will
have to create an instance of Rich Text
widget and then it will have to
initialize it with quite a lot of stuff
with quite a lot of text and links and
stuff so doing that in the login view
will just create some dirty code
basically that no one wants to have a
look at it'll be so much better if we
had a if we had a component that took
care of that so we're going to call this
new component login view sign up links
okay so login view sign up links which
is going to create an instance of this
Rich Text widget and the login view is
simply going to be able to install or
instantiate an instance of logging these
signup links and the Slate to the user
so what we're going to do is to use Rich
widgets sorry Rich Text widget to
completely style this and create a
separate component okay so let's go
inside our activity bar in here and
bring up Explorer and inside lib views
let's see
lib views we don't have a I mean we just
have components so let's go into lib
views I'm going to right click on it and
say new file let's create a new folder
call it login and then we're going to
create a new file called login view sign
up links dot Dart okay and then I'm
going to get rid of our activity bar as
well so we can focus a little bit more
on the content
okay let's create a stateless widget in
here STL okay so we're going to call
this guy login view sign up sign up I
think maybe like this instead of a
capital u yeah that's fine so log into
sign up links I don't know why it's
importing all of these we just need
material so this may be a bug actually
so we just need material in here okay
this guy doesn't have any Constructors
because it will know how to render
everything it will have all the texts to
display okay so let's go ahead and in
here and just return a rich text Rich
Text widget okay it's going to be Auto
imported and then we are we have one
property if you remember style for all
so let's create a style for all in here
and we say theme of our context
context if I can spell it then we're
going to say that we're going to take
the text theme and take the default
subtitle one and then we're gonna copy
it with a line height of one and a half
times bigger than the usual okay
so we basically want a little bit more
spacing between the lines than is
usually set on the default font okay so
it just becomes a little bit more
relaxed spacing as you would call it
maybe in xcode for instance it's called
relaxed spacing okay
so now that we have that let's go ahead
and create the list of texts that we
want to display okay so the first part
is this one don't have an account okay
so let's go ahead and say
um let's see if we have that don't have
an account
actually we haven't created Created
these strings so we need to we need to
actually do that so before we continue
we need to go ahead and create all those
strings which is not a very fun activity
so let's go into our activity bar in
here
and then we need to go ahead into lib
views let's see lib views what do we
have components we have okay let's go
into lit views and create a new folder
called constants and in there we're
going to call a create a new file called
strings so lib views right click on it
and say new file and create a new folder
constants slash strings dot Dart and
visual studio code is going to create
this intermediate folder for you so this
is the not very fun part because we're
going to paste a ginormous
basically amount of code in here however
it's just keys and values and I'm going
to explain it all and you can pause the
video you can I mean to get all these
hard-coded strings you can either pause
the video at the correct time as I'm
scrolling through the code and write The
Code by hand or you can go to the GitHub
repository for this course and grab this
particular file and just dump it inside
your application because writing strings
is very easy it's nothing fun
it there's literally no Rich content I
can provide to you by just telling you
oh write this string now write that
string you and I are not going to learn
anything by doing that so it's a lot
better to just copy paste it one thing
that we can learn is to how to is how we
can actually create these strings uh
files and their embedding classes so
let's create an immutable class in here
where we call it strings okay and
immutable needs foundation so we say
show immutable in here because that's
the only thing we need from the
foundation package and then create a
constant private Constructor for your
class okay so the rest is going to be
basically just copy pasting the content
so I'm going to bring some content at a
time all right
so the first chunk of strings I'm just
gonna populate them here so let's have a
look at them
and I'll explain what they do and we
can't really see the entire content so
let's enable word wrapping word if I can
if I can spell it actually let's go in
here remove that and say
um word wrap in here okay so you can see
that our app name is hard coding in here
we call it instant gram it's a horrible
play on words then we have a welcome
message that says welcome to and you can
see that welcome message actually
displayed here welcome to okay
than we have a string that says you have
not made any posts yet press either the
video upload or blah blah and that is
displayed if you log into our
application so let's just log into our
application in here uh with this account
and you can see it says you have not
made a post yet so that is that string
and also uh and it says in here another
string that says nobody seems to have
made any posts yet and that is displayed
in the home page if there are no posts
in here okay so this is the home page
that displays all photos and videos in
the entire system not only the users
photos and videos but also anyone else
it's kind of like the Instagram
flow you would call it okay or the home
page okay and this is the user's own
post so that is the text message that
gets displayed to the user if no one in
the systems made any posts yet okay and
then we have the search screen that says
enter your search term and that is what
this strings says in here so if you want
to pause this video If you really want
to type all of this by hand go ahead and
pause this video and do that now
otherwise you can get all of this from
the GitHub repository for this course
the link to which is available in the
description section down below under the
video okay
so let's paste now the next chunk of
texts in here so I'm going to create
some white spaces and then paste the
next chunk as you can see in here and
one of Texas Facebook the other one says
Google and these are our button URLs
when you're trying to sign in and as you
can see in here Facebook and Google and
these are the URLs for these buttons
okay that's where they lead
and here's a text that says login to
your account using one of the options
below which is this text that you can
see in here okay then we have comments
and that is displayed if you go in
inside a post so let's do that now let's
go into a post and you can see uh inside
oh the comments are disabled on this
post in here comments that's the title
that is this that is displayed right
there okay then we have another one that
says write your comment in here which is
the text that is displayed as a
decoration for our text field at the
bottom of the screen in the comments
View
and another uh another string I said
check out this post that is when you try
to share a post it's right there okay
that is the title of the sharing option
then we have a post details and it says
post details in here and I believe it's
the string that is displayed right here
okay and then we have another one that
is called post and I'm not exactly sure
where we're using this particular one at
the moment okay but it is Perhaps it is
possible that we're using it as a string
in between some other strings but we
will see soon how that is being used
okay let's now paste the last chunk of
texts so let's go in here and go and
create the next chunk of text which is
starting from here you can pause the
video if you want to go and write this
by hand at this point as well so we have
a string that says creates new post okay
and that is when you try to upload a new
post right here create new post okay
uh then we have please write your
message here which is the text that is
displayed as
the title of our text field okay then we
have no comments yet nobody has
commented on this post yet so if we go
here uh
let's see boom oops if we go to the
comments oh someone has commented on
this post and this post doesn't allow
comments so let me just create a new
Post in here and then we say hello and
then we allow comments but no one has
commented on my post yet so if I click
on it and then go to the comments screen
you can see that there is a text that
says no nobody has commented on this
post and that is what this string is
saying here okay
then we have enter your search term here
and that is inside the search screen you
can see it says enter your search term
here so you can tap on it okay
and we have a string that says don't
have an account which is pretty much the
screen that we were working on before we
got here don't have an account in here
you see and then also we have this text
sign up on and it says sign up on then
we say Facebook and then we have the
link to Facebook and then we have
another screen that says or create an
account on and that is this string okay
so that's really good now we have our
string so we don't have to do anything
more and again you can grab this from
the GitHub repository for this
application or you can write it by hand
okay
so now that that boring part is done
let's go ahead and Implement our
component which was this one this is the
component that we call login view sign
up links okay so for the text let's
create a base text in here and we're
going to create a plain text which is
going to be this one don't have an
account okay so let's say strings
strings don't and let's import strings
out to import don't have
oops I think we imported the wrong
string so if you look in here it's in
views components constant strings
um
no it's actually fine uh we have to use
this one I don't have an account yet
let's see don't
didn't we actually paste this just now
which is called
don't have an account I think we did so
let's go to those strings again and see
oh this is the wrong strings file this
is inside view views components
constants but we want the one that is
inside views constants so we don't want
this strings and we want the strings
that is in views components right here
okay so that's very important sorry if
you use constants this is the one I
apologize this is the one you use
constants so we have to I mean we're
going to have multiple strings files in
various places but we just want this one
at the moment all right so let's import
that and we say don't have an account so
that's the first string that we're gonna
render
let's see let me remove that okay and
let's disable War wrap as well so let's
disable it okay and I think it's now
disabled actually or I enable it
disabled okay and so now we have the
first part of the text let's go ahead
and create the next part okay so uh we
have don't have an account and I believe
this has a new line as you can see at
the bottom of it oh sorry at the end of
it and then the next text is going to be
a plain text as well so it's going to be
this one sign up on so I'm going to copy
this and paste it in here I'm going to
say sign up on okay the next one is
going to be the Facebook link so let's
go ahead and copy this one and then
change the plane to a link okay for the
text we're gonna say Facebook
and then we're going to have an untapped
on it okay and this on tap then is going
to launch a URL so let's say launch URL
which is going to Auto Import URL
launcher okay so the URL is going to be
a URI parse and then we're going to go
to our strings and say Facebook sign up
URL like you can see in here
all right so some commas to get the
formatting right so this is going to
display Facebook as its text and then
when the Facebook link is tapped then
we're going to launch Facebook sign up
page all right
then let's go ahead and create this part
it says or create an account on so this
is a plain text so let's copy that and
paste it right after this base text link
and for playing we're gonna say or
create an account on okay which is this
part and then we're going to have
another link which is this time for
Google so let's copy and paste the
Facebook link as you can see in there
okay boom boom and in here we say Google
and then instead of Facebook sign up URL
we say Google sign up URL okay
so that was really it now we got a
reusable component in here that we can
actually we're not gonna reuse it that's
not the point of it the point of it is
that this logic shouldn't be inside the
logging view because the logging view
should have only the logic to display
very easily created components so we
shouldn't pollute our login view with
Logics like this and that's the point of
creating this uh reusable stateless
widget okay and after creating this
logging view sign up link we can go
ahead and start implementing the
Facebook and the Google buttons so let
me bring up the simulator so that we
don't just make things up and have a
look at the actual design how this
should look like you can see we have two
buttons in here one for Facebook login
and the other one for Google they're
very similar to each other they have
kind of like a horizontal stack view in
here or a row as we call it in flutter
and also it has an icon which is going
to be with font awesome a package that
we brought into our application and then
the text for that particular button so
these are going to be their own
components but they're not going to be
buttons the way that we're going to
create them so they're just going to be
reusable components with some sort of
Arrow component and then in the login
view we're going to create a button that
contains these components okay so the
actual button in order to grab its
untapped event is going to be placed
inside the login view however the
contents of that button we're going to
create reusable components for okay
so I hope that that is clear and and we
can close these views that we have open
at the moment then we're gonna go into
the login folder and inside lib views
login and create a new file and call it
Google button so let's right click on
login and say oops uh Google button
Google button oops Google button.dart
okay and this is going to be a simple
stateless widget so STL and let's say
Google button and we have to clean these
so just import material okay
fantastic after we have that right let's
create a sized box okay and so we want a
specific height for these buttons so
let's say a sized box and its height is
44 which is like the very standard
height for reachable and tappable mobile
components on any mobile device usually
the height any tappable area should be
at least 44 at least according to Apple
and Google's guidelines okay
so in here then the child is going to be
a row and it has an empty array of
children for now okay so in this row
we're going to create a font SRA an icon
so let me bring it here so it's going to
be
um this icon in here so let's say we
need an fa icon which is a font awesome
icon so F A icon if you tap it and sorry
if you write it you can then tap in here
to import font awesome okay so fa icon
and in here we're just gonna say uh we
have font awesome icons dot Google all
right so that's our Google icon and it
has a color so let's do this and do some
formatting it has a color and we're
going to say colors sorry app colors
and we have to actually create perhaps
app colors because we haven't done that
before so
um and because we need to store these
colors somewhere I mean we have some
reusable colors but we haven't really
created those colors anywhere so
um let's go ahead and actually do that
let's go ahead and create our app colors
before we continue with this file so
um and before we actually do the app
colors we need another extension that
can convert any string in form of a
hexadecimal or an HTML color to an
actual
um fluster color so for instance a and
color like this
ff00ff or zero xff00ff these need to be
converted into color so we need an
extension for that so let's go into lib
folder in here
and let's have a look we have lip let's
create a new folder called extensions
and in there we're going to create
another folder called Spring and in
there we're going to create a file
called as HTML color to color okay so
new file we say extensions slash strings
or string slash as HTML as HTML color to
color dot Dart okay and it's going to be
an extension on string so we say
extension as HTML color to color on
string
so we want to convert any
um so it says convert 0x
blah blah blah blah blah blah or this
blah blah blah blah to color okay so we
say we return a color and we need
material for that so let's import
material we say return a color and say
HTML color to
to color and we then create a coloring
here okay and we need to actually parse
our current string as an integer so we
say ain't parse
okay and in our string which is this
instance we're going to first remove all
instances of excuse me 0x
and we're also going to remove all
instances of this so we're going to end
up just with the actual string which
contains the color okay so we say remove
all and for remove all we also need an
extension so this is going to be a new
extension on string so let's go here in
um we have lib extensions on string and
let's create a new extension on screen
we're going to call it remove all so we
say new file remove all dot darts okay
and the point of this is that it can
take in and I triple strings to remove
from the current string so we say
extension and remove all on string okay
and we say func oh sorry stripe and I
program in multiple languages and in
Swift and in Rust you start with FN and
Funk so I sometimes say funk
um so string we say remove all
and in here we take a parameter of I
triple offsprings to remove from the
current string we say values and we say
values
values Dot and we fold
we start by this okay
and let's see we say string in here we
say result
and then we have the pattern to remove
okay
so then we say result
remove replace all so we replace all
patterns that we get with mt string like
this you can see in here okay with an
empty string put some commas in there so
you can have that look at the code a
little bit better so we go through all
the values okay and we start with this
so our result is going to be in the
beginning this then we take every
pattern which is inside the values we
can actually change this to Value if you
want to we could say value okay so we
get every value and then the result is
always inside the result then we remove
that value and replace it with this and
then return the resulting result in the
next iteration we go to the next value
then the result is the previous result
so that's how fold works okay
and remember I really tried to strike a
good balance between teaching about
riverpod and also teaching about flutter
because this course is not a flutter
course it's not a dark course but it's a
course about River pots so I have to
explain things to a certain degree
before I actually stop and don't go too
much into details because otherwise this
course turns out to be maybe 40 50 hours
long and I will just go become a
complete flutter course so I'm assuming
you already know how flutter works and
how Dart works and if you don't know you
can read the documentation about fault
but I just give you some basic
information about how it actually works
okay so in here we need to remove all
extensions so there's going to be Auto
imported oops I think it imported from
the wrong place let's see Instagram
clone okay so let's go back to our
coding here then we say remove all like
this
and we are going to remove all patterns
that look like this and like this
um and then so this is
so it's kind of like saying this removal
so we first remove all these instances
from our string then we pad left our
string to the length of eight with FF so
if uh so basically our Colors Let's go
in here so if you provide us with a
color that looks like this uh boom FF or
let's say a b and then we say 0 0 CC
okay so if this is a color that you give
us then we're going to convert it to
this so we're patting this string to the
length of eight one two three four five
six seven eight and ensuring that the
first bits of the string to the left is
always padded with f if the length of
this string is less than eight so if you
provided a string with a length of seven
then we're going to convert it to this
okay so that's how path left basically
works so after doing that we're gonna
say a Radix of 16 in here okay and this
is exactly what we're going to return
from here so we pull course this as an
INT and then we provide that integer to
color to create a new color Okay so
we're done with this and we can remove
this comment in here okay so we have as
HTML color to color now
so what we're going to do then is to go
ahead and create our app colors so this
is going to be also a little bit of a
boring bit of our application creation
because it's going to be a few constant
values but that's that's fine as well so
let's go to lib views constants lip
views and we have constants in here okay
and let's create a new file called app
colors so new file app colors.dart okay
and we're going to place our colors in
here because if you remember and these
icons they have their own colors like
the Facebook one has its own color and
the Google one has its own color and we
also uh need these colors uh the text
color is black and then there's a
background color on these buttons as
well that we have to add to our
application so let's say an immutable
class uh class app colors okay and you
know by now that this comes from
foundation and show immutable and we're
we're going to create a constant
Constructor
private Constructors so no one can
initialize this class okay and in here
we're going to create some colors so I'm
going to just copy paste these colors
and bring them here you can see that
they're using this HTML Color Oops HTML
color to color extension so let's import
that and in here we have colors which
needs to come from material and let's
say material show colors like this okay
so you can see we have the login button
color it's this color okay and we have
the login so basically this is the
background color which is right here
then we have the login button text color
which is a black color then the Google
color is hard coded to this value and
Facebook color is hard coded to this
value and you're more than welcome to
copy paste these pause the video if you
want to and write these by hand or go to
the Google sorry the GitHub repository
for this course and grab this particular
file from there so you don't have to
type everything by hand if that's what
you want
okay now we have
um now we have the app colors Dart file
ready so we can close it and we can
close this file as well then we are back
into Google button and dart file and for
the color so we're going to say app
colors which is going to be Auto
imported we're going to say then Google
color okay
and then right after that icon we're
going to create a size box sized box and
with a width of 10 so we create a little
bit of a spacing in here you see the
icon then a little bit of a spacing
and then we're going to create the title
for the Google button which is right
here so uh let's create a text in here
so we say const oops const comma
at const text and then we say strings
dot Google all right so let's see if we
can import the right strings which I
think is this one yep
good stuff now that we have this one we
also need to ensure that our row
has a main axis alignment so we say main
axis alignment and we'll say access
alignment off center okay so we Center
our components on the its main axis
basically which is horizontal all right
um now we have the Google button we need
to go ahead then and create our other
button which is the Facebook button
which is very similar to the Google one
so let's go to our Explorer in a login
all right and in there we're going to
create our Facebook button and we're
just going to sit right next to the
Google button so right click on login
and say new file and we say Facebook
underscore button dot Dart
okay and I'm going to copy the contents
of the Google button and close that then
go to Facebook button and paste all of
that there okay and the Facebook button
is just we're going to call it Facebook
button here so Facebook
button all right
and the only things that we have to
change in here is to change the fonts
Awesome's icon to Facebook and oops not
face angry Facebook and instead of
change instead of using Google color
we're going to say Facebook color okay
so these are our buttons now so we have
a Facebook button and a Google button
that we can use inside our login view
all right
the other component I mean we're getting
very close to being able to convert this
logging view the other component that we
have to create is this divider okay and
we're going to call it divider with
margins so let's go ahead and create
that now this component is going to be
in lib
views and I think we have already a
folder called components right here but
we're going to create this one inside
the login folder so because this is not
a component that's going to be used in
other places it's just inside the login
view so inside logging in here let's
create a new file and we call it a
divider divider with margins dot Dart
okay
and this one is a very simple one it's
just a column with a with 40 points of
space on top then a little divider and
40 points of space to the bottom so very
easy so a stainless widget okay uh oops
sdl
and we call it divider with margins
let's clean this mess in here and import
material then inside the return we say
we return a column and its children is
actually a constant array okay or a
console list
in here we say we have a sized box with
a height of 40. all right copy that
twice we have it twice all right and
then we say that inside here we have a
divider just like that okay so excuse me
so now we have our divider with margins
component as well set up so I think
we're now ready to go ahead and create
our login view so this is a very
exciting part for me at least because
now we have all the components ready we
have this divider the title is just
going to be a plain text we're going to
create two buttons and we have the login
uh sorry the Facebook button contents
and a Google and button contents another
divider and this is that a rich text
component that we've already created
which takes care of the tapping on the
links and everything so we can now go
ahead and create our login view very
exciting so let's close this and go to
Explorer
and then we can start working on our
login view which is going to be inside
lib views login and we create a login
view so new file login underscore review
dot Dart okay so our login view is going
to use a
is going to use riverpod so we're going
to create it as a consumer widget so I'm
going to say sdl you can see stateless
consumer uh okay and we're going to call
it login view in here we have to import
hooks River pots so let's do that and
undefined class build context oh because
we need to have material so let's import
material in here good stuff okay so our
login view is going to have it's going
to be an entire scaffold you can see it
has the app bar and it also has this
title in here so let's go ahead and say
that we return a scaffold
okay and an app bar we have an app bar
with a title uh let's see if GitHub
co-pilot can complete some of the code
so I don't have to write every boring
piece of code
for for the title we're going to use the
app name okay so let's say strings app
name and let's import strings
like this okay remember we had the app
name as instant gram inside our strings
file
uh now we have the uh the title let's
start by creating a
um the body of uh our scaffold basically
in here so say app bar and this is the
body okay let's start by creating a
single child scroll view because all of
these may not get uh they may not have
enough space to be rendered on smaller
screens such as on an iPhone 7 or
smaller Android devices so we have a
single child scroll view that's going to
contain all of this so let's say single
child scroll View
and it's it doesn't have a child yet but
we'll create that let's put this guy
inside a padding so we say rapid with
padding of 16 okay like that
then inside this single child scroll
view we need a column so we say child is
a column and its children are empty at
the moment we don't have any child to
put in there and we're gonna then start
creating all the components necessary
for displaying our login means and
before we do that let's go ahead and
change the cross axis alignment so we
say cross access alignment and we're
going to say cross axis alignment of
stretch in order to ensure all the
components are stretched in the entire
width of our entire available width of
our column okay
so the first child is going to be a
little bit of a spacing so there's a
size box with a height of 40. so let's
say sized box a height of 40. okay then
the next component is going to be a text
which is here welcome to instant gram so
let's say text and its string is strings
dot I believe we call it welcome
something welcome to Apple yeah
and then it has a style of
display small okay so let's say style is
theme of
uh context
and then we say text theme and then we
say display small something like this
yep that's really good and we make this
a const good all right after this one we
need this divider and remember we
created a reusable divider so let's say
a const const divider with margins Auto
Import it okay so we don't have to
import it manually
and then after that we need another size
box you can see in here
um we have
our divider actually no we shouldn't
create a size box a thing because the
divider had a size box already so let's
go ahead and create this login text okay
so we say we have a text in here text
and we say it's Texas strings Dot Login
to your account and it has a style we
say theme of context
and we say text theme
dot subtitle one and we copy that with a
line height of 1.5 like this okay so we
add a line height in here
okay that was that part so we have now
our text which is here and remember we
actually added a line height to this
component as well you'll see it soon
okay then we need a a little bit of
spacing after this before we render our
buttons as you can see in here a little
bit of spacing okay so let's copy our
size box in here but we don't need 40.
let's give it a spacing of 20 this time
okay
then let's create a a text button so we
say we have a text button
and this text button has to have some
style so let's say um style is a text
button style from okay and it's
background color is going to be remember
we have app colors so let's import that
and the first button is the Facebook
button so the background color actually
we have the login button color and it
also has the foreground color of app
colors uh I think we call the login
button text color okay so text is black
and then the background is this beige
color right there okay
so after having the style we also need
to provide arm press and on pressed we
want to ask our off-state providers
Notifier to log in with Facebook so we
say ref and read off State provider
which is going to be Auto imported and
then we say Notifier and in here we say
sign in
oops um
I think it was imported wasn't it
imported
State provider and then Notifier and
then we say log in with Facebook and we
don't call this function you see we're
actually passing this function as
reference to the unpressed argument so
it's basically copying a function into
another function kind of okay and is
child is going to be a very simple const
Facebook button and it's Auto imported
now you see how clean it is we have a
text button that delegates its work to
the login with Facebook function in our
auth state Notifier you see auth State
Notifier and it's a text is sorry it's
contest is actually coming from the
Facebook button very very clean if you
ask me then we have a little bit of
spacing of 20 so let's copy this size
box uh like this and then we have
another button for Google so let's copy
this and always be careful when you're
copy pasting stuff because there's gonna
be some problems if you if you do it
incorrectly okay
so the colors are fine instead in here
for logging with Facebook instead of
Facebook we should say login with Google
and also instead of using Facebook
button we should say Google button which
is going to be Auto imported as well all
right
after all of that after this text button
actually we have to have another divider
which you can see in here excuse me so
let's say divider with margins const in
here okay const like that and also then
we're gonna have our login view sign up
links which is this part so let's say a
const login view sign up links Auto
imported as well so I mean it can't be
cleaner than this I would say it's uh
some commas as well
so comma all right so you see all our
components just flat out displayed on
the screen it's very easy to read very
easy to understand you don't have so
much code in the login view you could
even extract these into their own
functions if you want to but I didn't do
that I think it's clean enough to see in
here okay
really good okay let's just have a look
in here I'm pressed it's fine child is
fine and to be honest with you you could
put a comma in these places as well to
make the code a little bit more readable
but that's not necessary
wow that was that was a lot of code
okay now
um what we can do is to go ahead in our
main Dart file and we have some cleaning
up to do you can see we have the main
View and
um it has a log out button all right and
that is that's perhaps good enough okay
um and we can just leave the main view
in here the way it is because we need
the logout button it's pretty nice and
however we're going to remove this login
button from here Boop so let's see
actually sorry uh I got a little
Dialogue on my other screen okay so
let's remove the login view from our
main Dart file in here and then go up
there we now have an error and let's
import our login view as you can see in
here boom okay so now I'm gonna bring up
our other simulator so this is the
complete application okay this is not
our app it's it remember if it's iPhone
14 pro Max is the complete application
that I've already developed so I'm going
to get rid of that and I'm going to
bring our simulator to the screen so
boom okay then let's go ahead and have a
look at our logs then I'm going to save
the main Dart file I'm going to do a
complete hot restart of our application
so you see this is our main view with
the login button I'm going to log out
now you can see we're in our login view
so this is our login view it's not the
complete application this is our app
okay let's tap on the Facebook link you
can see it goes to Facebook let's tap on
Google link you can see it goes to
Google and we also have the Google oh
oops here I can see that we've written
something correctly instead of Facebook
it says Google so let's go to login view
okay and have a look at our first button
in here so let's see text button here
and
it's using Facebook button and here it's
using Google button if we go to our
Facebook button we have written
something incorrectly I think
yes the text is saying Google we should
change this to Facebook okay so now it
says Facebook so tapping on that will
bring up Facebook login and tap in on
the Google button will bring up the
Google login so I would say this is
really Mission successful uh because
it is really working as expected so
let's log in with Google and here I'm
going to tap on that and log in with
this user it loads and it sends me to
the main View and then we have logout
let's try to log in with Facebook
and see if that works as well loading
sends me to the main View and I can log
out okay
that's really good now what we need to
do is to go ahead and start working with
the rest of the application and in the
next section we're going to work with
these animations if you if I bring up
the application that is complete which
is this app and try to log in with
Google let's just log in with Google in
here
and if you go in here you see that there
are some animations on the screen such
as this one or if we go to I believe
where else can we see animations in the
application I believe if you go here and
here
you can see here also there's an
animation and we have other animations
in the application which you can't see
at the moment but there are some
animations for displaying errors for
instance there are some applications
when things are loading such as when you
try to upload an image there's a little
animation I don't know if you saw it
it's just a very very simple animation
of like a hand
that it's banging its fingers on a table
so it looks like this it goes in very
fast but that is another animation and
we also have a an animation that we call
small error and that happens if any of
our providers fail out and that provider
is trying to display for instance and
then we've hooked it to a very small
button on our UI such as this button you
see
the like button and the comment button
these are actually hooked to Providers
and if those providers that are backing
these small buttons fail out we want to
display a little bit of a small error
component on the screen or an error
animation on the screen and for that we
have its own separate animation file so
in this next section of the course we're
going to go ahead and work on our
animations using Lottie all right as
we've talked about it we need some
animations and you know that from
installing our dependencies that for
this coursework using Lottie as our
animation files and it also has
animations driver in our application and
if you're not familiar with Lati well it
is
um I mean there are some tools from
Adobe for instance that and some
utilities that you can install on your
computer and create animations and the
anime animations that are created then
are going to be saved inside a file and
which is a Json file and this Json is
going to be rendered as a Lottie
animation and so Lottie is a company
that owns basically this animation file
format and Lottie has provided some
libraries also for flutter as well that
allow you to render one of these Json
files for instance inside a widget so
you can basically display a latte
animation just as a normal widget in as
well so there are simple Json files and
we've already looked at actually how
they look like on the screen such as our
um such as these screens let's go back
in here and have a look for instance
this this is a Lottie animation so this
in fact is a Json file so it's not very
complicated and to load into memory you
just place them as a normal Json asset
bring them to your pop spec yaml and
then you can start using them so I'm
going to show you now the I think there
are six or five actually five Json files
that we need for this project and what
you need to do now is to bring up your
browser then go into
lawtifiles.com and inside latifiles.com
please go ahead and log in to an account
and here I've logged in with my Google
account so you can go ahead and do the
same thing too if you're here you
probably see like a login button press
on it and then you can log in with
um with Google or any other social login
such as Facebook if you want to
after doing that there is a URL on
Lottie files and which is called
app.lotyfiles.com preview okay and I
think the file URL can just be removed
so you can just say go to preview like
that and then choose a project into
which you want to preview your Lottie
files so what I'm going to do in here is
I'm going to show you the five
animations and how they actually look
like and where they're used and you can
go into the GitHub repository for this
course the link to which is at the is in
the descriptions at the bottom of the
screen please click on the descriptions
in the YouTube video and look at the
GitHub repository and find these
animations in the repository they're
inside the lib folder views components
No actually they're not sorry they're
not in Libs actually and they I believe
it's in assets so if you open up the
GitHub repository for this project look
inside a folder called asset and in
there there's a another folder called
animation animations in animations
you're gonna find F5 Json files so um
those are our animations after you found
those animations you can go to Lottie
previews and then press the browse
button and I'm going to go in here and
then I'm going to show you how these
Json files actually look like so the
first one is called Data not found so
you can see and it looks like this okay
so this is for instance if we're trying
to hit um
uh our back end and then we can't
actually find the data that we're
looking for but we were expecting data
to be there so that's the data not found
animation that we're using okay then
there's another animation in here which
is called empty as you can see it looks
like this we've already seen where to
use it's right here right so that's the
other animation
let's have a look at the third one let's
go here and look at the error one you
can see it looks like this so this
happens if we for instance inside a view
we were expecting some data from our
backend but that data couldn't actually
be been retrieved not that it couldn't
be found but it couldn't actually be a
retreat so some error with perhaps our
internet connection okay so that's that
animation
than the fourth animation and second to
last is the loading animation this is
displayed only in one place inside our
app and this is when we are going to
create a new post and waiting for the
thumbnail of that post to be loaded so
for instance when we're here and we're
creating a new post actually here let's
say and you saw it just quickly there so
that's that animation all right
so the last animation is I believe
called small yeah small error and this
is a little animation that gets
displayed in places such as this like
the like button and the comment button
these buttons themselves are actually
hooked to providers because if you
remember when making a post you asked
the author of that post can decide
whether this post allows likes and
comments and if these likes and comments
are disabled then we actually hook them
to a provider so the person who's
viewing the post then knows whether they
are allowed to like or comment a post or
not basically and if that process fails
then we want to display in a little
error animation instead of these widgets
so we don't show these widgets but we
want to display like an error animation
and the other error that we had is too
big so this error so if you go in in
this error that we had error Json it is
a way of a big animation and it has a
little drop which is not a good
replacement for a static component so
this last animation that we have in here
is static and it kind of I mean static
in its positioning so it just sits in
one place and just
um does a little bit of a jump so it's
not as obvious as the other animation so
we have these five animations you know
also how they look like now so what we
need to do is to go ahead inside the
activity bar in here let's collapse all
of these that we have in here so we have
lid
let's go and create a new folder so we
need a new folder and and it is called
it it needs to be called assets all
right so we're going to call it assets
and in there we're going to have another
folder called animation so let's right
click on any empty space in here and say
new folder and I'm going to say assets
animations all right so we have two
folders in here then what we need to do
is to go ahead and drag those five files
in here so I've already prepared those
so what I'm going to do I'm going to
just take those files and drag them over
okay boom so now we have these five Json
animation files in our application and
again you can go inside the GitHub
repository for this project inside the
assets folder animations and grab these
five Json files and if you're wondering
where I actually got these Json files
well it is on latte files on Lottie
files you can search for any animation
for such as let's say loading and you
will find hundreds and hundreds of
animations that you can place inside
your application so you don't have to
use the one that I'm providing in in
this course you can search in here and
see okay which one do you want in your
project and use those instead and of
course as always just ensure that if
you're taking the work of someone else
inside your project look at the
attributions that you have to give to
that person so sometimes they they post
information saying that if you're using
this animation you need to give me
attribution in this place on that place
so please go ahead and do that as well
let's go into our pop Spanky ammo and
bring these guys into our project okay
so we need to go into the flutter
section
in here right after use this material
design I'm going to bring in our assets
so let's say we have assets
and in here we have uh five assets I
believe two three four and five so let's
go ahead and just type assets
slash animations
and I'm going to say dot Json and then
in here we need to say empty okay then
we have loading and we have data not
pound
like this then what else do we have we
have data not found empty and loading
and we have error and small error so
let's say error and small error just
like that okay great stuff we have our
five animations now loaded into posspix
so let's save this file let's kind of do
some loading and I'm not actually sure
if these animations are going to be
immediately available to our
um IOS app but it seems like it actually
did a lot of loading so that's it that's
a good sign okay now what we need to do
is since all these animations have a lot
of things in common they're basically on
disk they have a file name what we can
do is to go and create a super view or
Super Widget I mean when I say Super
Widget it sounds like it's some kind of
like a an extraordinary widget but it is
not I just mean a super class that can
load any animation given its name on
disk okay so let's go ahead and first
Define these names and of animations on
disk and then we can go and
and then load them inside a view so what
we're going to do is go to our folder
lip in here and Views components so
views components you can see in here and
then we're going to create a new folder
so let's right click on components and
say new file because we want to create
the folder while we're creating the file
as well so we're going to say
um components animations
models okay and then Lottie
animation.art so
lib views components animations models
and a file called Lottie animation dot
Dart okay and this guy is going to be an
enumeration so it's going to use the
enhanced enumeration features in a
future in Dart by associating file names
to these animation names basically so
let's say Lottie animation enum Lottie
animation okay
and it has a final value in here which
is its name all right so the name of the
file let's create a Constructor for this
so let's say const latte animation like
this required this dot name okay
good stuff even though we're getting an
error in here but we are gonna fix this
soon so let's first add the data not
found so if we bring those animations
here so we see them data not found okay
so let's say uh the first enum case is
data not found and it the name of its
animation is on disk data not found dot
actually just like that no Json required
okay
so let's see what we're getting in here
why are we getting this error final
string name and then const La T required
the name parameter name isn't defined
uh it is though so I'm not sure what it
is complaining about but we're we're
gonna keep writing our application
because I think the last parameter
actually I think the last case inside
our Latin animation should end up with a
semicolon so that is where these errors
go away so this is a real
weird error I would say so data not
found empty
so let's go ahead and say empty then we
have loading okay and let's call this
loading and the fourth one is error and
the file on disk is called error and
also we have small error and a file on
disk is called small error just like
this and a semicolon okay so now we have
an enumeration that specifies the file
names of all these animations on disk
and I think empty loading I haven't uh
misspelled any of these seems like it
that's good all right
that's that so let's close this file and
then what we're going to do is to go
ahead and create the actual uh view file
that can look at any of those animations
and pretty much just load them on screen
as a widget so let's go to lib views
components animations uh here okay and
then we're going to create a new file
inside animations not in models but
inside animations we're going to call it
Lati animation view okay new file
Lottie
animationview.arte okay and let's get
rid of our activity bar so we can focus
purely
on the code okay so this bloody
animation
um view is going to become a simple
stateless widget so let's say STL and we
say Lottie animation
view all right it has three parameters
so let's see what we can provide it with
we say first we want to know the
animation to actually load okay latte
animation and we call it animation
animation we want to know if we have to
repeat the animation repeat okay and
also we want to know if if the animation
should be reversed because some of these
animations are actually reversed you can
see like
like this one I'm not sure about this
one I think this one goes forward and
then when it finishes it just repeats I
think the repeat flag on this one is
true yes but if you provide a reverse
flag to your animations then you can
actually see that the animation hits the
end and then it reverses back it's
sometimes nice to have reverse
animations it creates a calming effect
sometimes okay and it's up to you and
when you want to use that reverse so
let's add these uh final parameters in
here excuse me so let's see how they
look like we have required this
animation but repeat we're gonna say is
by default true and reverse we're going
to say by default is false so you don't
have to provide the values okay inside
the build function we're going to change
this to an error function and we're
going to say internally this build
function returns a lot T and this can be
Auto imported okay and we say Lottie
from an asset and the asset
um is coming from animation
animation and we're gonna get the path
from that animation so what we need here
is a full path to that animation and we
don't have a way to calculate that
because we just have this name property
okay so let's go and create an extension
so we say extension get full path on
latte animation okay because Lottie
animation provides the file name but it
doesn't have the full path and in here
we're just going to say full path okay
and it goes into the assets folder
animations and then dollar name
dollar name dot Json okay so that gives
us the full path to the animation so in
here we say animation dot full path like
this and then we have a few more
parameters to provide in here so and we
have reverse is this reverse and then we
have repeat is this repeat okay so that
was really as simple as that and we have
a few things in here we have to remove
let's import material instead
I don't know why Visual Studio code does
that where flutter extension on Visual
Studio code does that import some other
files like it Imports container or
framework instead of importing material
and but yeah we have to live with that
good stuff we have the Lottie animation
view then what we need to do is to go
ahead and create subclasses and for all
of these
um animations so we're gonna go ahead
and create subclasses that subclass this
guide and anywhere inside our
application we can just create an
instance of those subclasses without
having to pass these parameters to our
Latin animation view okay so let me go
to view appearance and activity bar
I'm going to bring up the folders that
we're in and then let's start with the
data not found
animation okay and it's going to be
inside lib views components animations
as you can see in here we have lip views
components animations and create a new
file called Data not found animation
view okay right click on animations new
file data not found
and animation view dot dot okay so this
excuse me this data not found animation
view is simply going to subclass or Lati
animation view so I'm going to say class
data not found animation view extends
and Lottie animation View and that's
going to be Auto imported okay and in
here the only thing we have to do is
just to create a Constructor that passes
the animation that we want to load to
the Lottie animation we're using it's
Constructor so let's say create
Constructor to Super call and we don't
need an animation in here and we just
need the super key so we're going to say
super key
and then in here we're just going to say
a call Super and with an animation of a
Lottie animation
which needs to be imported and it is
called Data not file boom boom like that
okay and we make this a constant
structure so have a look at this code
how we did it we're just saying that we
don't need any
um parameters the key doesn't have to be
provided in here and we just say and
call Super and the animation that has to
be loaded is data not found
and I believe repeat is true and reverse
is false by default repeat true and
reverse is false okay
so that's the that's the kind of uh
pattern that we're gonna now go ahead
and use for all the other animations as
well okay so let's go and as the next
animation do the empty contents
animation view so let's go and create
another uh animation here so inside
animation right click and we say empty
contents
animation view dot Dart okay and let's
go to our data not found animation and
copy the contents for that and close it
and then paste it in here and we're
gonna call this one
um empty contents animation view so
animation view stays the same and we say
empty contents animation View
copy The Constructor sorry to copy the
class name and put it inside a
Constructor and for the animation we
just say empty all right so that's it we
got the second animation now now
we also need the empty contacts
animation view however we need it
um sorry anti-contents animation view
however we want it with a text so if you
look in here inside our application in
most places that we're using the empty
contents animation view we actually have
some text over so in here for instance
or if you go into a post that doesn't
have comments you can see also there is
a text over it you can also go inside
I'm actually in home screen we don't
have that let's go in here and delete
this
personal post that we created you can
also see in here so this is a pattern
that we use in our application text and
then an animation view so we need to go
ahead and create a separate animation
view that does this for us okay so let's
go in here inside animations right click
new file and we say empty contents with
text animation view dot Dart okay and we
can copy the empty contents animation
view like actually I wonder if you
should do that or maybe we shouldn't
yeah let's not let's not copy this
because the empty contents with text
animation view is going to be quite
different from the other animation views
because it needs some text so let's
create a stateless widget in here okay
and we call it empty contents with text
animation view all right and remove
these Imports and let's import uh
material as usual all right then in here
we need the text to display so we say
final screen text and let's bring it in
here and we say require this text okay
that's good stuff inside the build
function we're going to create a center
widget and in there as the child we're
going to say we have a column
and let's put the commas in there let's
put a semicolon there and the column it
has children all right and then for the
first component we're going to create a
text okay so we say we have a text that
basically displays the given text as you
can see in here and then we're going to
have a style we say theme
of context and text theme title large
I'm going to use okay so let's say title
large
and also in there we're gonna and we're
gonna make it a kind of a white color
it's actually washed out white color
kind of more like gray goldish color
okay so we say title large and then and
we say copy with and we're going to say
color is colors you can't see what I'm
typing here and let me put a coin there
and we say colors and white 54. so white
54 right here okay
so let's save that and see how the
formatting Works maybe not that one okay
so now we have this text in here and uh
theme of context okay yeah that's that
seems fine let's now add some padding
around this so let's say padding because
you can see in here we have some padding
okay and we're going to add quite large
amounts of padding actually let's say 32
all right so that's our padding and we
have that inside column I think we're
missing a comma in here okay good stuff
so that's for the text and then the
second component which is going to be
displayed in here is going to be our
empty contents animation view so let's
say empty contents animation view which
is going to be Auto imported okay and
this is a constant as well so now we
have this component basically with the
text and the animation View at the
bottom all right so it looks like this
pretty much okay
so I think I think we're basically done
with this animation as well so I'm gonna
close that one let's go in here inside
our animations and continue with the
with the rest so the next one is going
to be called error animation view okay
so let's let's add that inside
animations so right click new file error
right click new file error animation
View
dot Dart like this I'm going to copy the
contents of empty contents animation
View and bring it here I'm gonna call it
error animation view copy the name of
the class into its Constructor and in
here we're just going to say error okay
and the next one is going to be called
loading animation view so animations in
here right click new file loading
animation view dot Dart and copy the
contents of error animation view close
that one place it in here and we're
going to call it loading animation view
copy name on the class into this
Constructor and in here we say loading
okay
that's that one and one last one is
called small error animation view so
let's call it small error animation
viewing here animations right click
small error animation review.dart copy
the cons of loading animation View and
bring it here and we say a small error
animation oops see Daisy like that okay
so we say small error animation view so
if we copy that and place it inside the
Constructor as well and in here we say
small
I think we call it small error yeah so
it seems like now we have all our
animations and what we could do to be
honest with with you we could go ahead
inside our app and have a look here and
let's get rid of the full-fledged
application and have a look at the state
of our app then I'm going to do a hot
restart okay I can see that the process
actually got terminated of course and we
have this box sometimes I don't know or
actually it comes from but that's okay
we're gonna load our app again so let's
go to the main Dart file
in here and run our app let's see select
the device iPhone 14 pro simulator and
of course if you're at home on Linux or
Windows you can also use your favorite
emulator or favorite device that is
connected to your computer to run your
Dart or sorry flutter application
so now that we have this let's go into
the main Dart file and see how things
actually look like in here okay so we
have our main View and that has just a
logout button and perhaps in the main
view it would be a good place to uh
let's see we have a login view as well
and where did we create this login view
it's here oh I see okay it has its own
file good and we could go into this main
view which is hanging right here with
just a log out button and start testing
our animation file so we could just add
some animations into perhaps let's see
this consumer for now okay so we could
remove this text button and just return
some animation views in here just to see
how they look like so and now I can see
our app is running in the simulator
gonna get rid of the inspector
and log into our application with Google
all right or Facebook doesn't matter
whichever one you choose now we have the
logout button let's go ahead and start
testing our animation views so if you
look in here we have data not found
animation view so I'm just going to
return that instead so I'm going to
comment this out
and let's say return data not found
animation view just like that okay let's
see how it looks like
yep that's our animation okay you can
see that it repeats it doesn't reverse
okay so we have data not found what else
do we have we have
we have also empty contents so we have
empty contents animation View
it looks like this we have empty
contents with text animation View and
it's text we could say hello world
it looks like this
we have what else do we have we have
error animation View
okay
looks like this
we have small error animation View
error animation view like this
and you can see that it looks like this
and last but not least I think we have a
loading animation View
which looks like this all right so it
seems like our animations are actually
working correctly and we can then remove
this return statement take the comments
out of this text button so bring it back
to how it was and clean up our Imports
all these animations that we just
imported or Auto imported using visual
studio code or your favorite text editor
or IDE if you're using Android studio
for instance so that's good seems like
our animations are working now so
there's not much more that we have to do
with animation so we could go ahead and
perhaps commit our code at this point
because we've done quite a lot so git
status
we have quite a lot of components we
have Rich Text on animations that we've
added okay so let's say git add-all and
then we say git command we
or we say work on animations
um Rich Text analog and logging view
like this all right and I'm not going to
push because I don't have a remote but
if you have a remote repository setup
you can push your code as well
good stuff that was it really for
animations and and in the next section
we're gonna focus on a huge task which
is going to be
creating and displaying user posts we
actually gotta start with the displaying
of the user post so we're going to work
with the thumbnail view which is this
particular view let's see if we can see
it on the screen so if you go in here
and if I create a new post and say blah
blah blah whatever
and post it this guy is our thumbnail
view okay and this thumbnail view it can
display the thumbnail of any video or
any photo so it has that ability to not
only display thumbnails for photos but
also for videos and also has the ability
to get tapped and then relay this tab
events to its super View or whoever is
creating an instance of this uh funnel
view so that they can take action on for
instance displaying the details view
okay so first we're going to start with
that and then we're going to go ahead
and create this grid view component that
we have in here which is also being used
in here okay so some sort of a grid View
and then we're gonna have a look at user
posts view so it's this screen okay so
lots and lots of stuff to do in the next
section so grab a cup of tea or a coffee
if you want to and I'll see you there
now we're done with animations and it is
time to get started with this serious
business inside our app which is user
posts and
as I said in the previous section when I
was introducing what we're going to do
in this section I mentioned that this is
going to be a very very large task and
for a while we won't really be able to
preview so much inside the simulator so
we have to kind of code in the air but I
will do my best to explain everything as
much as I can as much as the time allows
basically in this course to explain the
details of what is happening why we're
doing things and while we're doing
things the way we are doing them so the
good thing is that we have always this
complete application to the left hand
side or the right hand side doesn't
really matter where it is but we always
have this application that we can refer
to in order to see how things are
behaving and what we're trying to
develop so this is a really good example
I'm going to try to bring this up as
often as I can and display it really
what UI component for instance we are
trying to develop so before we get
started I wanted to mention something
that we need to have a look at into data
for our application how it is being
stored in Firebase so let's have a look
at how our data looks like so this is
the back end at the moment for this
project there were two users at the time
of uh creating this video that had
logged into our application you can see
they have two different users in here
and they have different user identifiers
they have different email addresses as
well and they're both from my users
basically they're both my users but they
have different email addresses of course
and you can see that there are other
folders in here comments likes and posts
the most important thing that we need to
look at at this time is posts because
you can see there are three posts total
so if you go to the home viewing here
which displays every user's all posts in
here there are three posts the current
user has just one post but the other
user that logged into the system has
also created two posts so this is the
current user's post and these two are
the other users posts okay you can see
every post has its own document there
are quite a lot of properties in here so
let's have a look at some of them or
maybe even all of them you can see here
that we have an aspect ratio of property
in here it's very important that we
store this because we need to enable we
need to basically when you tap on a post
we need to know how big that post is
going to be on the screen so what aspect
ratio it has okay you can see this one
extends really to the entire height of
the photo so we don't crop anything okay
so that's the aspect ratio we have
um the created ads we have the file name
which is very important you may be
asking okay but what is this file name
used for this file name is used for when
we go let's go into storage
actually I don't think it's being used
there yeah it may be it's a 7B
7B fbb and I don't think it's any of
these so which user I read let's see
let's go to this post and have a look at
this post that was created we can see
that it was created by a user ID with r
z okay so if you look here it's RZ
folder inside our storage Firebase
storage okay so we need to ensure that
in our project not only have we enabled
Firebase storage but we also have the
ability to create folders Etc and we
have rules set up and I'm not sure
actually if we've done that for our
project so we need to do that now okay
and in here let's go to this user you
can see that every user has three
folders you can see two of them right
now one is called images the other one
is called thumbnails and the third one
is going to be called videos which we
don't see right now because no one has
uploaded a video yet okay we can do that
easily so if we go to thumbnails you can
see that this is the other user that we
can't at the moment see in here this is
this user who's uploaded these two posts
because the current users uploaded post
only okay so if you go one folder back
into this user you can see this user has
only one image and it's this one all
right
so this is the structure of how we are
creating our storage every user will
have a folder in here so if you go in
here you can see the folder the folder
name is going to be the user ID all
right so the user ID is going to be the
folder name for that user inside there
then every user is going to have three
folders images thumbnails and videos
images contains the Full Resolution
image
thumbnails contains the thumbnail of
course it's a much lower quality photo
and also there's going to be another
folder called videos which contains the
Raw videos that a user can upload every
image and every video is going to have a
thumbnail so that's the relationship
okay so if you upload a video our app
creates a thumbnail uploads a thumbnail
and a video the thumbnail will go into
the thumbnails folder and the video will
go into the videos folder all right and
then if you go back to our applications
posts so in here you can see that we
have the file name all right then we
have the file type so here the file name
is
fbfb sorry 7B fbb so let's see which
user that was RC so RC images and you
can see this is the file name FB okay so
that's what we need the file name for so
we go into our storage we grab the user
and we grab the images folder and then
we look for the file called FB and that
will be the full resolution file okay
that we're looking for
now you can see that we have the file
URL the direct URL to that file as well
we have the message that the user posts
or the yeah basically the comments that
they or the actually let's just call it
message not the comment because this is
a message really the message that they
post along with their image okay
and then we have some other properties
such as for instance post settings
thumbnail storage ID etc etc and I'll
explain all of these as we go on it
would otherwise be too much to explain
in just one
um one go but the important part here is
this post settings before we go on I can
explain this as well every post has post
settings which is a dictionary or a map
of strings and Boolean values as you can
see in here so and when you're making a
post
you can decide for instance whether
people can like that or allowed to like
that post or comment on it and these
settings are stored just like this with
keys and values okay so let's see if we
can find this current user so let's see
this user at the moment let's create
another post and we go in here and
disable comments and likes and we just
say a b c as our message and post it
and let's see now we should get a new
post it's right here and you can see ABC
is here and you can see allow likes and
comments are both disabled and set to
false so those are our post settings and
we can go ahead and actually delete this
guy you can see comments and so no no
one is allowed to comment or like this
photo and then we delete this image
right there and this should now get
deleted as we saw just now with a little
red indicator so this is the data
structure that we are going to try to
achieve with our application as well
okay but before we do that let's go we
have our storage in here let's go into
our app so we have Instagram clonevan
dot let's go to Instagram clone
coursevan.org your project basically if
you're watching at home go to your
projects dashboard
then we need to go into uh basically an
allow storage at the moment we don't
have that so let's go into project
overview and see if we can find storage
here okay
and we need to enable storage so we have
storage I can see and we need to go to
our rules we need to add some rules in
here so I'm going to go in in our
storage rules in here okay
and see what we have maybe we actually
haven't set up too much I'm just going
to copy these from here and bring them
here and let's just explain what is
happening okay I'm going to publish
these okay so you can see in here we
have our collection ID which is the
username all right so we are saying that
we're matching against slash collection
ID all right because that's how it's
going to be stored you see the data is
going to be
um slash then the user ID all right so
that's what this collection ID is
matching and we're saying we allow
creating updating and writing as long as
the user has authenticated
and the use the authenticated users user
ID is equal to that collection so every
user has access to create update and
write only to their own folder okay and
they're allowed to read from anywhere as
long as their request authentication is
not not meaning that they're logged in
and the reason behind this is that if we
didn't do this then I wouldn't be able
to go here and see other people's posts
okay however I'm not able to modify any
of that I can see all the posts and all
the thumbnails and all the videos that
have been uploaded okay and here you may
I mean at the moment our system doesn't
have this whole idea of creating like
secret posts like it posts that only you
or your friends are allowed to view if
you want to add that feature then you
need to ensure that you are updating
this read
rule as well in here in the future but
since our app doesn't have that then we
don't have to have a special ruling here
but you're more welcome to experiment
with this after we're done with our
application if you want to add more
features to it okay
so we're done with setting up the
storage rules so now we have access
basically to storage in our project as
well so without further Ado let's just
go ahead and start working on our
thumbnails and grid views so the first
step is to really work with this
thumbnail view but in order to do this
we need to work on
adding quite a few utilities to our
application and first of which is going
to be excuse me it's going to be our
ability
excuse me again to read complete posts
from our backend so if you go here into
a full post let's see if we can go into
our firestore database
so the first component that we're going
to go ahead now and work on is going to
be a very simple
um enumeration actually in our entire
application we always need to know when
we're working with posts whether there
are images or videos so if it's an image
or a video
so let's go ahead and create a simple
enumeration that can tell us whether
something is an image or a video so
inside lib let's collapse all of these
we have lit let's go into state
and then we're going to create a new
folder in here called image upload then
inside there another folder called
models and then a file called file type
so I'm going to right click on State and
say new file then let's say image
underscore upload slash models slash
file underscore type Dart okay so it's
going to be a very simple enumeration in
here let's say enum file type
and then we'll say image and video just
like that so A very simple enumeration
okay then let's close this one and we
can move on to the next file and this
one is going to be our constants so
we're going to say allow likes and by
allowing likes user will be able to blah
blah which is something that we've seen
in here let's see
all our likes so we have a lot of likes
by allowing likes and I think we've
actually defined these somewhere else
allow likes let's see and we have them
in here you can see Allah likes title
and I wonder if you should actually
remove these because we probably are not
at the moment using these so we have a
lot of likes title I like Allah likes
description we've already defined these
inside views components constants but we
need these actually somewhere else so we
are going to do some cleaning up so
let's keep the strings Dart file in here
but we're going to go ahead and create
another file okay so let's go ahead
inside
lip State let's see if we can find that
lip State okay
so we have image upload but we're going
to go into lipstate we're going to
create another folder and another file
so right click on State and say new file
then we say post settings
and then slash constants slash constants
dot Dart okay so you can see the entire
path in here so let me go ahead and grab
these strings from there okay allow
likes allow comments all of these so one
two three four five and six uh strings
so I'm gonna copy this part you see the
entire immutable etc etc and also take
this Foundation stuff from here copy it
I just copied it and then I'm going to
delete them from here delete those six
strings from our lib views components
constant string start file okay save
this file let's go back here and paste
it right here and we say const strings
dot private Constructor and then close
it right there okay and we're going to
call this not strings but this was going
to be a constants so let's call it
constants okay so we just call that
Constance just like that
foreign
good stuff we're done with constants so
let's go ahead and now create a an
enumeration that keeps hold of our post
settings you see the goal here is that
we want to allow our UI to render any
number of settings okay so a setting is
going to be having a title a description
and also some sort of a storage key okay
so the storage key is gonna be these
allow sorry you see allow likes and then
allow comments so title description and
storage key so we're going to Define
that using an enumeration okay and that
is going to be inside lipstate and then
we have post settings models let's see
if we have inside post settings we don't
have models at the moment we have
constants so let's right click on post
settings and say new file then I'm going
to say models and then slash post
setting dot Dart okay
so in here we're going to go ahead and
Define an enumeration we're going to say
post setting
all right and then where every post
setting has three properties remember
this so we say title and description
description and then we also have
storage key so let's say final string
like that all right and let's go ahead
and add a Constructor to our post
settings so I'm going to bring a
Constructor here boom okay and then
we're going to Define our allow likes
and allow comments post settings in here
so let's say we have allow likes it has
we have to pass three properties in here
right title and we say constants
dot uh allow likes oops I think we
imported the wrong console so I'm going
to remove this and we have allow likes
title right which is the constant that
we created I believe in here allow likes
title so we have to import this
constants file is inside lipstate post
settings constants okay so let's see
uh blips date post settings this one all
right good stuff let's go back here so
that's the title
um
that's that's it yeah and we also have
to specify the description the
description is going to be constants
allow likes description and also we have
the storage key property we say
constants allow likes storage key all
right we copy this allow likes from here
and then we go in there and we say allow
comments and we need to change all of
these so we say allow and change this to
a colon so we say allow comments title
and allow comments description and then
allow comments storage key so now we
have a post setting enum that has two
enum cases allow likes and allow
comments that has all the properties
that we need in order to display all
these all this on the screen you see
this and also it allows us to know okay
which storage key we're working with
when we and when the user says the allow
likes is enabled or disabled you'll see
soon actually how we're gonna use that
inside r
inside our UI okay
now that that is done we can close this
file and move on to the next file which
is going to be our post key so all these
properties that you saw earlier in our
um in our application right there and
let's go to at the moment we're in
firestore it's pretty good actually
let's go to
um
Instagram clone download which is the
main project so it's the project that
I've already prepared from before which
had all these posts and likes and
comments okay
let's go into posts and have a look at
an example post in here all these keys
in here we need to Define them somewhere
aspect ratio created add file name file
Etc okay so let's go ahead and create
those keys so in the activity bar let's
go to lip State posts and lipstate posts
all right at the moment in posts we only
have type depths so uh right under posts
and let's right click on posts actually
and say new file and we say models and
then we say slash post key Dart okay so
we're gonna place all those keys in here
so we say an immutable class
at post key all right a mutual comes
from foundation and then we say show
immutable
all right and we have quite a lot of
keys in here so we have user ID
we have a message
yeah oops message
we have created at
thumb nail URL okay so you can type
these as I'm typing we have file URL and
we have file type we have file name oops
file type file name aspect
ratio we have post settings you've
already seen these so there's no special
treatment for these really I'm just
going to type them as we go okay post
settings thumbnail
storage ID and we also have original
file storage ID then let's go ahead and
create these a static constants okay so
we say static and blah blah static const
and equal to a string each one of these
okay
then let's go ahead and create a
constant private Constructor for post
key in here as well as we've done it in
other places so consposkey blah blah
like this
okay let's go ahead and add these be
very careful with what you add in here
because this is usually the place I've
seen most of my students fail at writing
these things correctly I have a lot of
people asking in and Discord saying oh I
can't read this like this data that I'm
reading it's null it doesn't come back
correctly It's usually the problem with
the keys the keys and misspelling them
or maybe adding an extra space or an
underscore where it should be a dash etc
etc or the other way around because
we're actually using underscores uh
instead of dashes okay so keep very
close eyes on what we're typing in here
and please try to type them exactly as
they are or even better if you want to
go to the GitHub repository for this
project and grab this file exactly as it
is and bring it into your project
because typing these is probably not a
very good idea yourself anyways so we
say uid and message is message okay and
remember these are designated strings
that we have designed this has nothing
to do with Firebase this is something
that we've decided okay we say created
at you know you know what would be
really funny if I actually made a
mistake in here so
while I'm talking so much about students
making mistake I could make a mistake as
well so thumbnail URL
a thumbnail yep a file URL and then we
say file type then we say file name all
right URL type name and we have aspect
ratio then we have post settings oops
settings and we have thumbnail or
storage ID let's see if GitHub co-pilot
can't figure this one out original file
storage ID that was really good okay so
that's really all we had to type in our
app so
um
we're pretty much done with actually the
post key uh class in here okay and we
can we can close it and go and start
working with our actual post so this
post is going to be a model object that
we're creating inside our models so
inside pose models and which is going to
contain a post that we can give it a
Json and it will be able to parse that
Json so when we read one of these posts
from Firebase like this post
then we are going to be able to pass
this complete Json to a model object and
ask it to parse itself okay so let's go
and create that so we need to go into
lib State posts models in here okay and
then right click on it and say post dot
Dart this is going to be a chunky file
actually so let's say immutable and we
say class
um post all right so oh my God it's
adding all the properties for us so I'm
not sure if I want to accept that
because it's actually not correct so
um let's say foundation and we say
showing Mutual all right just like that
then we have a lot of properties in here
so we have post ID
and we have user ID we have message yeah
oops message we have created at
thumbnail URL and file URL file type
and we have file name aspect ratio and
remember these are really boring stuff I
completely am aware of this it's not
nothing that we all strive to do it's
just very boring parsing stuff so we
need to just do it once and be done with
it okay so aspect ratio thumbnail mail
storage ID okay and we also have
original file storage
storage ID and the reason we have these
different IDs is that the thumbnail is
always stored different oh sorry
separately from the actual original file
all right
and then we have post settings
all right
so let's go in here and say that these
are all final
we can set all of these two strings to
begin with but we're going to change
them so the first three are going to be
strings the created at is going to be
dates time
and this one's going to be a string this
one's going to be a string the file type
is going to be of type file type which
we've already created image or video Do
You Remember
aspect ratio is going to be double
right and thumbnail storages are going
to be IDs are going to be string and a
post settings is going to be a map of
post setting Auto Import and Boolean
okay so every post setting can be turned
on and off all right
now we need to create a Constructor for
this guy but we're not going to create a
Constructor by adding all these
properties to the Constructor what we
need is actually a Constructor that
takes a post ID which is this guy all
right and also a map of Keystone values
so then we will parse that as Json so
let's go ahead and do that now so we say
we have a post Constructor it takes in a
required Vista post ID and also it will
take a required map of string and
dynamic and which is our Json all right
and in here then we're going to come
start at our instance basically so this
is going to be very boring very very
boring to be honest with you so let's
just take it one step at a time so we
say user ID is Json and then we say post
key dot let's Auto Import this user ID
okay
then we say message is jsonpost key Dot
message all right then we have the
created at is going to be Json post
key created at and here we have to
ensure that it is and that it is a
timestamp so let's say
as timestamp which is coming from a
cloud firestore okay and then we make it
a date object so that's created at then
we have the thumbnail URL thank you so
much GitHub co-pilot for helping with
this and we have the file URL that's
great stuff then we have the file type
and I don't think really that
GitHub copilot can't figure this one
correctly so I'm going to type it by
hand so what we need to do is to say you
see the file type as you can see it
comes like this as an image what we need
to do is to create an instance of our
file type which is this guy this enum
using a string so let's go ahead and say
file type is equal to we take file type
then we go to values and we say first
where okay excuse me we say the file
type is here then we say as long as this
file tab that is coming in here and has
the name equal to our Json post key file
type as you can see in here okay and we
say or else let's see
first where or else and we take a file
type
file type of image
like that okay let's see final tab is
first where and then we take this here
and we put the or else in there
and I think we're pretty much done with
that part as well so let's see if this
is matching fine
like this okay
and
okay and it says it can't be assigned to
that and I really oh I see because this
needs to be an error function okay
good stuff so that's for the file type
let's go to file name let's see if
GitHub copilot can help with that thank
you and we have aspect ratio which we're
just going to read from the Json
we have their thumbnail storage IDs so
those are just going to be read directly
from the Json
for post settings this is going to be
special as well because we have to read
this post settings in here it's going to
be a map of string Dynamic so we have to
parse that on its own so let's say file
SRE post settings
okay and we're going to say that is
equal to a map okay so we know it's
going to be a map you can see in our
post settings and here we have a map of
post setting and Boolean and here we
have a map of string Dynamic so we have
to map a map of string Dynamic to a map
of post setting and Boolean and to be
honest with you this has nothing to do
with riverpot this is just pure at Dart
and flutter so I expect you to already
know all of these so though the format
may look a little bit different from
what you're used to but it is still Json
parsing okay so we say four final entry
in Json
post key
post settings okay and we say that
entries we go through the entries in
this entries
okay
then we say post setting is going to be
our key values first where
okay and this is our element then we say
element storage key should be equal to
the entry key like that okay
and then let's go in here then we say
take the entry value like that
uh good stuff and I think really that
we're done so this is our parsing uh of
the post settings all right you can
pause the video here and have a look at
this and I don't think I really have to
explain this part so much because we all
need to know really how this kind of
stuff works in Dart and flutter already
so it says uh user ID it can't read the
user ID so let's see what we did in here
so we say user ID isn't a field in the
enclosing class uh
user ID and I've written use ID so it
should be user ID okay let's put a comma
in here good stuff now we also have to
add two properties to this class which
are going to be used by our application
later and we need to know whether a post
allows likes and allows comments okay so
let's go ahead in here and add to
Getters so we say bull get allow likes
because you see if you go into a post in
our application that does not allow
likes so in here for instance sorry this
one doesn't allow comments then this
comments button has been removed so it
would be a good idea to add a Boolean
property in here and that allows our UI
to be able to calculate the uh this
logic without having to do it itself so
then we go if post settings
post setting
allow likes oops allow likes
and is true its value is true or false
okay so this is not an or this is
basically saying read the post setting
for allow likes and get its volume value
if you can't find that post setting
inside our post settings map then take
the value of false for the return value
of all Alex okay so let's copy paste
this and say allow comments and remember
to change this so allow comments okay so
once that's all likes the other one says
allow comments All right so that was a
boring part and if you if you don't like
doing these things to be honest with you
you can actually go and copy the
contents of this file from the GitHub
repository okay let's just double check
this three strings one date time two
strings then file type one string a
double two strings and a map of post
setting in both this is quite correct
actually okay so we can close that file
now
now the next component that we're going
to do now is going to be our um post
thumbnail view so exciting stuff so it's
this guy this thumbnail view okay what
it does it is that it takes in a post
object and avoid callback to a call when
the user Taps on that post okay so let's
go ahead and create this component
inside lit views components and let's
see lib
we're in state let's go into views
components and then we're going to go
into post we don't seem to have any
folders for post so lip views components
right click on components and say new
file we create a new folder called post
and then we say post
thumbnail view.dart okay
so let's go ahead and say this is a
stateless widget like this remove these
annoying stuffing oops actually let's
say stateless and then we call it post
thumbnail view then we remove these
annoying stuff we import material okay
now this guy is very simple you can see
it just displays an image so it's going
to be an image Network so we just need
to use a material image all right and a
gesture detector on top of it because
when I tap on one of these it then goes
into the next screen so keep in mind
that this post thumbnail is not going to
be aware of what it should do when it's
tapped only that it has to call avoid
callback function all right and as it
should be it shouldn't do any routing
really okay final post so this is going
to be Auto imported hopefully we say we
need a post and also we need a void
callback avoid callback just like oops
void callback all right
and we say on Tapped let's add these
properties to our Constructor like this
with commas okay they both are required
properties then let's go ahead and say
we return an image
image Network and we take the post
thumbnail URL okay so that's what we
need the signal URL for and we're gonna
say box fit cover for the fit so we say
box fit cover okay
like that and we're gonna wrap this guy
inside a gesture detector so wrap with
Widget gesture detector
okay and we say on tap is untapped just
like that so very easy so you can see
this component doesn't really have so
much logic in it all right
good stuff now what we need to do is to
work on our grid view which is this
component so now that we have the
thumbnails we have the post thumbnail
view we can create a grid view that's
basically takes an eye trouble of posts
and creates a grid of these post
thumbnail views okay so let's close that
one and go ahead and create our post
grid view inside lib views components
in here we have post folder already so
right click on post folder and say posts
grid View
dot Dart okay
this PostScript view is a stateless
widget as well so we say posts grid view
all right and
um
that's really that's really it so uh we
don't have to do so much more on that
one so we remove these and then we say
stateless widget comes from Material
like that then what we need to do is to
create a grid View and but before that
we need a parameter in here that says
final I treble up post it's going to be
Auto imported okay and we say post so
you give us post and we display a grid
View
a comment here to get a formatting right
let's return a grid view okay so we say
at grid view dot Builder all right and
let's put a comma so our grid delegate
um we actually need padding as well so
let's add padding then we say const uh
things Edge in sets of eight so we have
some padding between all of these as
well you see okay
but we're going to add the spacing but
this padding is generally for around the
objects so let's go into the grid
delegate and we're going to say const
sliver grid delegates with I think we
could say fixed cross access count
and in here let's add a comma so we say
the cross axis count is going to be 3
okay because there are three items in
one row and then we say the main axis
spacing is going to be eight and also
the cross axis spacing is going to be
eight so
basically uh eight eight points of
spacing between vertical items and eight
points of spacing between horizontal
items as well three items horizontally
and as many items as possible vertically
in order to basically contain all of
these posts or in order to render all of
those posts okay we know the item counts
so let's just provide in here we say
posts length all right and our item
Builder we can Implement now so we say
final post is posts element at remember
element at is the function to use for I
turbo because you can't say this this
doesn't work on I triples okay you can
create an extension though on I travel
that allows you to do this kind of
subscripting but we're not going to do
that right now okay then let's return a
post thumbnail view which is going to be
Auto imported okay and do this so we
have the post and for or detect for now
we're just going to do this so we're
going to say to do and navigate to the
post details view
okay which we don't have at the moment
so we don't have the post details view
so for when you tap on a thumbnail we're
just gonna do nothing at the moment all
right
so that was our posts grid view now what
we're going to go ahead and do is to
work on this particular view let me
bring it up here right there so we have
the grid View and it requires a an eye
trouble of posts but we don't actually
have our posts like we don't know where
they're going to come from how we're
going to read them how we're going to
store them
etc etc so that is the next part that
we're gonna work on right now so let's
let's actually get started with it
directly without taking a pause okay so
the first component that we have to go
ahead and create now are some of the
most or as is actually a class that
contains some of the most important
Firebase field names such as created add
date display name email etc etc which
are being used pretty much across
multiple objects so we have at the
moment at this post key I believe and
this is only for post so if you go to
our objects in here you can see posts
and these are our post Keys which are
defined in here however we also have
other objects such as likes so likes has
Day date
post ID uid comments also and we have in
here let's see common created Outpost ID
uid so let's go ahead and Define these
in their own file as well so we're going
to do that in lip State constants so
let's see we have lip State constants in
here and we have Firebase field name and
it seems like we've probably actually
created this so that's we're good to go
it seems like so let's see where we've
used this so we've used this inside user
info storage already so we don't
actually have to do this uh it's it's
already done pretty much so let's move
past this one
and now that we have that we need to
then have a look at this one also we
have the Firebase collection it says
thumbnails comments likes posts and
users that's good stuff so that part's
also done then uh what we need to do is
to go ahead and work with the user posts
provider so this is going to be a river
pot related uh object that we're going
to create it's going to be giving us an
eye trouble of posts and uh it will
basically look at the current user ID
okay so it will say okay which user ID
do we have in the system currently and
it will it will then provide all the
posts for that user so let's see if we
have the user ID provider already you
can see this provider gives us the
current is ready so we're going to
create another provider now that depends
on this user ID provider and grabs all
the posts for that particular user okay
so let's go inside ellipse 8 posts
let's see let's collapse everything
there are so many folders so lip state
constant we have posts in here and let's
go inside posts and create a new folder
called providers and in there we're
going to create a new file called user
post provider so right click new file
and we say providers slash which creates
a new folder for us called providers and
then we say user posts
provider.dart in here okay so it's going
to be our new provider it's quite fun
actually to go back to riverpod as well
up to this point we've been doing quite
quite a lot of stuff that have to do
with pure flutter and dart and Json
parsing and but now we're gonna work
with some providers so let me get rid of
this activity bar to the left hand side
and let's start working on our new
provider this is going to be a new type
of Provider which we haven't done before
and this provider is called a stream
provider
and stream provider as its name
indicates is a provider that gives give
values continuously and the reason for
that is as you can see in here for
instance let's go let's go to our
complete application and this is a post
that I've made if I go in here and
delete this post you can see delete
and I get sent back here this view
didn't really have to do anything it
didn't have to like the deletion didn't
have to send a specific message to this
view for this view to understand that
that post was deleted so how this is
working is that we're gonna install some
listeners to a Firebase firestore
and then as events occur on Firebase
then this view gets updated
automatically so this guy is going to be
a stream provider and you'll see soon
how it works not only is it going to be
a stream provider but it's also going to
be an auto disposed stream provider and
we haven't looked that auto dispose
before but it's just a modifier function
that you can install on any provider
which ensures that as soon as no one is
using that provider and is not being
needed is going to be kind of like
garbage collected basically so
you can add it pretty much to any
provider okay so let's say final user
posts provider and we say we have a
stream provider it comes from hooks
riverpot so it's going to be Auto
imported in there okay and also we say
it's a stream provider that is auto
disposed okay and it is managing an eye
trouble of posts so that's going to also
be Auto imported remember every provider
has a reference okay
so using this reference now we are going
to go ahead and basically uh calculate
our Stream So the first thing we need is
a stream controller so we say final
controller is a stream controller which
is going to come from Dart async and we
say it manages an eye trouble of posts
as you can see in here okay
abstract classes oh sorry stream
consumer I don't want that stream
controller I want okay
and also at the end of this then we're
going to retrieve return the controller
dot screen like this so we have the
stream controller set up all we have to
do really is just to do the calculation
of what goes on inside this sorry what
goes inside this stream controller and
gets returned from our stream provider
so if it wasn't already obvious a stream
provider's return value has to be a
stream of the type of the generic type
that you specify in here okay so what we
need to do then is to by default ensure
that whoever starts listening to our
stream Provider by as the first event
gets an empty array so let's say
controller on listen as soon as someone
start listening then we say controller
controller sync add and we add an empty
array to our controller sync okay
now what we need to do is to create a
subscription to Firebase firestore so we
say final excuse me soft is Firebase
firestore and firestore and this is
going to be Auto imported and then I'm
going to say instance and let's say that
we get a collection all right and our
collection path is going to be Firebase
collection name and we're going to go
into posts it's going to be Auto
imported as well post so and we need to
listen to changes that are occurring
inside the posts uh collection all right
then we say we want them to be ordered
by created at so we say order by and we
say Firebase field name created at oops
Auto Import created at and we want it to
be descending okay so we want the newest
posts to be displayed first so if I go
in here and let's make a post with this
image with the waterfall say one okay
make that post and so keep that in mind
we have this waterfall in here then I'm
going to go ahead in here and choose the
lease in here and say two now you can
see by doing that we get the second
image displayed first and that's what
this order by is doing in here okay
but remember when you create these order
buys you also have to create an index so
it's very very important these indexes
need to be in place before this
subscription actually works however the
way I usually create my indexes is that
I create the subscription first then
when I run my application I get an error
in the uh in the debug console and then
Firebase is smart enough to actually
provide you with a personalized link to
tap on to create the index so it is very
very useful if you didn't know about
that but we're going to actually utilize
that yeah in order to create our index
okay so order buy and then we say where
for where we say post key
we have to Auto Import that as well and
we say the user ID has to be equal to
the user ID let's see actually we don't
have any user ID in here because we're
not watching our current user so let's
go ahead and watch the current user so
we say final user ID is ref watch
then we need to grab the current user so
you say user ID provider okay
like that
good stuff so we have the user ID and
you can see this is an optional string I
believe so we say as long as the user ID
is equal to this one then that is good
enough for us then we say snapshots and
we're gonna do a listen Okay so this
basically allows us to listen for
changes then we say this is our snapshot
in here all right so inside this listen
function we're going to get the
documents so we say final and documents
is snapshots docs oops docs like that
okay so we grab all the documents that
this query could grab for us okay let's
see if I put comma in there and a comma
in here to get a formatting right as
well
good stuff uh and then as soon as we get
the documents we're going to go and grab
the posts out of these documents so we
say final posts
is equal to documents and we're going to
map these guys and actually what we need
to do in here is to do a little trick
actually so
this is a thing that I need to explain
now before we move on and what we're
gonna do in our application is to and
when we upload a new content to our
server such as let's see in here you see
this one
so here's a post when we create a post
that we send to our server to Firebase
we're not going to create custom date
objects inside these created ads etc etc
what we're going to do is to use a
mechanism that is available on Firebase
that allows you to ask Firebase to
populate a field with the current server
date because if the client state is
incorrect you don't want the client to
create date objects and send them to the
server because then your date objects on
the server are going to be wrong so what
you want is for Firebase to populate all
your date objects however this
population is an asynchronous process so
you ask Firebase to do it and Firebase
maybe take a few seconds to do it so
what we want in here is that even though
we're reading these documents from our
backend from Firebase we don't want to
read the documents that have pending
updates or pending right operations by
Firebase so what we need to do in here
is to filter those objects out so we say
documents excuse me where
the dock doesn't have any pending
updates so we say Doc shouldn't have in
its metadata any pending rights okay so
that's a trick that you may want to know
about
then we map every document that it
doesn't have any pending right
operations we say that's the dock and
for every dock we create a new post so
Auto Import then we say the post ID is
actually the doc ID and it's Json is the
doc data all right and a comma in here
and a command here and semicolon in
there all right now that we get these
posts you can see it's an eye trouble of
post then we go to our controller we say
controller uh sync add air posts just
like that so the provider is then going
to be able to return this value to The
Listener okay now this is another trick
now that you can see if if you've done
this before you've worked with uh stream
controllers before when you create them
you need to also ensure that you're
disposing of them correctly so in here
we need to ensure that as soon as our
provider is disposed of that are
subscription in here is canceled and
that this controller is also closed so
let's say ref and there is a function
called on this pose
and in here we say stop cancel the
subscription and controller also close
just like that okay so I would say
actually now we're pretty much done with
the user posts provider if you haven't
made any huge mistakes in it okay so now
that we're done with the user post
provider we can go ahead and Implement
our user posts view which is going to
use this provider okay which is pretty
much this view here that you can see in
here and it also has animations like if
you if you delete your all your posts so
you don't have any posts available then
it displays this animation with this
text which we've already created a view
for so let's close this go to view
appearance activity bar excuse me
then I'm going to go into lib views
let's go to lib views let's collapse
State lib views then I'm going to right
click on views new file and and let's
create a new folder called tabs slash
user underscore post slash user posts
view Dart okay because I mean the reason
we created this tabs folder is because
we have three tabs so every one of these
views is going to have its own dedicated
place inside this tabs folder okay tabs
slash user posts slash user posts view
as a capital okay I'm gonna get rid of
the activity bar to the left hand side
and let's start working on our user
posts view so this guy is going to be a
river pod kind of like a view it's going
to work with providers so it's going to
be a river pod view so let's make it
from the beginning a consumer widget so
sdl a stateless consumer and we're going
to call it user posts view just like
that consumer widget hoax riverpot so
let's import that in there
and we have build context which needs
material so let's import material in
here as well and then let's go ahead and
grab our posts so in here we say final
post is ref watch We want to watch any
changes that are happening to our user
posts provider user post provider okay
and now you can see you actually get an
async value and I'm not sure if you've
talked about async value before or not
but if we haven't I will explain how it
works and why it is so powerful async
value it's kind of like a proxy object
that allows you to build various widgets
dependent on the state of your provider
since this is a stream provider and it
can have various states such as
initializing or listening waiting error
Etc then this posts object which is Off
Top async Value reflects those various
States in your stream provider okay so
let's go ahead and if you look in here
we actually have ability to refresh this
page I'm not sure if you can see it
really but we can't really see it right
now because we don't have any posts
let's see
s
and
you can see we have the ability to
refresh so let's go ahead and create a
refresh indicator in here so we say we
return a refresh indicator okay like
this
and in this refresh indicator we have on
refresh so like this and this is going
to be a simple function in here so how
are we going to refresh so you may be
asking okay we have the user's post
provider which is and the one that is
responsible for this entire widget how
can we refresh it and you'd be really
surprised that ref has a refresh
function so UB ref refresh user posts
provider that's it okay and also we need
to kind of tell the user out even though
this refresh may happen instantaneously
we kind of need to create some sort of a
fake period where we show this refresh
indicator so let's say we return a
future delayed and we delay this by
const duration seconds one all right
like this so and because you see our
refresh has to return a future avoid
okay
we're getting this error because we're
not providing the child value so let's
go to child and then you'll be thinking
then okay but how do we turn an async
value into a widget and that is using
its when function so we say posts when
and you can see then you have various
States when you get data so we say
here's when we get data
when we get an error what do we do with
that so let's go in here and ask it to
complete this for us and also when we
have loading like this okay so in all
these three states you need to return a
widget so let's go ahead and do the easy
ones so for error we're going to return
an error animation view so let's say
error animation view it's going to be
Auto importance the constant as well
okay
for loading we're going to return a
const loading animation view boom Auto
imported okay a comma in there to get
the formatting right as well like that
and also we need to then go ahead and
then Implement when we get posts you see
you get the eye trouble of post so we
went from an async value of I triple of
posts to I travel up posts using the
when function on async value okay using
the I triple of posts now we have to
make a decision what do we do if we
don't have any posts so the length of
this post post is empty or sorry it's
zero then we return our empty contents
view okay so let's say if posts is empty
which is pretty much this state let's
delete this boom boom
this state then we say if that is the
state then we need to return a const
empty contents animation View
and also we need to provide it actually
let's say empty empty contents animation
sorry empty contents with text animation
View and our text is Going to Be Strings
you have no you have no posts like that
let's import this automatically
I'm not actually sure which strings file
we defined this one in so let's search
for it you have no posts it's inside lib
views constants okay so let's import
that live views constants right here
okay
so that was that part uh let's see if I
can somehow get rid of this search uh
yep like that so this is when we don't
have any posts otherwise we're going to
return a return posts grid view okay and
we just pass our post to it you see how
clean this is like it's pretty much just
like if statements and that's it let's
remove this unused uh import as well so
we end up with a clean user posts view
good stuff now what we need to work on
is our main view you see we have let's
bring up our I'm actually going to close
this file first go to appearance and
bring up activity and bar let's go into
our lib views main let's see lib views
and I can see we don't have actually a
main view in here because at the moment
it's inside our main Dart file I believe
we have the main view in here but let's
go ahead and move this main view into
its own folder and file okay so we go
into lib views and we're going to create
a new folder called Main and in there
we're going to create a new file called
main view so right click on views new
file main slash main underscore
review.arte so remember the menu view is
the view that is displayed to the user
when you're logged in okay and the in
the finished application the main view
should look like this it has a it has a
nav bar with a sorry it has a scaffold
with a title bar and in the title bar we
have three trailing buttons in here to
the right hand side and it has a tab
View and there are three tabs in here
the profile one the search one and the
home one okay so this is the U user post
view this is the search view which we
don't have yet and this is going to be
our home view which we don't have yet so
what we're going to do is to create a
tab view but for every three of these
we're going to return the user post view
for now until we fix this later okay
so now let's go into this main View and
start working on it so this is also
going to be quite a big view so let's be
let's be ready for this okay
what this view is doing is if you look
here if you go here and try to upload
something this is an async asynchronous
operation right like it displays a
dialog and then as soon as an image is
picked then it navigates to new screen
now this is a change that was introduced
in flutter 3 that if you are going to do
asynchronous Inc asynchronous animations
between uh sorry if you're going to do
animations between asynchronous gaps as
flutter calls it meaning that you do
something asynchronously and then after
that operation is done you want to do it
in navigation you need to make sure that
your widget is mounted meaning that
let's say that you did this and all of a
sudden the user picks tries to pick this
but your widget has been destroyed by
some other widget what do you do then
well you can't animate to a new screen
because your widget doesn't exist so you
need to ensure that your widget is still
mounted and this mounted property is a
property that's only available at the
moment at least on state full widgets so
until now we've been working with
consumer widgets which are stateless but
this time we're going to work with a
consumer State full widget so let's see
SDF and we say s stateful consumer okay
which is a consumer stateful widget and
we're going to call it main View
okay so let's import hooks riverpot as
you can see in here we also have to
import Let's see we have to import
material in here okay so now we have our
main View
good stuff the root of this main view is
going to be a default tab controller so
let's go ahead and here and say default
tab controller as you can see in here
okay we have some properties that we
have to start manipulate manipulating
with so we have three tabs and for our
children sorry for our child we're going
to create a scaffold so let's work on
that scaffold to begin with
our scaffold has an app bar you can see
in here that has instant gram as its
title so we say app bar is an app bar
its title is a const text and it has
strings and Dot app name okay remember
we've defined app name as a constant
so let's go in here and import I
actually don't know which one it is it's
probably that one yeah so it was
views constants strings which has our
app name in here okay instant gram
so that's for the app bar and now we
need to go ahead and Define our actions
there are going to be three icon buttons
so let's go inside our app bar right
after title and say actions okay so an
array and we say an icon button and
every icon button has two properties an
icon and also it's unpressed so we say
uh icon for the first icon we're going
to use a font awesome icon actually and
so we say the icon is const f a icon
which is coming from font awesome and we
say font
awesome
icons.film okay so like that like that
and it also has an unpressed so let's
just put on pressing here make it async
okay because it is going to allow us to
um basically pick a video and it is an
asynchronous operation so I'm going to
copy this icon button from here okay and
then I'm gonna paste under one here for
the second icon button
and we're gonna give it a simple icon so
a const icon in here and we say icons
not font awesome but we say icons dot
add photo
alternate I think outline it's called
yes okay so this operation is also
asynchronous because we're going to pick
a photo and you can see the icon looks
like this is exactly the icon that we
have in here okay
and then for the third button uh we need
to have the logout button which is let
me bring up the simulator is this button
okay so let's go ahead and add and add
another icon button in here so I'm going
to copy this one boom boom and for the
icon we're going to have icons DOT log
out as you can see in here okay and for
unpressed we are actually going to
display a dialog to the user saying are
you sure you want to log out which is
this one are you sure you want to log
out of the app okay
and this is going to be our log out
dialog so
um so what we need to do is to actually
go ahead and create some sort of a
reusable dialog and we haven't done this
before but we need to go ahead and do
that now because it is about time
actually we had reusable dialogues in
our application
so without further Ado let's work on
this new component which we're going to
call alert dialog model
the creation of this dialog is going to
be in two parts the first part is going
to be the reusable dialog model as we
call it or the alert dialog model as the
file is called however internally this
is going to be a reusable generic dialog
alert or an alert model I would say not
a dialogue alert but an alert model and
it has its own presentation layer so it
has so basically in itself is just some
title message and a list of buttons and
each button can carry with it a payload
and then upon its presentation we return
a future of that payload so you can
associate specific values with specific
buttons and once that button is pressed
then you optionally get that value back
and the reason that it is going to be
optional is that in any one of these
material dialogues the user can always
cancel the dialog presentation for
instance on Android by pressing the back
button that's not possible on iOS you
can still tap outside the dialog to
perhaps cancel the dialog but on Android
is a lot easier to cancel a dialogue and
that is the reason we always get
optional results from our dialects
because a dialogue can always be
canceled okay so let's go ahead and
create this reusable alert dialog model
and we're going to go into activity bar
into lib views components so let's see
if we find that lib views components
right here okay
and then in here we're going to create a
new folder called dialogs and in there a
new file called alert dialog model so
right click on components because we
don't have dialogues at the moment right
click on there and we say new file and
then we say dialogs slash alert dialog
model dot Dart okay so let's go ahead
and start writing our alert dialog
modeling here so I'm going to go to
appearance and give her the activity bar
in here so let's create an immutable
class alert dialog model and we make it
generic okay because each button is
going to carry with a generic payload as
I mentioned before
then we say show immutable to get rid of
that error with at immutable decoration
so we have title message so I'm going to
say title and oops
title like this message and both are
going to be final spring properties then
we have another property called buttons
so it's a map of string and then the
dynamic payload or the generic payload
and we say buttons okay let's create the
Constructor for this guy and we make all
three parameters required
so let's go here and a curly bracket
here as well
let's see here remove that okay and we
make this a const and we we say all of
these are required so all errors are
gone basically so that's the definition
of this alert dialog model so now we're
going to go extend this guy with a
presentation layer okay so let's say
extension
extension alert or we say present we are
going to present any generic object in
here basically on alert dialog Model T
okay
and then we're going to create a present
function on this which returns a future
of that generic value optionally so we
say we return optionally and future in
here sorry a future of optional value
I'm going to say present and we need a
build context so let's say build context
imports from material and then we say
context in here okay we return a show
and I believe it's called show dialogue
yes show dialog
the content the context is there we just
have to create the Builder which takes
in a context and we in here can return
and instance of alert dialog okay then
we say return alert dialog like that and
let's go in here and then we say we have
a title then we have text title okay so
we just turn it into a text
for the content we have the text of
message but for buttons we have to be a
little bit careful because we have to
map our buttons and to a list of text
buttons so we say buttons in here
buttons I think we have or actions I
think it's called then we have buttons
and we take every entry we say entries
map okay
and in here we say
um this is the entry and for every entry
we have to return and we say to list
here so and in here for every enter
we're going to return a new instance of
text button so let's say return text
button
uh text button the child of the text
button is going to be text of the entry
dot key so basically we're taking the
key of this map and that will be the
title of the buttons in this dialog and
when the button is pressed so let's go
to here and we say we are going to
program the Pressed sorry unpressed
parameter on pressed okay
I'm pressed and we're going to say
navigator off context and then we say
pop
and we're going to take the entry value
with us so we're going to pop with that
value
okay so this way we can have a reusable
generic dialog
in our application which is going to be
used in places like this okay you can
see it has actions the title of this one
is cancel this one's log out cancel is
probably having the Boolean value of
false and logout is probably having the
Boolean value of true indicating that
when it's true then we have to log out
and when it's false we should just do
nothing okay
good stuff we have the alert dialog
model we can go ahead and Implement our
logout dialog so uh let's actually let
this be here let's go to view appearance
bring up the activity bar and then in
dialogs we have lib views components
dialogues and let's create another file
in here and we say log out
to dialog.dart okay and this logout
dialogue the beauty of it is going to be
that's I mean the beauty of this alert
dialog model is that it's gonna
um it's going to be the Super class of
all the other dialogues in our
application and I can see that we can
remove this because we've imported
material so let's remove that and we go
to our new file and we say emu tool okay
and class
and what do we have to import here I
think we still need to import foundation
so let's import foundation and say
showing you tool
and we say and we have a logout dialog
and this one extends the alert dialog
model all right and it's going to be
Auto imported and we say this logout
dialog specializes this alert dialog
model generic class with a Boolean
property so and we as I said the buttons
are going to carry with a Boolean
payload all right so we have a const
logout dialog and its title you can see
it calls super its title is Going to Be
Strings log out
and let's see where we have implemented
this log out it's in lib views uh you
can see it's in lib views components
constants so let's go in here
and say uh lib views components
constants use compose here okay the
message is going to be strings are you
sure you want to log out of the app and
the buttons are going to be strings
canceled and strings
log out like this and get cancel is
going to care with it the payload of
false and logout is going to get rid of
the payload off true
like that and we make this a const in
here and I think then we're good to go
pretty much that's it really so now we
have a logout dialog and when we create
an instance of this guy then we can
present it because a large dialog model
every alert dialog model instance it
doesn't matter if it's from a soft class
or if it's directly from this guy it has
a present function so it's it's very
cool you'll see so how it works so
let's go back here into our main View
and we have made this button the logout
button async so that's really good let's
go ahead and then await on the
presentation of logout dialog so we say
uh await const and logout dialog and we
have to import this guy so let's say we
import that and then we present it and I
believe we can say present oh we don't
have because you see the present
function is in the other class it's
inside the alert dialog model so we need
to import that so let's say we present
it with a context and then we'll see a
visual studio code can also import the
correct class for us it it auto imported
this one which the present function is
defined in okay and after presenting
then we get a Boolean value right so if
you say final blah you can see then blah
in here is an optional Boolean value
okay so let's turn it into an actual
Boolean value instead of just an
optional Boolean value so we say then
then we get the value and we say we
either take the value or the value of
false okay
and we say this should be equal to a
variable so we say final should log out
like this okay then should log out is an
actual Boolean value not just optional
okay then we say if we should log out
all right then we're going to go to our
off State provider and log you out so we
say ref await on ref
and then we read our auth state
providers Notifier so we say auth State
provider Notifier okay so let's Import
off State provider and then we just call
the logout function in here you can see
okay so nothing special in there all
right
good stuff in it good stuff and you know
in here we are using Notifier and the
reason is that the logout functions is
defined on the Notifier if you say a ref
read of State provider you get the state
of the provider you see in here we say
final blah is this and now all of a
sudden you see that this is your off
State you want to talk to the Notifier
you don't want to get your off State
okay and the reason we're using read is
because we want to get the
synchronous value of our Notifier so we
want to synchronously read it okay we
don't want to watch it we don't want to
we don't care about changes that happen
to it we just want to call a function
inside the Notifier of that provider
okay
good stuff now that we're done with that
let's go ahead and create our tabs
basically because these are the tabs
that we need to create okay and then we
have to create the views inside these
tabs so
now we have uh let's see what we have in
here right after this and where the list
ends we have to create the Tap bar so we
say bottom it is a tab bar okay and a
tab bar I think it has a property called
tabs or something ah this does it yeah
and in tabs we're going to create just
tabs so an instance of tab for the first
one is going to be an icon of person so
we say we have a tab and an icon of Icon
icons person
person to me you know person yeah and
just like that okay and we turn this
whole tab bar actually into accounts so
we don't have to write cons separately
for every one of these instances okay so
that is a tab and that is for person
then we have another tab so I'm gonna
copy paste this in here
we say search for that one and right
after this one we're gonna have one with
the home icon
okay so we have our three tab buttons in
here okay and then we're gonna go in for
the body of this default tab controller
I think yes it is the default tab
controller that we're going to create
the body for
I'm not sure actually this bottom is the
app bar no so we're creating the body
actually for our scaffold so let's go in
here and then say body right so it's
right after the app bar so we say body
is actually going to be a tab bar view
cons tab bar view now this is going to
be interesting because for the children
in here we actually want to create three
different children in here because we
want the grid view for users own posts
we want this search View and also we
want this home view that displays all
posts in the entire system but we don't
have that we only have user posts view
right so let's create three instances of
user posts view in here okay like that
and like this and like this so at the
moment we don't have the other two views
so we just create instances of user
posts view okay
so that is that I think I think we're
pretty much good to go with the main
View at the moment so I'm just gonna
save that and see and ensure that we've
formatted everything correctly in here
so no missing commas or something looks
looks good to me and we don't have any
unused name ports so this looks really
good let's now go to our main Dart file
in here and ensure that we're not
displaying this main view but we're
instead displaying this main view mainly
when the user is logged in so I'm going
to take this guy from here okay
excuse me so and remove this entire main
view actually entire it's very small but
we just remove it anyway so we go in
here and then we ensure that we're
importing the correct main view so like
that and just to ensure everything's
working correctly I'm just gonna hot
restart the entire application and we
can see a little bit of a problem in
here it says fail precondition the query
requires an index and this is exactly
what I mentioned before and when we try
to read something that has ordering and
the word clause which we saw in them I
think in one of our providers in here
let's go ahead just to refresh our
memory in state we had posts providers
user posts providers and in here if you
remember correctly we had a quite a
complex query which goes into a
collection and orders things by and
created ad and then it says where okay
and in here we need to ensure that we
have an index I believe I I actually
mentioned this and that we're going to
get a personalized link to create it so
that's really good so let's copy this
link actually copy this entire link I'm
not going to click it from there and
then I usually go into a Firebase and
ensure that I'm logged in with the
correct user so if I say console
Firebase I'm actually logged in with a
correct user because if you're logged in
with multiple users you just need to
ensure that by opening this link you're
actually opening it under the correct
user that owns that project okay so I'm
going to create a new tab in here and
open this link then I'm going to choose
my user
and then we're gonna go in here uh and
say Yes create index okay
and now this is gonna this may actually
take some time I've created some queries
on uh Firebase firestore before that
have taken quite a long time to be
created so let's just keep that in mind
that this query could actually take some
time and before that is done we might
not be able to grab our user post and
the thing is we don't actually have to
worry so much about grabbing the user
post because we don't even have the
means to create a new post so we know
that our user post collection is empty
at the moment so even if this takes 10
minutes that's not gonna cause any harm
to us okay
so let's see we go into rules and then
indexes and it is still building but the
important thing is that our application
should at least display the
um animation as you can see this the one
on the right hand side is our app and
the one on the left hand side is the
completed app so I'm going to get rid of
the completed app bring it here and
let's go into this application and here
which is our app and you can see every
instance of this tab view is an instance
of our user posts uh view actually okay
so nothing works in here you can see
except for the logout button and you can
see our dialog gets displayed canceling
it cancels the dialog tapping outside it
cancels the dialog and also going to log
out then logs you out of the application
so it's very simple so now at least we
have fully working login and logout
mechanism but we have more actually than
login and logout we have the possibility
to display user posts but since there
are no means at the moment to create a
user post we don't see anything in here
so we have come farther than you might
think
the problem is just that we can't create
posts at the moment or we don't have any
existing posts that we can view in our
system okay
good stuff after this section is done
now we can go ahead and start working on
creating uh you new posts okay this is
also going to be a huge step and there's
going to be lots of stuff involved in
here
and like lots of views lots of small
components exception handling and
getting images from Firebase encoding
decoding images so there's gonna be a
lot of coding and before we can actually
see the results on the screen so if you
want to grab a cup of tea or a coffee it
is now the right time to do that so
please go ahead and do that and we can
continue with the video after that but I
personally have a cup of coffee next to
me so if I need to I can just sip on it
um if it's if it's required for just my
voice so but if you want you can go grab
your cup of coffee and then come back to
the video because this section is going
to be quite big
we need to go and work on lib views
constants strings and again just a
reminder now in this part of the video
we're going to work on creating new
posts okay so if I bring the fully
functioning app we're gonna work on the
on these two buttons clicking this one
brings up the dialogue to post a new
photo and then it takes you all the way
here and then you can post something in
here and then press the send button and
also here you can have videos now a lot
of you may not know this but if you're
on a Mac and you have uh for instance
um an iPhone simulator you may also want
to have videos in here but by default
there are no videos what I usually do is
I go and open QuickTime on my computer
then I can go and create a new screen
recording in here for instance okay
and I can just for instance choose this
screen area
and then I can start the recording
process which takes actually three two
one there is a little bit of a timer so
now it is recording that video for me
and then I can press the stop button
right there and now we have a little
video okay you can see that the video
looks like this I don't actually know
how you can do that in Linux and windows
maybe there are I know that there are
built-in tools for screen capturing
maybe those tools allow you to also
capture a video
so uh if you're if you have an Android
emulator maybe the emulator is already
populated with some animation is photo
gallery if it is not you can just do
some research on how you can bring in an
animation or a video file not an
animation just a video file into your
photo gallery on Android emulator and if
you're running it on an Android phone
then you're already good to go you can
have just any video in there that you
want you can just film a video if you
want to okay now that we have this guy
in here I'm just going to export it so
I'm just going to say export s720p on my
desktop okay
and then let's just say video like this
mov all right
like that excuse me then what I'm going
to do is I'm gonna go into the simulator
in here
let's go in here and then we go into
photos okay
then from my desktop I'm gonna bring
this video into the photos application
so I'm just going to drag it and place
it here as you can see the video just
gets placed right there so this is on
the iPhone 14 pro Max we have the fully
functioning app
I'm just going to go into our iPhone 14
pro which is running our instance of the
app and go into photos right here
and then do the exact same thing just
drag the same video in here so we have a
video file as well so now that that is
done let's go back to our application
and in here in the fully functioning
application and if I press this button
to upload a video you can see that we
can choose a video this is the first
time you're actually seeing this and we
can choose a video to upload to our
system so if I say my video in here okay
and I press the next button to post it
you can see the video gets posted in
here and we can actually retrieve it and
play it so we have a fully functioning
video player inside our application so
these are the kind of things now we're
gonna go and develop okay so uploading
new photos and images into our system
and now I can see how our index is also
enabled so if we hot restart our
application like this we are not going
to get any errors you can see we're just
in here happily sitting around with no
posts and no errors are displayed to the
console okay now that that is done all
of this is done before getting started
with creating new posts let's go ahead
and commit our code so we're going to
say git add-all and we'll say git
commands main View
you know without the views okay
and oh I I keep pushing it's just a
habit okay and but if you have a git
GitHub uh or even any any type of remote
you can push your changes to that remote
if you want to okay
good stuff let's go into lib views in
here let's see in lib what do we have in
here views we already have constants
file okay sorry the constants folder and
in here we have the strings file so we
already have taken care of this strings
file from before so we don't have to
really do anything uh do anything there
okay and the next component that we're
gonna develop is a simple model class
that we're going to call thumbnail
request
okay this thumbnail request all it does
is just a model object that our UI sends
to a component a some sort of a provider
that we're going to develop soon and
this thumbnail request contains with it
a file an actual file object and also a
file type then we can submit an instance
of this thumbnail request to a provider
and say hey given this file and with
this file type image or video and give
us the thumbnail for this guy okay
because then we can display the
thumbnail in here when we're trying to
actually let's see where our simulator
is in here when we try to upload a new
photo or video so here that is the
thumbnail request happening so we
actually asked a provider with a
thumbnail request to give us a thumbnail
okay so thumbnail request is just a
model object all right so let's go into
lipstate and let's see lipstate and then
we're going to create a new folder in
here actually we have image upload so we
don't have to create a new folder image
upload and models and we have file type
but we're going to create a new filing
here called thumbnail request so right
click on models new file and we say
thumbnail mail request.dart okay
let's go in here and I'm going to get
rid of our activity bar as well so we
can focus purely on the code so let's
create an immutable class we say
thumbnail request
okay import Foundation you already know
all of this so I don't have to explain
again then we're going to have a final
file in here which is going to come from
Dart IO don't import it from HTML it
needs to come from Dart IO and then we
say this is the file and we say a file
type as well Auto imported file type
let's create the Constructor so I'm just
going to move past the zoom past these
fast because we've already done these a
lot of times before okay
so that is the Constructor then when we
need to ensure is that the thumbnail
request is actually Equitable and it has
a hash code now I've explained this
before but I'll try to stress it here
when you're inside your build functions
and you're trying to for instance send a
request to a provider to do a watch or
do a listen or something
you need to ensure those objects that
you're extending to your providers
actually are Equitable and they have
proper hash code because if they're not
Equitable then the build function gets
called over and over again into a loop
because it gets called the first time
okay you create for instance a thumbnail
request upon this View getting shown at
this View
right here you create a thumbnail
request and then you send it to a
provider which we haven't created yet
then then the provider May provide the
update to you and then the build
function gets called again then riverpot
looks at your build function is like oh
you want to create a thumbnail okay I'll
have a look if you've already done this
then it does an equal equation and
between this thumbnail request and the
previous one it says oh they're not
equal because we haven't basically
Implement equality then it sends another
thumbnail request that a new thumbnail
comes in the build function gets called
thumbnail request goes in and it and it
just goes into a loop so you need to
ensure that if you're sending objects to
your providers in the build function of
your consumer Widgets or stateful
consumer widgets that those objects need
to implement equality properly and hash
code as a consequence of implementing
equation okay so let's go and overwrite
the Boolean operator so we say bill bull
operator equality let's see the
implementation for this guy actually if
it is good enough
it's a checking identical making sure
that this object is not the same exact
instance in memory of another object
this is good
then it says okay is the other one it
found that request and is the runtime
type of this equal to the other runtime
type files are equal and then actually
this was perfect implementation it is
the exact copy of the one that I've
already implemented so it may have just
taken the code from what I've already
implemented so now that we have the
equality let's go ahead and Implement a
hash code so
in here so we have hash code and for the
implementation of hash code we're going
to say an object object hash all and
hash all okay oops hash alt and this is
an array and then inside this array
uh oops we're going to say runtime run
time type
okay we hash that then we say file and
then file type just like that okay I
remove this to do good stuff now we have
hashing and equality on uh thumbnail
request that's really all we needed okay
so let's then go ahead and create
another file in the exact same folder
that we are right now so I'm going to
bring up the activity bar
and we're going to create a file inside
models in here and let's right click on
new file and we're going to call this
guy and I believe image with aspect
ratio okay so image with oops I'm typing
in the wrong place so new file image
with
aspect ratio dot Dart
and the reason behind this to be honest
with you this is as you can see in the
folder that we're creating this is is
inside models it's just a model object
but usually we want to know if like if
we have to render an image we want to
actually know its aspect ratio because
because it makes the rendering drop a
lot easier then we can wrap this entire
image displaying inside an aspect ratio
widget and everything is just going to
work without us having to dynamically
fetch an image's aspect ratio while
we're trying to display it okay because
then you have to create some sort of
stream a completer then wait for the
image to come then you grab the aspect
ratio and calculate it dynamically but
all that that is a lot of work so in
here in our UI whenever we're working
with an image we're going to work with
an instance of image with aspect ratio
okay so we say class image with aspect
ratio
and let's make it immutable
immutable okay then we say final image
and this is going to come from material
so material show oh sorry
um image
and then we are going to have our aspect
ratio in here so we say final double
aspect ratio okay
create Constructor and curly bracket
curly bracket const and make these
required like this and we're good to go
and we don't have to import a foundation
for immutable because that is already
imported as part of material I believe
somewhere if you look at Foundation some
some of these
oops where am I
I actually don't know where I am uh
material here one of these I think is
foundation it should be or they bring
foundation with them okay and I don't
think this uh it is actually sorted
so let's see this is material one of
these files must have brought foundation
with it because otherwise we wouldn't be
able to use immutable in here all right
oops
let's go back where we were image would
asthmic ratio immutable okay we just
import a material just just a side note
good stuff after that and we are going
to create the utility and that isn't
going to allow us to actually grab an
image's aspect ratio okay this one is
going to be a little bit tough to come
to uh complete but it is not so
complicated it just gets a material
image and then it calculates the aspect
ratio for that image so let's go into uh
image upload
at the moment we just have a folder
called models let's create a new folder
called extensions and a new file called
get image aspect ratio so right click on
image upload folder and we say new file
then a folder called extensions and then
it gets image aspect ratio dot Dart okay
so in here we're going to then calculate
any material images aspect ratio so
let's just import a material so we maybe
can actually start writing the extension
so we say get image aspect ratio on and
then we want image it's going to come
from material so let's go in here and we
say show as material show image okay and
then here we say material dots image
like this and so that we always know
which kind of image we're talking about
because image is implementing different
packages okay
so in here then we want to say we return
a future of double and we call it get a
function that is called get
aspect ratio like this and is an async
function all right and in here
we're going to first create a completer
so we say final completeer
it is a completer and this completer is
going to come from Dart async so let's
say show a completer okay
and this completer is actually going to
contain a value of double
okay now that we have that we can go
into image and then there is a function
in here called resolve okay with a
special configuration and then we have
to create in here and also we need to
show it so we say image configuration
okay then we say we create a new
instance of this const material
dot image configuration okay just like
that and then we after this we create a
listener so we say add listener okay and
our listener uh let's go actually break
this down into the separate lines there
are so many things that are happening
here then we need an image stream
listener because if you look at this ad
listener it actually needs an instance
of image stream listener so let's import
that let's say image stream listener
okay
so in here we create a new instance of
material
image stream listener okay boom boom
and this image stream listener then
takes two parameters you can see in here
let's see image and synchronous call
okay then I'm going to pull this image
info like that and add some formatting
in here okay then what we're going to do
in here using the image info we're going
to calculate the aspect ratio so we say
final aspect ratio is image info Dot
think there's a property here image and
then we can say that width and then
divide the width by height to get the
aspect ratio okay then we say image info
this is very important you have to
dispose of the image because if you read
the documentations for add listener and
all of this image stream listener it
tells you that you need to dispose of
the image once you're done okay a lot of
people forget to do that image info
image dot dispose okay it's just like a
controller basically you have to dispose
of it and then we need to ensure that we
pass this aspect ratio to our completer
so we say completer complete with the
aspect ratio
I don't even see what I'm typing okay
and here the add listener finishes I can
see that right here you can see it
finishes there and it actually sorry it
starts there and finishes there after
this call we need to return
the completer's future okay so you can
see it is a future of double which is
exactly the result that we want to
return so your file should kind of look
like this basically okay
good stuff now we have the get a get
image aspect ratio and I can close those
files basically okay
after we have that uh we are gonna we're
gonna need a new exception so this
exception exception is going to be very
easy to implement it's just a simple
exception with a string and what it does
is that it it can be thrown by our
thumbnail provider which we're going to
soon go and develop and this thumbnail
provider is going to try to grab the
thumbnail for a thumbnail request but if
it can't then it's gonna throw a new
exception which we're going to call
could not build thumbnail exception so
let's go in here let's see where we are
in image upload we have extensions and
we have models let's create a new file
in here and under a new folder called
exceptions and we're going to call the
file could not build thumbnail exception
okay right click new file and we say
exceptions remember it's not extensions
it's exceptions
slash could not build
thumbnail exception dot Dart okay
and let's go and just implement it it's
very easy so we just say could not build
thumbnail exception and this one
implements implements exception and the
message is actually hard coded so you
say file message is could not build
thumbnail like this all right and it's
just a console Constructor basically
that's it really I wonder if you can
make this const no we can't all right so
we have a final message because
exception I believe has a message
property somewhere yeah it is this one
so that is it really we don't have to do
much more about this guy so the next
step after this is to go ahead and work
on our provider which is going to be our
thumbnail provider okay
so
um we're going to use a the video
thumbnail package as well which we've
already implemented into our Pops vac
yaml video if we look for video funnel
you see here so for image thumbnails we
already have these classes like models
uh image with sorry thumbnail requests
we have
and it gets image aspect ratio I wonder
actually how we're going to calculate
the image thumbnail I think we can just
take a an image from a file and then
create an image with aspect ratio out of
it so
um let's go ahead and create this
provider I'll explain more actually what
is going to happen in this provider so
we're going to create a thumbnail
provider which is for the first time is
going to be a provider of type family so
we haven't done this before I think if
we search in our code base after family
we don't actually find it okay
Trojan Pro I don't know what these are
in our pop speaking animal oh these are
just some examples okay so before we go
on let me just explain what a family
provider is and up until this point our
providers have just been read only you
just have a provider and you just read
its values okay or watches values or
listen to the values however you
sometimes may actually want to send a
value to a provider you want to say here
is an object given this object do
something and give something back to me
and our thumbnail provider is exactly
that so it is a provider that is going
to take in a a thumbnail request and it
is then going to return an image with
aspect ratio to us okay so it's going to
be it's going to be very fun to
implement and just remember when you see
family providers as you'll soon see it's
a modifier that we're going to apply to
our provider it is if it's a family
provider that is a provider that
actually takes in a parameter and just
doesn't just return a value but it takes
a parameter as well okay so let's go
into the activity bar let's find our
folders and Orient ourselves a little
where we are let's go to image upload
folder and then right click on it and
then we're going to say a new folder
called providers and then slash
thumbnail
provider.dart okay now we have our
thumbnail provider Dart file in here
gonna get rid of the activity bar and
then we're going to create a thumbnail
provider which takes an an instance of
thumbnail request and then it returns a
future of image with aspect ratio so you
know that given that this provider is
going to return a future then it should
be a future provider so always look at
the return value of the provider then
calculate what type of Provider it is if
it returns a future so it is a future
provider okay so we say final thumbnail
provider then we say this is the future
provider and it's going to be also
imported from hooks riverpot
then in here I'm just going to remove
that set of parenthesis and then we say
it's a family okay so it takes in a
parameter and also it is auto disposed
we've already done Auto dispose before
meaning that once no one is using this
guy anymore then it is dispose of
so then you start with uh generic
parameters in here okay it is the return
value and the input value always like
that so first you specify what you
return then what you're taking as a
parameter because if you go in here
I believe into a future provider let's
see in here
I think it's in family that we actually
it is the generic constraints on this
one are a little bit strange even for me
to read to be honest with you
um because then yeah you just need to
learn it I think I don't actually know
how I found this maybe I just looked at
the documentations but I can see it's
very very strange to have a look at in
here I can see this one which is a t but
it's just one generic in the family it
goes into the Builder and this one
doesn't have actually let's have a look
in here
State and Arc oh there we go there there
it is it's here future provider family
State and Arc so what you return at zero
State and then the argument okay so
that's where we got it so the return
value of this guy is going to be image
with aspect ratio which is going to be
Auto imported and the input is a
thumbnail request which is autoimporter
as well okay then in here
you go ahead and do this and in the
parenthesis right here actually one set
of parentheses you need to specify your
ref first and then the second argument
is going to be your thumbnail request so
you say thumbnail request and this is
our request okay and let's see
so right there we have one parenthesis
missing then we make it an async
function and then a parenthesis
semicolon and we're good to go okay so
it seems like we're done basically there
so that's how the how the function looks
like it looks a little bit dirty but uh
it is what it is okay so inside this
async function our job is to basically
return a value of image with aspect
ratio so let's go ahead and say final
image image in here so we're gonna an
image is Gonna Come From material so
let's import material in here okay
so we need to then given I mean this
request look at the file type you can
see in here if it's an image file type
then we have to calculate the image and
place it in here if it's a video then we
have to use our video thumbnail plugin
in order to calculate the image for the
video as a thumbnail okay so we switch
the requests a file type
okay I usually get help from Visual
Studio code to complete the missing case
clauses if it's an image then I'm just
going to say image basically this one is
equal to image read from a file from the
requests file remember we have that and
the fifth is going to be a box fit fit
height all right there we go so that's
that
if it's a video then we should say final
a thumbnail maybe let's just call it
thumb and then we await on and then we
have to have a video thumbnail so we say
await and video thumbnail which is going
to be Auto imported from video thumbnail
package which we've already added to our
project okay then we say dot thumbnail
data okay
the video is going to be a request dot
file dot path so that as you can see the
video parameter is actually the pass to
the file okay this one you can read the
documentation I think thumbnail image
data in memory as it can be easily by
image memory the video can be a local
video file or a URL okay so
that's that part then we're going to add
some more parameters in here then we say
the file the image format let's uh
get it as JPEG and the quality is around
75 actually no quality here you say 75
out of 100 okay we don't want very sharp
images okay then we say if image or
sorry if thumb is null if we couldn't
grab the the video thumbnail then we
have to throw our beautiful could not
build thumbnail exception all right
however if that's not the case then we
say image
is equal to an image reader from the
memory of this thumb because you can see
this is the uint8 list
which isn't optional actually in here
we're throwing exception and so maybe we
could put it in here actually like this
boom boom all right
like that
um actually no I think this will work as
well I think Dart is smart enough to
understand that this throws an exception
so we get out of this entire function
and this is when the image is uh sorry
that the thumb is not null that's good
enough for me I would say let's import
file types so that we don't get all
these errors good
image is assigned to in both cases here
for the video and here for the image
then what we need to do is to go ahead
right after this and calculate our
aspect ratio so right after I would say
this one let's go and calculate our
aspect ratio so we say final aspect
ratio is a weight on the image gets
aspect ratio
ratio and we need to all we need to
import this guy so boom okay so we have
our aspect ratio then we return an image
with aspect ratio
here boom so we have our image and we
have our aspect ratio we just return
them so this you can see now your
providers may look kind of scary but
they really aren't it's just you say
it's a family because you need an input
parameter of thumbnail request you have
an auto dispose because you want to get
rid of it when you're done
and you return an image with aspect
ratio all of this is inside a future and
therefore you create a future provider
so if you if you call this thumbnail
provider later as you'll as you'll see
how we actually call it you will get a
future of uh image with aspect ratio
back okay
good stuff now that we have that let's
go ahead and create a file thumbnail
view basically given a file it will
display its funnel for us okay and that
is going to be used
right here actually so we we can give it
a file then it creates a thumbnail
request sends it to this provider and it
grabs the thumbnail and displays it as a
view okay so basically gluing it
together what we've written so far
so
let's go then into lib views uh
components okay and uh let's see into
here we have lib
State views components and in components
then we're gonna just create a new file
right here and we're going to call it a
file thumbnail view so right click new
file file
thumbnail view.art okay
it's going to be a bit of code it's not
too much but it is a little bit of code
actually I would say maybe about 50
lines of code about
so let's go ahead in here and say class
file thumbnail view all right and it
extends a consumer widget so maybe I
should say sdl and it says file
thumbnail view in here and let's import
Hooks riverpod and also we need material
in here so let's see import material
okay
so this guy takes a thumbnail request
actually as a parameter so we say final
thumbnail request so given a thumbnail
request a thumbnail request then it can
display that uh thumbnail all right and
we add it as a required property in here
so let's say required
okay
and we need to put it after this boom
like that let's see what I've missed in
here
what do we have super key oh no this
needs to be here okay so we have the
basic requirements for the file thumb
nail have I written it correctly
thumbnail yeah that's right so what
we're going to do in here is to go ahead
and basically send a request to sauna
provider how do we do that how do we
pass a parameter to a provider well it
is very easy it's just with uh watch
again okay so
let's go into ref watch and then we say
we're watching a thumbnail provider
okay so Auto Import however you see now
you get an error because it says hey
this guy needs an argument it needs the
thumbnail request then we say okay we
pass the thumbnail request in here then
okay then your error goes away and if
you say final thumbnail
you can then see so conveniently your
thumb is your async value of your image
with that aspect ratio we've already
worked with async value before so you
know that it has a when function using
which you can return various widgets
upon different states of your thumbnail
okay so let's go in here and thumbnail I
don't know why thumbnail looks strange
to me I always think that I've
misspelled it so we say return a
thumbnail
dot when and then we have various uh
arguments in here so for loading let's
go ahead and return our loading
animation view so we say loading in here
is a function and we say return loading
animation View Auto imported okay for
error then we're gonna go ahead let's
let's see if it can also complete it for
us it can't so I think we say error and
then stack Trace in here
and then we return our small error
animation view boom okay as a constant
and for data can it help us yes for data
let's say this returns an image with
aspect
ratio because if you hover your mouse
over it you actually see it is indeed an
image with aspect ratio okay so now that
the cool and that I mean I mentioned
that every time in our UI we work with
images we're working with images with
aspect ratios and this is the cool part
for me because we don't have to worry
about oh now we have an image but what
is a aspect ratio we have to go and
create a completer and then display it
no we have all that data inside image
with aspect ratio so we just wrap it in
an aspect ratio
um
widget and the aspect ratio is here
right here okay and our child is our
image with aspect ratios image okay so
have a look at the code you can see it's
wrapped inside image sorry aspect ratio
and the image is available and the
aspect ratio is available so very very
easy okay
and maybe let's put error at the end I I
like this kind of structure a little bit
more so the data while it's loading and
then what happens if things go south
good stuff okay so
um now that we have that let's go ahead
and work on our post settings and
basically these things so we need a
modifier and also we need a provider for
our post settings so
what this Notifier is going to do is
while you're in the screen and we're
going to create a provider which is
going to hold on to our post settings
and as you change these values these
values are going to be reflected from
your UI into your provider then into the
Notifier okay so if you think about a
Notifier that needs to keep a state it
needs to keep an array or a map of these
post settings and a Boolean value of
true or false
so it needs to keep a state so what type
of Notifier do we need do we need well
we need a state Notifier because this is
our state object so once you create your
state Notifier then we're going to go
and create a provider for it as well
which has something again to do with
state right so
and you'll soon see actually how the
provider is going to look like but let's
go first work on the Note fire and again
just to be clear this Notifier is going
to be used in while you're in this View
which is going to keep track of these
Boolean values okay so instead of having
some sort of a simple location sorry
simple Boolean storage we can wrap it
inside a state Notifier which then is
going to go into its own provider okay
so and that provider of course going to
be a state Notifier provider just to
yeah just to give it away all right and
let's close this close this let's go to
view appearance and activity bar in here
and we're going to create a new note
fire so it's going to be in lip State
Post settings let's see lipstate pose
settings in here okay we have constants
and models we need to create a new
folder called notifiers and in there
we're going to create our post settings
Notifier so right click on post settings
and then we're saying notifiers and then
we say slash post settings
Notifier
fire.art okay I think that's good enough
all right
um get rid of the activity bar I wish
there was a shortcut for getting rid of
the activity bar and that's okay so we
say post setting Notifier actually I
think I call it post settings and
Notifier but we're calling it post
setting maybe that's okay too let's just
call the Post setting Notifier
and we say it extends States and on fire
okay Auto Import it from Hooks riverpod
and and just a refresher a state
Notifier it has a it has an object
called state
and that state and you can just set it
with a variable as soon as you set that
your provider can pick those changes up
and relay those changes back to your UI
so that's the beauty of State not fire
okay it's not a change Notifier as a
state Notifier it actually has a state
object a change Notifier also can notify
its listeners of something changing but
a change Notifier will never say
actually what exactly changed it just
says something changed okay but a state
Notifier I can't have a state object
that your provider will know exactly
what has happened in that state change
because if you implement equality for
instance and then it will know exactly
oh has it changed or not so it is really
cool it's a very small change note of
our widths proper generic parameters so
we say map
a map of uh post setting
okay post setting and bull like this and
then we create the class body so we need
to hold on to a map of post settings and
their pool parameters so for the
Constructor of this guy let's say post
setting
Notifier
I think setting get Notifier oops like
this it has no input parameters but it
needs to call Super with a a map of
posts setting embold because you always
have to have a if I mean if you look at
this I think we'll find another example
of it somewhere else here remember this
one alt State Notifier we have to call
Super because there's also State
Notifier we have to do the same thing in
here so
let's see if I can get rid of
somehow get rid of
primary sidebar okay so let's call Super
in here and in here we need to pass it a
map so I like to create unmodifiable
Maps so let's say on modifiable map view
Auto Import and in here then you create
a map okay then we say four final
setting in post setting
like this dot values then we say take
the setting and the value of true okay
like that so what this does is that it
says every time you go in here in this
view by default we create a post
settings Notifier and its provider and
by default all the settings are turned
to true so if you look here try to
upload a photo everything is true by
default even if you turn these off for
this post and post it then you as soon
as you create a new post then these
settings I are turned to True by default
okay
then we're going to go ahead and create
a void function here called set setting
so we say set setting okay
the setting is going to be a post
setting and we say setting and then we
say bull value like this all right
then we say
um the existing value first we grab the
existing value final existing value is
we have our state remember our state is
actually a map of post settings so let's
grab this setting out of our existing
state then we say if existing value is
null or
uh sorry
or existing value
is the given value like oops did I write
something incorrectly like this state
setting
existing value null or I don't actually
know oh here yeah so we say if the
existing value is not or the existing
value is the value we just return okay
because we can't set a setting that we
don't have so we are not just going to
go inserted in this case I mean you
could write an if statement here and say
if existing value is not then added to
the state but what we're saying is that
we know that we've already initialized
our state with all the available
settings you see we're going to post
setting values which contains all the
allow likes basically allow comments but
if we don't have it it means something
really strange has happened meaning that
when we initialize this guy we
initialize it with all the post settings
but you're giving us a post saying that
we don't have how could that happen
is some dark magic so in this case and
in the case of existing value being the
current value that you're passing to us
we just don't change anything okay
otherwise we say that okay you gave us a
new value for an existing post setting
then we have to set it so we say state
is map unmodifiable
then we say we take a map from our
current state and we just change that
setting uh
e to the given value like this like this
all right so this may be a new format
for you as well but it's just like the
quickest way to create unmodifiable map
and update an existing key inside the
current map okay
good stuff now that we have this guy we
can go to our post settings provider so
we haven't really done the post settings
provider but it's going to be very easy
it's just going to return in your
instance a post setting Notifier so let
me bring up the appearance so activity
bar sorry not bring up the appearance
but bring up the activity bar
so here we have the notifiers folder
let's create a new folder in here called
providers so right click on post
settings new file and we say providers
and write and slash post settings
provider.dart okay so let's say final
post setting provider and then we say if
this is a state it's not fire
provider and hopefully it got Auto
imported from hooke's riverpot
and since this is a state Notifier
provider first you have to specify what
type of uh node fire it has excuse me
then we say it has a post
setting Notifier which is going to be
Auto imported and then you have to
specify the object that this post
sending Notifier manages it is a map of
post setting and bull so let's copy that
and bring it in here boom boom okay and
it takes a ref and it creates an
instance of post setting Notifier let's
import this post setting like this and
then I'm going to show you the entire
code so our post setting provider just
looks like this it's a state Notifier
provider it has an object of type post
setting Notifier and that object itself
has an object of type map post setting
and bull that we basically use like this
okay so we now have our provider for
posting so
then what we're going to do is to go
ahead since we're going to work now a
little bit more with providers that have
a loading State such as when you're
trying to for instance
upload a new post or that you're trying
to download the thumbnail of an image
etc etc we have a Boolean property at
the moment that displays that that
indicates whether something is loading
or not so if you go to our is loading
provider is loading provider you can see
at the moment it returns a Boolean but
what we're going to do is to Define this
Boolean as its own type definition and
we're just going to call it is loading
okay it's just a little bit cleaner to
look at than just simple Boolean all
right let's close these files then we're
going to go to lipstate image upload and
then we are going to create a new folder
new file and then I'm going to say type
defs slash is loading dot Dart
then we just go in here and type type
def is loading is bull so that will that
will be enough and this is something
I've mentioned in other places as well
on social media for instance on LinkedIn
and also on um Twitter that I really try
to take advantage of type definitions in
whichever programming language that I
try to do and try to use and um the
reason behind it usually is that you put
a name to a data type basically here if
we create for instance a function
sorry a state uh a state Notifier for
instance that we say here my class
my image uploader and we say extends
State Notifier if I want to have the
state Notifier just to produce a Boolean
saying whether it is loading or not then
if I just type bull whoever looks at
this code says a state Notifier of
Boolean what is this Boolean then I have
to go and write documentation here this
will is indicating if you are loading or
not okay and this is not in my in my
opinion at least it is not so it is not
as good as it it can be so I think in
here if you just go ahead and say is
loading then your code is a lot more
readable so you see oh it's an image
uploader that tells me whenever it is
loading or not okay so try to use type
definitions in your code as much as you
can because they're practically free
you're just creating a shortcut to
another data type basically okay
after is loading we're going to go and
work on our post payload now a post
payload what it is going to do is that
when when we're creating a new post so
let's go ahead in our simulator in here
we go and try to upload a new photo here
there are some uh stuff that we have to
send to Firebase so the text the
settings the image itself the thumbnail
we need to package all of this up and
send it to Firebase I basically pretty
much in a map
in a map of string and dynamic okay so
what would be really good is if our UI
didn't have to construct this map but
instead we could create a payload object
that is extending map view and this
extending map is something we've done
already before so it should be quite
familiar to you so if you want an object
to be representable as a Json just
extend map view with your keys and
values okay and I'll show you how we're
going to do this particular object now
so let's close this is loading file
and go to our activity bar so in lib
State posts let's see if we find it lib
State and we have posts in here okay so
let's go to models and right click on it
and say that we want to create a post
payload.dart okay
so let's create an immutable class in
here immutable
oopsie Daisy immutable class post
payload and we extend a map view of
string and dynamic okay
like this all right extends I believe
and then let's go ahead and import
Foundation here
show immutable and we also have to I
think import Dart collection or
something
let's see Dart collection okay for dark
collection also to be honest we could
say show map view
okay so that we don't have to import
more than uh is necessary into our class
so this guy has quite a lot of um input
parameters such as the user ID the
message the thumbnail URL the file URL
the file type
etc etc and post settings of course okay
so there are
primitive data types they're off for
instance string user ID Etc and then
we're going to take these and turn them
into Dynamic objects or strings pretty
much in most cases or even booleans and
store them inside this map view so let's
say that our user ID so we say final
user ID it's Auto imported and then you
can see user ID is something that we've
already created before is user ID in
here then we have a message
we have message thumbnail URL and file
URL actually okay and all of these are
final final string okay
after file URL we also need to store the
file type so let's say file type all
right then we have file name uh finally
that is a good suggestion by GitHub
co-pilot after finally we have the
aspect ratio so final double
aspect ratio okay
we also have the thumbnail storage idea
and again just just a reminder all of
these are stored right here let's see if
we go to our course Vanda in here and I
think this is the actual course so this
is for this is the back and for the
application that's already completed and
the stuff that we're trying to serialize
are stuff that are here you can see
aspect ratio you see created at file
name file type blah blah okay
so thumbnail URL and I think that's uh
here's aspect ratio thumbnail URL so
these are the parameters that come into
the post payload but we're going to
serialize them into a map view in a in a
few in a few moments basically okay
aspect ratio then let's say thumbnail
storage ID and this is basically the
identifier for our thumbnail after we
upload the thumbnail to a Firebase
storage so every time that we upload any
image or video or any file to Firebase
storage we can identifier back and that
is the ID that we store in here okay so
if you look in here system no storage ID
that is its identifier okay and and it
ends with B22 and that's what this URL
is also doing it ends with B22 okay
that's the direct link to the thumbnail
so we have the thumbnail storage ID and
we also have the original let's actually
call this original file storage ID
original file storage ID and both of
these are strings so we say final string
like this
and then last but not least we have the
post settings so we say required
required map of post setting it's going
to be Auto imported and post sending
post settings they had Boolean as their
values okay
great stuff
um I don't know why I actually put a
comma at the end of all of these lines
or maybe what I was thinking is that
these are not actually properties so
what we need to do is to ensure that
this class in itself doesn't have any
properties so I I think I've written
these incorrectly basically so all these
finals they need to be changed to
required oops let's go ahead and head in
here and change all of these to required
required and then change all of these to
commas at the end then let's take out
all of these and go and create a
Constructor for this guy we say pay post
payload and we have a Constructor that
has all these parameters in then in here
we're going to call our super okay we're
going to call our super and create a map
view that's that's how you create an
extension of map view basically all
right
so let's let's go ahead in here and we
have quite a lot of keys to add in here
but the keys come from post key which is
something we've already created so we
say to user ID is user ID
then we have message which is message
and I'm really actually thankful for
GitHub co-pilot sometimes that provides
some of these values for me I don't have
to type everything now we come to the
interesting part and that is the created
at
you see every time and actually the
first thing that you see is a created
app is not a parameter that you're
getting in in the Constructor and the
reason behind that is that the created
ad is going to be a parameter where
we're going to ask Firebase to create
for us so any date and time you should
not create really with your client
because you can never trust the date and
time that is stored on the client at
that point in time so we we're going to
create a we're going to use a property
actually a function called server
timestamp I think it's called from a
class called field value
and this field value is coming from
Firebase and it will just indicate to
Firebase upon storing it so when you
send that value to Firebase upon
Firebase receiving it it will understand
that it has to store the current date
and time uh from Firebase server itself
in that field okay so we're going to say
post key created at and in here we're
going to say it is not date and time but
it is actually field value and let's
Auto Import that then we say server
timestamp okay so you can see the value
of this is actually a field value all
right and if you go to field value you
can see it extends field value platform
so let's go in there and yeah it's
pretty much just like this I can't
explain it more it's really just cryptic
to be honest with you so it's doing some
black magic basically under under the
hood okay
and then we go into thumbnail URL is
thumbnail URL then we have file URL is
file URL file type file type in here and
we say file type name I believe we have
a property on our file types uh
it is the enumn name right so because
the file types of type file type and we
just store image or video so the name it
just gives us the string name of that
file okay so you can see its image in
this case all right
so after storing file type let's oops
let's store file name
good file name is stored as it is then
aspect ratio as well as a double it can
be stored in Firebase firestore directly
and then we have the thumbnail storage
ID we have the original file storage ID
and now we come to post settings which
is going to be a little bit different
and in here we say post settings and
it's is its own map then we say for
final let's actually see if GitHub
co-pilot could complete this correctly
for me we go through our entries and
then we put the name of the entry
actually no this is where GitHub copilot
is wrong we don't want just the name of
every entry uh because you see the
entries are post settings and post
setting is a is in itself is an enum and
so post setting
is an inum and getting its name is just
going to give us this as a string and
that's not what we want because if you
go back to post setting you remember
that we created a property called
storage key that's what we want not the
name in here so we say key storage key
okay so be very careful with that please
don't write it like key.name or
something as GitHub co-pilot suggested
then we have the post setting and the
value so that is pretty much it really
that is the
excuse me that is the serialization of
our post payload all right so now that
we have the post payload let's go ahead
um
and work on our gets image data aspect
ratio so let's see we haven't written
this file yet get image data aspect
ratio but what we're going to do is to
work with
a file and and create an extension on
uint8 list that can turn in that uint8
list to an image and then get aspect
ratio okay because at the moment I think
get aspect ratio we have that on image
but we don't have it on uint8 list so if
we already have an image in memory then
we can get this aspect ratio but what
about the case that you read an image
from users library and and that is going
to be uint8 list and then we want to get
us aspect ratio how do we do that do we
have to create an image out of that and
that's what this extension is going to
do first so let's close all the files
that we have and go ahead and create our
new extension which we're going to call
git image data aspect ratio okay that's
going to be in lip State image upload
lipstate image upload in here and then
we're gonna go into extensions and get
image data aspect ratio we have in here
and that is at the moment is is very
interesting because this is called gets
image data aspect ratio and it is an
extension on UI and T8 list which we
need to have but we have it pretty much
as uh let's see gets image data aspect
ratio and this is get image aspect ratio
so let's create a new file in here
pretty much so new file and we call it
get image data aspect ratio so if you
want to get the aspect ratio out of an
image data
all right
and the more people has an extension
data oh
what did I name it
let's rename this get image data aspect
ratio dot Dart like this okay so let's
create this extension extension get
image
data aspect ratio and this is on a uint8
list okay which I think needs to be Auto
imported from Foundation okay
good stuff let's go ahead in here and
say show
uintth list like that all right and then
we say this guy returns a future because
internally we're actually going to use
this this extension we see git image and
get aspect ratio
but in order to use that we need to have
a material image so let's go ahead and
create a material image so we say we
return a future of double because the
underlying function that we want to use
actually creates a sorry it returns a
future off double so we have to return
the same thing so we say get aspect
ratio and in here we're just going to
say final image is and let's import
material so we say import material
because we're going to work with
material images and we say
as material
show image so we just need image so we
say material
image
um
oops image and I think there was a
Constructor oh from memory there we go
so this one takes the bytes from memory
and it's interesting because we're
actually extending uint8 list so this
instance is actually our bytes so let's
just type this okay
once we get the image we can return the
image get aspect ratio and that is our
own function which we have to import so
let's import that and there we go
so now we have our extension Networks
on
on uint 8 list instead of just pure
images okay
then let's go ahead and get um so we
have a file type okay in here the next
step that we have to so let's just save
this The Next Step that we have to take
is to go ahead and get a collection name
out of file type so let's refresh our
memories in here so file type is it can
either be an image or video and if you
look at how we're storing these guys in
our storage so this is a user ID we go
in here you can see this user has images
and thumbnails if this user had videos
as well then you would have seen a
folder that said videos so actually you
see here this user has videos okay so
what we need to do is to go ahead and
say okay given a file type what
collection name in Firebase storage do
we have to store those data in so given
a file that is of Type image then that
files a thumbnail and image it's sorry
that files image itself needs to be
stored in a collection called images
okay so we're gonna create an extension
that turns a file type into its string
representation of collection name it's
very easy conversion of enum to string
okay so let's close this file type guy
and let's go to lip State image upload
and then we have extensions folder
already let's right click on it and then
say get collection
collection name from file type dot Dart
okay and this guy is going to be an
extension so we say extension collection
named extension and names are up to you
how you want to construct them okay and
what you actually want to name your
extensions on file type and that was
Auto imported so let's go ahead in here
and say we have a string get collection
name
and let's see GitHub co-pilot if it
actually suggests that the correct stuff
to me in here so file type image returns
images and file type video Returns
videos that's exactly what I wanted to
type so thanks GitHub co-pilot all right
so that is another one then the next
thing that we need to do is just to
ensure that we've created our constants
in here so let's see image upload we
don't have our constants and that's
something that we need to go ahead and
create now because we have some
constants for instance and for the image
thumbnail width so when we generate a
thumbnail what width should it always
have and also the video thumbnail Max
height for instance and also the video
thumbnail quality so it's going to be
for instance 75 out of 100 so these are
some constants that we don't want to
hard code into our application so before
we go ahead and use them let's go and
create these constants into its and
their own files so in lib I'm going to
close this file
in lip we're in image upload and we need
to create a folder and we say new file
in here we say a folder called constants
and a file called constance.dart as well
okay so this one's going to be very
familiar for you we've done this many
times before we say constant so I'm not
going to explain it so much more and
constants a private Constructor okay
Foundation as usual
all right show me mutable
and then in here we're going to go ahead
and add R constant so let's say static
const image thumbnail width and we're
going to say this is 150 pixels we say
static cons let's actually say this is
for for photos and we say four videos
okay so we have one constant for photos
and two constants for videos we say
video thumbnail
thumbnail Max height is a is 400
thumbnail did I correctly write it yeah
and then also static const video
thumbnail quality
is 75 let's say so if I can type it 75.
all right that is it really for this
file so there's not much more to to do
actually on that file now after all of
this we can go into something that is
more River pod based and this file is
going to be one of the absolute most
important files that we're going to
program in our application and this is
going to be our image upload Notifier
okay this is going to be the guy that
does all the uploads for us so when you
upload a file it's going to take that
file break it down if it's a video it's
going to upload the video into its own
storage in Firebase storage it's going
to generate a thumbnail out of that
video upload a thumbnail separately it's
going to gather the thumbnail and the
video and then create a post and then
upload it into Firebase firestore and
then it's going to return true or false
to us saying whether it's succeeded or
not so and if it's a photo it's going to
do the same thing so it's going to do a
lot of stuff and it is since that we've
created a lot of utilities we've created
a lot of constant files utilities
um pretty much our code is at the moment
very com it's into it's compartments
okay and we're not going to hard code
everything into this upload Notifier so
it even though it's doing a lot of
things it's going to be very clean as
you'll soon see okay so this guy is
going to be a Notifier and when I say
Notifier I just mean a simple State
Notifier and its state is going to be is
loading remember this guy is loading so
it's just going to indicate whether it's
loading or not and after that we're
gonna go after we're done with this
Notifier and its provider we're gonna go
to our is loading provider and hook it
up and add it in here so that our is
learning provider will also read the
loading state of this Notifier that
we're going to go ahead and create for
uploading images meaning that anytime we
try to upload a photo or a video with
thumbnail as posts then our application
will start displaying the loading screen
okay it's all magic
so let's go into lib State and we have
image upload and let's see what we have
in here models providers we have a
provider and that is for thumbnail
provider but let's go ahead and create a
new folder in here called notifiers so
right click on image upload and
notifiers Slash and this is going to be
our image upload nodes fire dot darts
okay
and since this is a big file and we
don't need to jump around so much let's
go ahead to appearance and remove
activity bar so we can focus purely on
our code okay
so let's let's say class image upload
Notifier and this guy is going to be a
state Notifier so Auto Imports flutter
hooks sorry hooks riverpot and we're
going to use is loading as our state
which is going to be also Auto imported
here okay
now remember every state Notifier has to
have a default state so let's say image
upload Notifier and it has a Constructor
that calls super and just says false
okay
now you see even at the call side in
here and you may be thinking um but what
does this even mean Super false then you
have to go ahead and look at is loading
to understand that oh false means it is
not loading okay
uh but what you could do in here uh
you could go ahead really and create
other type divs in here I mean I'm not
going to do that but you could say type
def like you could change this it's
loading and say loading state
okay and then you go you can go ahead in
here and say that is loading State and
then you could say type Def
is loading
is true actually we can't say it's true
we could say const Okay and like let's
see is loading and const is not loading
so you could do something like this and
go ahead and say this is loading State
and here you could say is loading it's
not loading
okay so you could do this as well but
I'm not gonna do that so I'm just giving
you the idea of how you could construct
your code so that it is cleaner but to
me that is clean enough so I understand
that okay I'm not loading so anytime I
set my state in this entire State
Notifier I know that I'm working with my
loading indicator basically I'm saying
I'm loading or I'm not loading okay
good stuff now
let's go ahead and create a Setter in
here and now that we're not adding all
those new um constants in here we could
make it a little bit easier for
ourselves by creating a Setter so we say
set is loading and so we say then we
give it get a value and then we could
say state is value so simply with this
is loading Setter now we can tell our
application whether we're loading or not
so if we go in here test it we could say
is loading is true so this is a little
bit nicer than saying state is equal to
True okay so that is a little bit of a
middle ground solution so if we're not
going to go and add those new constants
into is loading and then we could use
this is loading Setter instead okay
enough with the uh details let's go
ahead and implement the upload function
so let's go to Future Boolean here and
this pool it just indicates whether this
function was successful or not and then
we're going to say upload so this is
going to be our main and only function
actually
inside this class which takes care of
uploading images and videos to our
backend
so there are some properties that we
have to actually some arguments that we
have to pass to our upload function so
there are not so many I think we have
the we need the file so let's just say
we need a file to upload okay and this
is going to come from I think let's
import it from Dart IO okay not from
HTML I think the first one is coming
from Dart HTML let's import the one from
Dart IO then we say that is the file we
also need the file type I mean we can't
just get the type from the file itself
easily so let's say a required file type
file type okay because our application
or the UI mainly knows which file type
we're working with if you're uploading a
photo then the file tab is going to be a
photo otherwise it's going to be a video
okay
then we also have the message so a
required spring message and that is the
message that the user posts with the
file
then we have a map of post setting
which is going to be Auto imported oops
map also needs to be imported I think is
from
or maybe not map post settings so let's
see if we can import post settings in
here and then we say these are our post
settings and we I think also need the
user ID so let's say required required
user ID user ID like this okay remember
user ID is also type definition of type
string okay so nothing special in here
let's turn our function into an async
function and then what we're going to do
is as soon as someone calls our function
then we're going to start loading okay
so let's say is loading is true and this
is calling our Setter function okay
let's go ahead and import file type so
we don't get this error and we're
getting this error right here because
we're not actually
returning any values yet but I just
scroll it off the screen so I don't have
to see that ugly
um error at the moment okay so now that
we have is loading set to True let's go
ahead and Define a late variable that
will contain our thumbnail data and data
usually I mean in pretty much all my
flutter applications when I'm working
with data I'm working with uint8 lists
okay so let's say uint8 list and this is
going to come from flutter Foundation I
think yeah and then we say thumbnail
uint8 list okay so this is going to be
our thumbnail then what we need to do is
to switch the file type so let's say
switch file type like this and then
we're going to add the missing Clauses
let's go ahead and first calculate the
thumbnail for our image all right so
let's say
we go ahead and we say final file as
image
then we need to actually import uh
import our image package that we had so
if you remember if you go to our Pops
fakey ammo
and then somewhere I think we've
included image all right so since this
image is a little bit of a strange
package name which because you also have
Foundation image sorry a material image
and other images we need to go ahead and
prefix this package import with IMG or
something that distinctly
um
tells us that this is coming from the
image package so let's say import image
like this and then we say as IMG so
anytime you want to use something in
here then you have to say IMG dot okay
and then you get to that symbol or
function whatever it is okay then we say
in here
we want to decode our file so we say IMG
decode
I think there is a function called the
code image or something decode image and
then in here then we say the file read
bytes sync okay so we synchronously read
the bytes in here but it doesn't matter
because we're inside an async function
anyways okay
so we have the file as image then we say
if file as image is null we couldn't
actually get the uh this data file as
image you can see it's an optional image
if it is null if you couldn't get that
there is really no point in continuing
with this function because we can't even
get the image out of the file to create
a thumbnail out of it okay so what are
we doing so then we say then we abort
the is loading so we say we're not
loading and then we return false
immediately so we don't continue with
our function okay then we create the
thumbnail so we go ahead in here
and we say final thumbnail is then again
we go into image then we say copy resize
there is a function called copy resizing
here you can see you pass in an image
then you can pass some optional
parameters such as width and height and
into this and then you get pretty much a
thumbnail out of it so we say file as
image which is this file in here okay
and then we use the width of constants
image thumbnail width all right let's go
ahead in here and let's import our
constants now which one is it the state
image upload I think it's that one okay
so then we get a thumbnail which is of
Type image all right then we need to
grab its data so we say final thumbnail
data is IMG encode jpeg like this so we
out of this image some nail we grab its
data you can see it's a thumbnail data
all right then we need to assign this
guy which is a iron list of ins to this
guy which is a uint8 plus so how do we
do that well you can use actually your
int 8 list to convert a list of ins to
uint8 list so we say thumbnail uh
thumbnail Uinta eight list is this
actually this was a great suggestion
this is exactly what I want to type so
you are in T8 list from list and you can
see it takes a list of ins and converts
it to Uinta so now this this way we grab
our thumbnail basically okay that was
that one for grabbing the thumbnail out
of a file type image now we have to do
the same thing for videos so let's say
final thumb
is a weight now we're going to use video
thumbnail you remember we have already
added this to our project so we say
video thumbnail and get a thumbnail I
think data it's called this function
yeah and let's break it down into
separate lines so the video comes from
the file path all right then we say the
image format we want to get image format
of type jpeg so we want to generate a
JPEG a thumbnail out of our videos then
we have a Max height and I think that
comes from Constance video video
thumbnail
thumbnail Max height all right and also
we have to specify the quality so we say
constants a video thumbnail quality okay
then we do the same thing in here that
we did up there so we need to make make
sure that the thumbnail could be
generated so we say if thumb is
null
and then we abort the loading all right
and then we return uh false actually I
wonder if we should return false
or we could maybe even throw an
exception
to be honest with you we could throw an
exception and also we could change that
function to throw an exception okay
because I think could not we have this
exception so the question is should we
just return false or should we throw an
exception
maybe you could just throw this one okay
so let's just go ahead in here and say
we throw could not build thumbnail
exceptions so this is this is pretty
good too okay so let's go ahead and
throw the same exception in here when
we're building the thumbnail for an
image like that all right
and this basically throwing in here just
terminates the execution of this
function entirely so you don't have to
return okay
then
otherwise we have to set the thumbnail
uint list to thumb as you can see in
here okay and then we have our break
statement good
after this we need to go ahead and
calculate so we say calculate the aspect
ratio so that's something that we need
for our posts okay thankfully if you
remember we have an extension or on
uint8 list that can grab the aspect
ratio for us so we say final thumbnail
aspect ratio is a weight on our
thumbnail uint8 list then we say get
aspect ratio like this and let's import
this
from there do you remember this function
that we just wrote on uint list that
returns a future of double and since
we're awaiting on it here we have the
aspect ratio ready to go okay
now we if you go in here let's go into
let me bring up our database in here
let's go here and you can see every post
that we make it has a file name but
where did this file name actually come
from you may be thinking oh maybe it
came from the image gallery but no
that's not what we're doing we're
actually generating a file name using
uuid Okay so let's do that so we say
calculate references then we say final
file name is uuid const euid
and let's import uuid
then we create a V4 uid as the file name
okay so that's a good way always to
create a random file name basically okay
and then we say create references
to the thumbnail and the image itself so
I usually write comments so that I know
what I'm going to do specially in large
functions so if I have small functions
function I don't write so much comment
but if there's a big function I type
some comments to know what we're
actually doing okay
and so we need to create references to a
thumbnail and the image itself so these
are coming from Firebase firestore so we
need to go into uh not here Cloud
firestore but also sorry but instead in
our storage which is right here so we
need to create the references okay but
for the thumbnail so we say final
thumbnail ref you can see the the
thumbnail ref is going to be inside the
users folder so we have to get the user
ID then inside a folder called
thumbnails and in there we create a new
thumbnail under the file name so we say
Firebase firestore it's going to be Auto
imported instance
and then we say ref oops
instance
instance I think
yeah rough we we don't have any ref in
here
oops I've written Firebase firestore
sorry it should be Firebase storage
Firebase storage
Auto Import okay instance then we get
ref
and then we want to go into a child and
the first child as I mentioned is going
to be the user ID in here okay so we
have the user ID that's the first child
the second child is going to be the
folder for thumbnails it's going to be
here okay so let's create another child
and then we say Firebase collection name
thumbnails all right and then we say
another child this child this time is
going to be the file name all right and
file name we've generated right here so
let's go ahead and say file name boom so
that's our thumbnail ref then we are
going to get the original file ref okay
which is going to be whether you have
uploaded if it's an image it's going to
be inside images folder if it's a video
it's going to be inside the videos
folder and I remember we had an
extension on file type that gave us the
Firebase collection name so let's use
that extension so we say final original
file graph is we do the same thing as we
did in here we go under user ID then we
say we want the child that is for uh
let's see there is the file type so if
it's image image then it should go under
images then we say uh dot oops I think
we have file type in here but we have
another an extension on file type that
gave us the collection name right and we
have to import that extension now so
there we go
and then we say the next trial after
that it is the same thing as in here
finally boom
good stuff now that we have that we need
to do the uploading so it has to be
inside a transaction so we have to
upload the thumbnail then we have to
upload the file itself and after that we
have to create a post payload and upload
that to Firebase firestore so two need
to be uploaded to Firebase storage and
one which is the payload itself which is
here has to be uploaded to Firebase
firestore okay you see this is the
firestore for the post and payload
itself and the data needs to go into our
storage so let's create a try statement
in here okay and then we create a catch
statement so we say catch
and in here we just catch some air and
we create a finally and in finally we
say is loading is false it's very
important okay let's go inside catch and
program the cache then we say return
false okay and that's where we know that
things didn't go so well
and also finally will be called even
after a cat so is loading is going to be
set to false after uh after that without
us having to first set is loading to
false in here as well okay so finally
gets called for cash as well that's what
I'm trying to say in try let's let's go
ahead and create an upload for upload
task for our thumbnail so we say final
thumbnail upload task is and we await on
our this this guy thumbnail ref
a weight thumbnail ref
and then we say put data okay so we have
the reference now we have to put the
data for it so we say thumbnail und8
list all right then we say after the
upload is done for a thumbnail we get
its storage ID so we say final thumbnail
storage ID is we grab the task
then we get its reference name so that's
our thumbnail storage ID
after that so let's say upload upload
the thumbnail
okay
after uploading the thumbnail let's go
ahead and upload the original file all
right then we say in here we have to do
something very similar actually so let's
just copy this guy
I wonder if we should copy it or if you
should just type it by hand because
there's just so much to change anyways
so let's let's do it by hand we say
final original file upload task and we
say original file ref put the file
itself in there this is a good
suggestion by GitHub copilot because
this is the code that I wanted to write
and then we get its storage ID using its
ref name all right after we've uploaded
the thumbnail and the original file we
can go ahead and create our post payload
and upload that to Firebase uh firestore
okay so let's say upload the post itself
and then we go ahead
um that was a huge suggestion but that's
not what I want to do let's say final
post payload so we say post payload it's
going to be Auto imported lots of
parameters to feed into it okay so and
we have the user ID which is good the
message fits right in thumbnail URL is
going to be our thumbnail ref so we say
we await on our thumbnail ref and we get
its download
get oops gets download URL okay so we
always want to have a direct URL to our
thumbnail reference in here which you
can see in here let's go to Firebase
firestore you can see we have a
thumbnail URL okay so we don't have to
dig down into various collections inside
Firebase uh storage in order to get our
thumbnail we actually have a direct URL
to it okay
so we get the download URL and also for
the file URL we're gonna await on the
await on the original
original
file ref dot gets download URL okay
we have the file type and file name this
is our aspect ratio we say thumbnail
aspect ratio all right
and then we have the thumbnail storage
ID original file storage ID and also
post settings I think I mean to me this
looks fine maybe I've missed something
but to me this looks completely fine at
the moment all right now we created the
post payload we need to upload it to
Firebase firestore so let's say we await
on Firebase firestore dot instance and
then we go inside the collection for
Firebase collection name posts okay and
then we add a post payload like this
okay so because you see our posts in
Firebase firestore
let's go in here into the root folder
our Firebase firestore is not divided
into like user and then slash comments
post all posts in the entire system are
going to be posted inside posts
collection and in there these posts have
a let's see a property that says which
user posted this okay so our Firebase
firestore Collections and data are a lot
more flat than the ones that we have in
Firebase stores because they're under
use or IDs okay and this is just a
little bit of a security thing because
we want to really ensure that the
specific files can only be read or
deleted or updated by specific users
okay and you can change these structures
quite easily if you wanted to suit your
needs
okay now that we have this we have an
air still up here so let's see what it
says probably something with the return
value the body might complete normally
causing null to be returned and let's go
in here and see if we're returning and I
can see that we're not returning true in
here and that's the problem so return
true okay and now the error is gone
good stuff now we've created the
Notifier we can go ahead and create this
provider remember the notifiers are
doing the maturity of the job the
provider simply usually just provide the
Notifier okay so let's go ahead and
create our provider for this image
uploader I'm going to go to appearance
bring up the activity bar and let's go
inside a state image upload in here we
have the providers folder already I'm
going to right click on it and say new
file and then I'm going to create a new
file called image uploader provider
provider.dart okay
so this guy is going to be a state
Notifier provider we've already talked
about this if you have a state Notifier
as your
um
as your Notifier because there are other
notifiers as well like there's a change
Notifier but if you have a state
Notifier your provider should be a state
Notifier provider okay so let's go ahead
in here and say final image upload uh
provider provider is and we create a
state Notifier provider
provider like this
and we say you remember you have two
generic types the first one is your
Notifier so we say image upload Notifier
and and then we are managing is loading
okay which is going to be Auto imported
as well
so in here we get a ref
and then we need to go ahead and create
an instance of our image uploader image
upload Notifier just like that all right
so your code should look pretty much
just like this so three Imports and then
your provider okay
good stuff now that we have that uh we
can go ahead into our
working on creating new posts so this is
going to be the exciting part because
we're now working on this guy actually I
was in there so on this view okay
displaying the thumbnail displaying this
text and the post settings
etc etc and then also making the post so
sending the post to Firebase so at the
moment if we go into our database which
is here data
we have nothing we just have users so
let's go ahead and change that and so
that we can finally have posts we don't
have likes and comments Etc but that is
also about to come so let's close these
files right here and start with or start
on working sorry start working on create
new post view all right
and this is going to be created inside
lit views so we're not in State anymore
let's collapse that Lit views and what
do we have in here let's go ahead and
create a new folder inside views and we
call it create new post okay new file we
say a new folder create new post view
sorry create new post and then under
that we say creates new postview.darts
okay
just like this so create new post create
new postview yeah that's fine
then I'm gonna get rid of our activity
bar so let's go ahead and create
a um
stateful hook consumer widget so I'm
basically we want a consumer widget so
we want a widget that has access to
widget ref
but we also want it to be stateful
because we need the amount of property
okay so this is one of the files that is
going to be actually a little bit more
complicated because we're going to
directly use flutter hooks as well and
if you're not comfortable with fluster
hooks I know in the beginning of this
course I mentioned you don't have to
know flutter hooks I'm going to explain
it but it could get a little bit
complicated but to be honest with you
I'll do my best to explain as much as
possible right now so you don't get
stuck at least but if you're interested
in learning more about flutter Hooks and
all the tricks and things you can do
with it I have a separate free video on
YouTube that you can go and watch just a
few hours actually long that we go into
all details of flutter hooks but if you
don't want to do that it's fine you can
continue watching this course without
watching the other video so I'll do my
best to explain it as much as possible
so what we want is a stateful consumer
basically okay so its type is a little
bit of is a mouthful it's type it's
called stateful hook consumer widget so
just type stf and we want this guy in
here stateful hook consumer widget okay
we're going to call it create new post
View
if you don't have that extension in
Visual Studio code that can create all
of this for you you can pause this video
at this moment and just type all of this
by hand or you can grab this code from
GitHub repository as well for this
course the link to which is in the
description at the bottom of this video
let's import hooks riverpod okay and
then also we need to import material to
get rid of all these errors in here okay
okay then we in here we need to get the
file that the user wants to post so we
say final file you say file to post
okay and this guy is coming from Dart IO
and then we're going to go ahead and say
what is this type I'll type Auto Import
it we say file type let's add these to
our Constructor and we're going to make
these required properties required
arguments in here
and let's put them right there boom boom
and then let's make them required
required like that okay
so now we know which file to post and
also what its type is all right now as
soon as we come in here you see let's go
back to our simulator we need to create
a thumbnail request we need to actually
get this thumbnail guy so let's look
here did you see this loading and then
the thumbnail appear so let's go ahead
and create a thumbnail request so we say
final thumbnail request is a thumbnail
request its file is coming from widget
wow and then oops didn't we have file I
think file to post we call it and then
we say widgets
file type all right so now we created a
thumbnail request we need to now give
this to our um
let me basically give it to someone we
need to give it to someone say hey we
want this uh thumbnail to be provided to
us okay but if you remember we have a
let's go in here final thumbnail View
and this guy in itself uses the
thumbnail provider let's put a comment
here and to grab a thumbnail out of a
thumbnail request so soon when we
actually get to that part of the screen
which is this guy we're going to create
an instances of thumbnail View and
provide our thumbnail request to it and
this guy will then do all the work to
display the thumb up for us okay so the
thumbnail request is there for that
good let's go ahead and start listening
to our post settings changes you see on
the screen
and when you turn on and off these
switches you need to have some sort of a
state manager because these upon you
turning them off they are being redrawn
so we have we have all these components
already ready to go we just have to
start using them if you remember we have
a component called post setting provider
which we give it post settings and then
we can turn them on and off okay so this
is the provider that we're going to use
in here so we are not only giving it
values not only are we turning on and
off things but as they are being turned
on and off we need to redraw our
switches in here okay so as with any
other provider we need to watch those
Changers it changes I mean I shouldn't
say as with any other provider because
as with any other request that requires
rebuilding of a widget then you need to
use watch so let's say final post
settings
okay then we say ref watch
now we want to use the post settings
provider I'm going to import this guy
actually we don't have that post
settings
provider we call it right and now you
can see in here this is a map of post
setting emble okay and if you want to
talk with post settings provider and ask
its Notifier to do something like turn
saying on or off you would say ref read
dots Notifier in here and then you can
do this let's see set setting okay so
you give it a setting and then you turn
it on or off remember this function that
we've written before setting a setting
right so that's how it will work with
those settings
now we also want a text editing
controller which is for this guy and
using flutter hooks you can easily go
ahead and create a text editing
controller without having to do all the
Monkey Business around
vanilla takes a text editing controller
so you would go ahead and say final and
post controller let's call it and then
you would just say use text editing
controller and then for this we have to
import a flutter hooks directly okay and
you can see then it is right here filter
hooks so this literally just gives you a
textedin controller okay and it takes
care of uh basically it manages the
memory for this text editing controller
okay if you look in here once you land
in here the post button is disabled
simply because you have to you have to
type something in here and as as I type
you can see the post button gets enabled
and if I remove everything the post
button gets disabled so we need a state
in here and using flutter hooks you can
use the use State function to create a
Boolean State whether that button is
enabled or disabled so let's say final
um is post button enabled and then we
say use State and we by default say
false okay and you can now see this guy
is a value Notifier of that Boolean
property okay
now what we need is an effect is like a
side effect as the user types in this
guy we want to turn this to to true and
when the user removes all text inside
this text
um text text text field I would say then
we disable this meaning that we turn
this state to false again so let's go
into use uh effect okay
and this is again coming from flutter
hooks
so in here we say a post controller and
let's actually add a listener in here so
we say listener okay and we say is post
button enabled is equal to uh
didn't we call it yep is equal to post
controller
text Dot is not empty all right it's not
um
T like that
and I can see I suppose okay enabled we
can't change it we should change this
value all right so now we have a
listener we have to add it to the post
controller so we have post control then
we say add listener and then we say our
listener in here okay and the return
value of a use effect is always a
function uh you can see in here it's a
void function in this void function this
void function gets called when this use
effect is being recreated so it's pretty
much like your undisposed function so we
say return return a function in here and
in this function remove that listener
okay
and that is it and then we say the key
to listen to for rebuilding this effect
is actually our controller so we say
post controller if post controller
changes then rebuild this effect
otherwise just let it be okay
good stuff now that we have that inside
here let's create a scaffold because you
see this guy is a complete scaffold okay
we create a scaffold and let's have a
look at our app bar the app Bar says
create new post so let's say app bar is
a new app bar its title is a text
and then we say it's using strings
create new post all right and comma
comma and another comma in there and
let's go ahead and import this strings I
don't know which one it is I think is in
views constants and yes that was correct
so let's turn this into a constant as
well so that was for our app bar
then we have an action in here you can
see it's the post button so let's go
ahead and work while we're on the app
bar let's work on our actions so actions
in here okay excuse me
then we're going to create an icon
button so icon button right
then we inside icon button it's icon
let's go ahead and here I'm saying is a
const icon of icons dot send that is
good enough then we need to have on
press in here okay and let's turn this
guy
actually this is going to be interesting
because unpressed is gonna be
um a little bit different I mean okay so
I'll try to explain it like this the on
press is going to be different depending
on the state of this guy and
let's see is post button enabled so if
is post button is enabled meaning that
some the user has typed something in
here then we need to ensure that this
button this icon buttons on pressed is
set to a valid function however in order
to disable this button you need to pass
a null on pressed function to sorry a
null unpressed argument to this button
that's how you would disable such a an
icon button so in here before we provide
a void callback to unpressed argument of
our icon button let's look at the state
of is post button enabled okay
so we say if it is true then we create
an async function in here otherwise we
set it to null okay so this is how we
create that function all right so then
we can work on this async function
actually okay so let's go ahead and get
the current user ID because we need to
now upload the current post okay we say
final user ID is ref read user ID
provider
user ID provider you get the current
user ID
then we say if user ID is null because
this is an optional user ID then we just
return we can't do anything if the
current user is null okay
then we need to get the message so we
say final message the what the user has
typed then we say post controller.txt
then we say final is uploaded
is a weight on ref read now in here we
need to basically ask our image uploader
provider so we say image uploader
provider no to fire so this is this is
where we're hooking our UI to our
Notifier to do the uploading okay it's
very very exciting stuff and this guy
had an upload function if you remember
correctly okay
here so what we need to do in here is to
basically pass it some data all right
and then we say we need to upload the
widgets file to post widgets file type
and the message is there the post
settings are there and the user ID is
here so you see how we're just hooking
things up if you have all your notifiers
and providers in place all you have to
do is just hook things up you don't have
to do so much hard coding and a lot of
code in your views basically okay then
we say if if we could upload if is
uploaded and also our widget is still
mounted then we pop our Navigator in
here say navigator off context.pop okay
that is it really okay so that part is
done then what we need to do is to go
ahead and render the body of this view
so let's go ahead in our desire app bar
after that let's go ahead to the body
so for the body we're going to create a
column so we say a column with a
children of empty at the moment okay and
let's wrap this column inside a single
child scroll view so we say rapid widget
single child scroll oops single child
scroll view like that all right commas
commas to get the formatting right
then this column is going to have is
going to stretch all its components uh
like this so that they take the entire
width of the screen so let's say cross
access alignment then we say cross axis
alignment stretch
the first child is going to be the
thumbnail so we say thumb nail then this
is our thumbnail file funnel View
you already have that okay and we
already have created the request so we
place it there
that's our thumbnail so you can see how
easy it was just to display our
thumbnail okay weather and this guy
actually works with videos and actually
no we have just at the moment done the
the image all right so we always display
the image for the thumbnail so if you're
uploading your video we don't fully show
the video player but when you're viewing
a video inside your flow then or inside
your uh how do you call it home page or
main page then we display the video
player okay
then what we're going to do is to
display the text field so let's go ahead
and say we have a text field which is
this guy okay and let's do some padding
around it so we say rapid with padding
of I think the default 8 is fine okay
the text field is going to have some
decoration so let's say decoration is a
const of input decoration
all right and for its uh hints or sorry
label text we're going to say strings
please write your message in here so
like that okay
it's a lot of warnings going on it makes
it very difficult to type but that's
okay after a decoration we're gonna go
and say it has an auto focus so as soon
as we land on the screen we want this
guy to have the focus you see upload
photo boom it has the focus by default
so we say it's auto focus oops autofocus
true then we want if we wanted to not
have Max lines so we want you to just be
able to type your message and it just
expands okay so we say Max lines null so
that makes it multi-line and then we say
it's controller is the pose control it's
very important it places the text inside
this controller okay
after that right after padding we want
to render our post settings okay so this
is going to be the beauty of using a
riverpod it's going to be so easy to do
that so then we say we um we spread our
post setting
values actually let's import post
setting in here
dot values then we map them okay then we
get a post setting in here post setting
like this and for every one of these we
need to create a list tile so these are
list tiles okay so like that and error
function list tile let's create a list
tile per post setting
then in list tile we need a title the
title is going to be a text component of
the post setting title
post setting.title all right
then for or subtitle we're going to take
the post setting description
and then for the trailing component of
list tile which is this guy we're going
to create a switch so this is the
exciting part because then we're going
to hook it with our Notifier so we say
trailing is going to be a switch
component in here okay
oops and don't we have switch
oops Yeah we do it's just a value that
is not provided so the value is going to
be the post settings
then we go into you see we have post
settings up here which we're watching
okay so we say post settings then grab
this current post setting out of it boom
okay or take the value of false if it
doesn't exist all right so that's for
Value then we have to provide unchanged
so how do we do that then we say is on
which is a Boolean
argument and on unchanged we need to go
to our post settings providers Notifier
which is post settings
Notifier and call this function all
right so let's go ahead and put and read
our Notifier just get a synchronous
snapshot
and we say read sorry ref read post
settings
uh post-setting provider dot Notifier
Notifier and then we say we have a
function in here which is called set
setting right
and we give it the post setting and the
value is is on like this
boom all right and some commas to get
the formatting right and this is pretty
much how we render our post settings
okay so we turn them into switches and
unchanged it just triggers the post
setting providers
and Notifier okay and that was that was
really it that is the entire uh
rendering of our
um
creates a new post view however we can't
display it because the way to display
this guy is through these buttons right
and at the moment these buttons don't do
anything so when we need you to go go
ahead and do is to take care of this um
image and video picking right so if we
just take care of that so we can display
a picker and allow the user to pick a
video or an image then we're good to go
in order to display this creates new
post view so let's go ahead and take
care of that now actually so
I've already shown you how this work how
this works so you can go in here and
upload a video and you can go in here
and upload a photo all right and this is
this is something that is going to
happen from our main view if you
remember main view in here we have some
of our buttons which is this for
instance uploading a photo or uploading
a film fill at the moment there are
async functions that they pretty much
don't do anything all right so what we
need to do is to go ahead and remedy
that so
um the first thing that we need to do is
to work with X Files I mean
sounds like something from a movie but
when we're working with this dialog that
allows a user to pick a file or sorry
pick a photo or a video
this dialog returns an instance of x
file which comes from Dart i o package
then we need to turn this x file into a
file instance and it's very easy to do
we just take the path of that X-File and
we just turn it into a file okay so
let's go ahead and work on that
extension I'm going to bring up the
activity bar then we go into lipstate
image upload
lipstate image upload in here and then
we go into extensions and we right click
on it and we say we want to create a new
file called to file Dart okay
then we say this is an extension recall
to file and it is on a future of X-File
okay and an optional X-File actually
then we say this in itself this our
function returns a future of optional
file and we call this to file
we say we take the current future which
is this and then we use its then
function but we don't have to write this
so we just say then
this gets the X-File we want to extract
is path so we say X-File and get its
path boom like this okay then we use
then again in here then we say given the
file path
then we say if the file path is not null
then create a file out of the file path
otherwise return null and then we have
to
actually X-File I think comes from image
picker yes but file comes from Dart IO
so let's import Dart IO like that all
right so you can see the code looks like
this so what we're really doing is that
we're converting a future of X-File to a
future of file
and both are optional so if this guy is
null this guy is going to return no
actually a future of a null file but if
this guy is a valid x file then we're
going to get its pass converted to a
file and the result is going to be a
valid it's going to be a future of a
valid file and when I say valid file I
mean that it is not optional okay it is
an actual file all right
so that part is done let's go ahead and
work on on a little helper and which we
call Image picker helper which is going
to allow us to pick either an image from
an image from gallery or a video from
Gallery so let's close this to file and
we're going to go into lipstate image
upload image upload and let's create a
new folder so we say new file helpers
folder and we say image picker
helper.dart okay so this is the guy that
is going to allow us to display the
gallery and then return a file to us
okay so let's say an immutable a class
immutable class image picker helper okay
and immutable comes from Foundation
then we go in here we say static final
image picker
and our image picker needs to come from
you can see it from the image picker
package and we say do we have an image
picker private property in here which is
an instance of image picker it says
static because we want to statically
actually use it on our helper then we
create two functions in here we say
static Funk sorry aesthetic future which
returns a file in here then we say pick
image from gallery okay and so this is
for uploading or start picking images
then we say we use our image picker like
this
and there's a function on it called pick
image and we say this Source you can see
it should be off Type image source then
we say image source oops
image source dot gallery and then we
have our two file extension do you
remember so I'm going to import this and
this two file literally takes the result
of this guy which is a future of
optional X-File and it converts it to a
future of optional file and that is what
is being returning here let's import
Dart IO as well okay as we have the pick
image from gallery we also need to have
the pick video from Gallery so let's
save pick video from gallery and change
this guy to pick video pick video like
that all right so now we have our little
helper guide
we need to go into our main view main
view like this and start working on
uploading our videos and photos okay so
here's the
film one I wonder if we should do the
film one first maybe because it's going
to be quite easy actually and the film
and the and basically the video and the
photo are going to be very similar to
each other so let's go and do the film
one first so first we're going to say
pick a video
and then we say final video file is then
we're gonna await on our image picker
helper then we say pick a video from
Gallery okay then we say if the video
file is null then we don't do anything
we just return okay
however if there is a video file then
what we need to do first is to go ahead
and do something we haven't done before
and that is refresh a provider now let's
go into this post
settings provider and you can see that
this guy was being used on this screen
meaning that as you post something you
can flip switches on and off right
however the next time you try to post
something if you don't refresh this post
settings provider then it will contain
the previous values so now you have to
go and tell this post settings provided
to be recreated and you do that through
refresh so in here we're going to say
ref
refresh the post settings
post settings provider okay so this is
how you would reset it basically okay it
will be recreated okay
then we say okay if now that the video
has been picked we have it we want to go
into our create new postview but we
can't do that if we're not mounted so we
say go to the screen to create a new
post and we say if we're not mounted
then we just return okay we can't do we
can't go to a new screen if we aren't
Mount then we say navigator
and Navigator push okay then a inside
push we give it our context then we give
it our material page route material page
route
let's see if you can clean this up a
little bit material page routes okay
let's go to a new line in here any line
in here like this I mean it's not
formatted really right but we're going
to fix this so we say the Builder oops
the Builder is um we don't need its
context in here I think the Builder
gives us a context actually
uh oops what's your page route what does
it give as a builder let's go into this
Builder and require this Builder
if he can find the Builder
uh widget Builder which gives us a build
context so yeah we don't need that we
need the context so we're just going to
ignore it okay
in here let's go ahead and create a new
instance of our create new post view
okay then let's do some formatting in
here and bring this down bring this down
okay the file to post in here is going
to be our video file video file and the
file type is going to be file type.view
and let's import this file type as well
okay so this closes there this should
close here comma comma and I think it
looks fine now so push blah blah yeah
seems fine to me okay that that part now
that that part is done we need to do
something very similar to this but for
picking an image or a photo so let's go
ahead in here and copy this uh pick a
video first I'm going to copy all of
that including this material routing and
let's go in here copy it and bring it
into this asynchronous function then
we're going to say pick a pick an image
an image first and we're going to change
this to image file
and then we're going to say pick image
from gallery if image file is null
return We refresh the post settings go
to the screen to create a new post
that's fine and then we say image file
and then here we should always say then
actually not always but you should
ensure that you change this to image
because this is not a video okay now
we've done a lot of stuff and it is
really now time to actually
have a look at whether this all looks
fine to in the UI or not so it is a is a
big moment really in in this course that
we're gonna be able to for the first
time upload photos and videos so let me
do a hot restart of our application so
we don't see any errors in the debug
console I'm going to get rid of it rid
of the debug console let's go into our
simulator so this is the completed app
I'm going to get rid of it and let's go
into our app then and see if
everything's working as expected not
everything but the photo upload and the
video upload okay so let's go in here
and say that we want to upload a photo
oops and our application crashed the
first thing and this this could be
because we don't have the permissions
and the reason really is that uh we have
to go into our info p list and tell the
user that we need access to their photos
okay and if you go into our pop spec
yaml
you can see in here that we're using
image picker and if you go to pop Dev
and look at image picker it tells you
explicitly that you need to add some
permissions to your info PLS you see NS
photo library usage and as camera and NS
microphone okay and if you intend to
record videos and this is when your app
needs access to the camera we don't need
that so we just need ns4 to library
usage description so let's go into info
plist in our iOS Runner and add that key
in here so I'm just going to add it on
top key is this
let's see if GitHub co-pilot can faces
for me yeah would like to access your
photos Okay after doing that we need to
rebuild our project and rerun it
basically so let's see if this process
is going to take a long time or if it's
going to go smoothly and I mean things
like this happen just because an
application crashes doesn't mean that
your code is wrong in this case the code
wasn't wrong
it's just that we have missed a
configuration of our approach again this
is one of the reasons I really don't
like configurations because they're
outside of code files they're just like
magical texts that you have to place in
weird places
which you need to know about and in this
case I knew about this because I am an
iOS Developer since late 2007 so this
kind of stuff has happened many times
before and I usually know where to
search but if you don't know where to
search you could just get stuck maybe
four hours or days so let's see now if
this application will now work now that
our xcode build is done according to
this
now our application is running again so
let's go in here and try to upload a
photo and see if that works so press
that button you can see me allow access
to all photos and this pops up and for
those of you who are doing this with a
Macintosh remember this first photo in
the i o simulator is corrupted you can't
use it for some reason I don't know why
I haven't experimented with it so much
but I just know that you can't pick it
okay maybe it's just there for for this
particular reason that you need to
handle cases where an image is corrupted
so let's pick another image let's pick
this waterfall like that you can see we
come in here and our image thumbnail is
displayed I can say hello world and
let's just turn off comments like that
like this and then we press this button
but remember R is loading a component
sorry it's loading provider hasn't
really taken into account the uploading
case where you press this button so
let's go into is loading provider at the
moment is only looking for
authentication States so we say is
uploading image so this is uploading
loading image and we say ref watch image
uploader provider okay and then we say
is uploading image needs to also be
taken into consideration so we say or
okay so display the loading state if
we're in that state so let's just hot
restart our application and try to
upload a photo so the waterfall you can
see the post button is disabled because
I haven't typed anything as soon as I
say hello world and it it becomes
enabled let's turn off comments just to
ensure that we're serializing post
settings to our backend and then post
you can see loading State being
displayed in here
and all of a sudden we just got stock in
here and that is probably because
something went wrong so let's go into
our Instagram course in here and just
refresh this
and I can see there are no uh there are
no posts that means the post couldn't be
serialized and if we go to our storage
let's go into our storage in here and
see what happened
and I can see actually nothing has been
created in here so definitely something
went wrong with us creating a
creating the references okay so it could
be something in there or maybe something
wrong with our user ID so that's what we
need to now
basically search for we need to go into
our whole upload mechanism inside they
create new post View and here where we
press the action button let's go in here
and right there in here we need to start
debugging our code a little bit and see
what actually happened because I saw the
loading happening but I didn't actually
see anything getting uploaded so
something in here is not working
correctly okay either the image couldn't
be decoded or something in here couldn't
be really done correctly and in in the
next section that we're going to debug
this code and see what could have gone
wrong I had a look through our code and
just did a hot restart of the
application and put some debug
breakpoints in the code to see the flow
and see where things were going wrong
and after doing the hot restart I
noticed that our application is actually
working perfectly fine without me doing
any changes to the source code so if you
are getting that problem also it could
be just because you have to do a hot
restart of the application so I've done
a hot restart let's bring up our
simulator and have a look at our data in
here you can see our storage is
completely empty and that's also so are
collections are empty we just have a
user's collection which is the current
user that has logged into the
application let's try to upload a photo
in here so I'm just going to say hello
world okay and turn off a comment uh
sorry disallow comments and just send
this post and see what happens
so it is loading and you can see that
our post has appeared now now we have
the same grid view in all three tabs and
that's the reason that we're seeing the
same content being populated in all
three tabs in here if you refresh your
Firebase firestore you can see that we
have a post in here and you can see that
it created ad which was using the field
value of server date and time snap has
been populated with a valid timestamp
for our server for when this post was
actually created so congratulations this
is our first post that we have created
in this system and if you go to our
storage and do a refresh in here you can
see under this user ID so if you go in
here you can see the user ID who created
this post it is GX and ends with X1 okay
if we go into our storage we see GX is
right here and ends with X1 so that's
that user then we have thumbnails folder
and that is the thumbnail for that video
okay
and we can actually view it perhaps uh
it is right here so that is the
thumbnail as you can see right it's a
very small image and
um then I can go ahead and remove this
tab so we can click on it and see what
that image looks like so this is the
thumbnail as you can see in here okay
and also then we have the raw
image in here as well so if you click on
it and it downloads the image and it
shows shows us the full resolution image
right in the browser okay so great stuff
again congratulations we've now made our
first post into the system The Next Step
that we're going to work on is the
commons view so we're going to allow the
user to post comments on posts that
allow comments and that screen actually
looks like this so if you go in here
in here we allow comments and then click
here you can see that the user can go
right here and type a comment and say
hello world okay
and then the comment gets posted and
comments are then stored separately
inside a comments collection so if you
go in here
into comments like this
and have a look in here it says hello
world and the other one unfortunately
also says hello world let's post a new
comment we say and this is a new comment
and we post it and a new comment is has
appeared here it says this is a new
comment okay so comments have their
common message itself created at which
is the timestamp as you can see in here
the post ID meaning on which post the
comment was posted on and also the user
that made that comment okay so what we
need to do is to work on this screen but
for this screen to work we need these
tiles as you can see the tiles have the
username the person who actually made
this comment and also the common message
itself and also a delete button if this
comment was made by the current user
because if you have comment that is made
by another user then this delete button
will not appear here okay
so what we need to go ahead and do first
is to work on this tile component right
so the first component for that is to
deliver this dialogue this is delete
comment okay and for delete comment you
can see this is a dialog which is very
similar to this dialog that we have for
log out the content is different but the
type of dialog is kind of the same okay
so let's go ahead and develop that
dialogue and we're going to call it
um I think delete dialog I would say
okay which is a generic dialog that just
can accept a title a title of object to
delete in this case comment so it will
say delete something are you sure you
want to delete this something and then
it cancel and delete button okay so
let's go ahead and develop that
component now
I'm gonna go to the activity bar let's
go into lib views components lip views
we have components in here and then in
there we're going to go into dialogues
and create a new dialog let's call it
delete dialog.art okay
so we already have the alert dialog
model so let's say immutable
class delete dialog
and it extends our alert dialog model
oops not alert dialog alert dialog model
all right and what we're going to do
we're going to deliver a Boolean back
whether an object should be deleted or
not okay then we go in here and inside
our Constructor we say const and delete
dialog and then we say a required
property is a string and we say the
title of object to delete all right then
what we'll do we just call Super and we
say the title is uh
strings delete okay let's do
an import in here and see if we can
import this which is I think in use
components okay so we say delete and
then title of objects to delete so we
say delete comment for instance you can
see in here delete comment and also a
question mark at the end of this okay
that is the title then the message is
going to be a strings are you sure you
want to delete this and then we say
title of object to delete okay and a
question mark which says are you sure
you want to delete this for instance
comment or message whatever
and for our buttons we have a constant
map of strings dot cancel that is the
cancel button cancel will return the
value of false and strings dot delete
Returns the value of true in there okay
so a commander let's say immutable isn't
detected let's import Foundation
and then we say show immutable like this
all right a function body must be
provided let's see what we've messed up
in here
we're calling super that one is fine
we're calling super and
that is it really I would say I'm not
sure why we're getting this error I
think it's just the same I call it so
there we go
so now we have our delete dialog so the
next component that we need to implement
is called user info model okay so this
user info model is going to be a model
that has the user ID display name and
email right so this particular model
that represents a user in our system so
a user in our system is going to be
represented by its user ID displaying in
my email and this object is going to be
able to get created either from a Json
and it's also going to be serializable
to a Json meaning that it's going to be
a map view
that we can basically store into a
Firebase and also it's going to be a an
object that we can just initialize with
user ID display name and email so let's
go ahead and create that component in
lipstate and let's see if we have the
folders
so we have lipstate and we have user
info in here and we have models and we
have user info payload but we don't have
user info model so let's right click on
this models folder and say user oops I
don't know where I'm typing
user info uh model dot art okay
so let's say this is an immutable class
immutable class user info model and it
extends map view again big this is
because it wants to be Json serializable
okay and string and an optional string
like this immutable requires Foundation
and I believe Matthew requires Dart
collection so let's go in here and we
say show map like this okay
and also in here you know now that a map
view extension a sorry a class that
extends map view needs to have a
Constructor that calls super with the
map view so let's say user info model
and this is our Constructor and we need
a user ID display name and email so
let's go ahead in here
and we say final user ID as a property
user ID final uh straight display name
and then we say final string and email
all right which is optional for us then
we say required let's see if Visual
Studio code can
add those and also call the super
let's see and then let's put these in
curly brackets like this
is a bit messy as always to do all of
these
and let's add require to all of these
parameters in here require required
required okay and remove that that
semicolon so let's go into Super and say
super and we have a new dictionary in
here or a map that says Firebase field
name we have that already defined user
ID is user ID display name is display
name and email is email just like that
okay so now we have the call to Super
using user info model
then what we need to do is to create a
reverse of this that we can accept a
Json and then we construct an instance
of our self class or this class using
that Json so we say user info model and
we want to create a Constructor call
from Json and our Json is going to look
like with a map of string and dynamic
Json and then we say we also need a
required named parameter of type user ID
and this is going to be used already
because now what's going to happen is
let's go into user info model
I mean if if we pass this guy a Json
that doesn't have the user ID then we
can't construct an instance because user
ID is a required final variable okay so
we need to ensure that we get the user
ID separately okay and uh that's where
this required parameter is coming from
so let's say we then call this and we
say user ID is user ID and our display
name let's see if it can complete it for
us
our display name is going to Json
getting the display name and then in
here we just say if we can't find it
then get an empty string and also our
email is email and it is an optional
value so we don't have to provide a
default value for it and with any other
model object we need to go just like in
any other model object we need to Define
equality on it so the equality and
hashing is something we've already done
before so it's a lot better if I just
copy and paste that code and you can
just write this in your code as well
we've already done this and I've already
explained how equality works so there's
no need to redo this okay
good stuff now that we have that let's
go ahead and create a user info model
provider so this is going to be another
provider and that is going to take a
user ID and it's going to give us a user
info model for that it's going to be a
stream provider meaning that you give us
a user ID and we will track that user on
Firebase and every time that user
changes then we will provide you with a
new user info model so the property is
so the parameter we're going to provide
to the stream provider is going to be a
user ID and we'll just track
users in here let's go into our users
storage as you can see in here and then
we're gonna say Okay given a user ID
we're going to track this user any any
property of this user that changes we're
going to provide that back to you inside
a user info model so let's go ahead and
create this provider and since this guy
is a stream provider so meaning that it
will continuously give us updates in
terms of a user info model
um it is basically is a stream provider
that doesn't have any backing I mean it
doesn't have to have a Notifier because
you see when we create a state Notifier
provider we have to first go ahead and
create a state Notifier for it and then
the provider just creates the state
Notifier provider but when we have a
stream provider we can just calculate
the stream right within the creation of
that stream provider okay so without me
going too much into details about it
let's go ahead and just create this guy
so we're are going to go into lip state
lip State and then we have user info
and in user info let's see if you have
providers we don't have any providers in
here so let's create a folder and we say
providers slash user info model
provider.dart okay
so let's get rid of the activity bar so
we can focus on our code a little bit
more okay so let's say final user info
model
a model provider is a stream provider
this is going to be Auto imported for us
so then we say okay we also want this
guy to have a parameter so the parameter
to this provider is going to be the user
ID that we have to track okay and and so
that is the input and also the output is
going to be a user info model this guy
let's go user info model that we just
created here okay
so since we want to get a parameter in
we have to make this a family provider
okay and then we're going to say it's
also Auto dispose meaning that if no one
is using it it has to be automatically
disposed of okay so we say the first we
specify the output we say user info
model which needs to be imported and
then we say the input is a user ID also
imported and the reference is provided
to us here and we say then the input is
a user ID user ID like that and then
this is uh just a simple function it
doesn't have to be an async function
just because we're returning a stream
okay so my preference usually when it
comes to screen providers is to First
create a stream controller for it and
then I return the controller's stream as
the result of my provider and then upon
the ref getting disposed of I dispose of
my stream controller okay so the backing
of a stream provider is usually a stream
controller so let's say controller and
we say a stream controller user info
model
and we say this needs to be imported
from
Dart async okay and we say return
controller stream like this
okay and also don't forget to dispose of
your controller when ref is disposed off
like this okay then we say controller
Dot close like this okay good stuff now
we're gonna go right the meaty part of
this function first we need to subscribe
to our users collection so we say final
sub as in subscription we say sub is
equal to Firebase firestore
Auto imported instance then we go into
the collection
for a Firebase collection name in here
and then we say we go into the users
collection okay
and after this we're looking for a
specific user so we should use the where
clause in here so we say where Firebase
field name of user ID is equal to the
given user ID like this then we limit
our search just to one and we get
snapshots and we start listening to
changes to that particular user okay so
we say snapshot like this and that is
our subscription as soon as you create
your subscription ensure that you're
disposing of it as well on your ref
dispose so let's go in here and we say
sub dispose this is sorry close I think
or no it's actually cancel something
like this yeah cancel and this is what I
usually do as soon as I create my
subscription without actually writing
the code for the listening I go and
dispose of it before I forget okay and
you could do the same trick as well so
you don't forget things
in here in the snapshot let's get all
the docs actually let's get the first
stock because we know we've limited to
one so we say final Doc is snapshots
docs first okay then we're gonna say
final Json is Doc Doc Dot
data
all right and then we're creating a user
model out of this guy so we say user
user info model
and we get the Json and then the user ID
user ID is user ID okay like this good
stuff and what this means really is that
we go in here and we grab our users as
you can see in here okay so we get the
display name email and user ID and we're
getting the user ID from the input
parameter instead of getting it from the
Json itself I mean to be honest we could
have done that it just turns out that
our from Json functioning here takes the
user ID as a separate parameter just to
make sure that it is the exact same user
ID that's coming from here okay you
could you could just create a
Constructor that doesn't do that and
reads the user ID directly from the Json
as well so that will that will work okay
so now that we have that we say
controller dot add and we say user info
model like this you could say sync ad as
well but add will work just as well okay
good stuff now that we have our user
info model provider so this guy you can
give it a user identifier and it will
just give you back the user info model
if it can find it in Firebase okay let's
go ahead now and create a a type
definition for a comment identifier you
see every comment that is posted into
our system it has an ID it's this one
you see this one comment ID okay and
it's a string it's a document it's a
document object identifier but just to
just to make sure that we're creating a
type definition that makes sense to our
application where we're going to make
sure there is a type Alias available
just like we have is loading okay we're
going to create a type Alias for a
comment ID so let's go into lib state
lipstate and then we say comments
uh we don't have comments so let's
create a folder so let's say comments
slash type diffs slash comment id.dart
okay and let's say typedef comment
ID is a string just like this okay very
simple and we can't close that file
after we have the comment ID we're going
to go ahead and create a little State
Notifier of add comments deletion you
see in here when we delete a comment
there is a loading state did you see
that it just happens very fast but we
want that loading to also be available
to our is loading provider so we're
going to create a state modifier that we
can ask it to delete a comment with a
given comment ID and it will just give
us a Boolean value saying that it is
loading or not then we're going to
create a provider around that comments
deletion Notifier and that we will feed
that comment and delete comment provider
into our is loading system okay so we
need a slate Notifier basically so we're
going to go in lip State comments
comments in here and right click on
comments and say new file then we create
a new folder called notifiers and slash
delete comment notifier.dart
okay
so let's go in here and start writing
this component as well let's get rid of
the activity bar so let's say class
delete comment States Notifier we extend
uh State Notifier
let's also import this and we're
managing is loading so this is our state
okay so let's say that we have a super
call so we say this is our Constructor
and we call Super with not loading by
default then we create a is loading
Setter as we've done before we say bull
value and we say state is the value so
we can always say this dot is loading is
true or false and that will set our
state okay I've already explained this
before so I don't think we need to
explain it again
let's then create the only function
inside this state Notifier let's just
say that we have a future of bull and we
say delete comment and this is our
function and it's an async function and
we need to get a required property in
here a required argument we say required
comment ID comments ID okay so this is
the comments ID that we need to delete
let's Auto Import this guy as well
okay so in here then we're going to say
as soon as you ask us to do that then
we're gonna start loading okay so we say
finally
is loading is false
in try we're saying is loading is true
okay and inside catch all we're going to
do is just to return false and inside
try we're going to return true like this
so we have the return value setup and is
loading already set up so we don't have
to play with those anymore okay so let's
go ahead and create a query so we say
query is Firebase firestore
like this Auto imported then we say dot
instance okay and we say a collection
we're going to go into Firebase
collection
name and then we're going to comments
then we do a where field sorry and we're
um how do you call it a where Clause
where the document ID is equal to the
comment ID so if you ask us to delete a
comment you need to provide this
document ID to us okay so we say where
the field path and this comes from
Firebase document ID is equal to comment
ID okay and we limit it to one and then
limited to one and then we do a get on
it like this so this is our query okay
then we say we await on the query and
after that we want to execute some code
so in here we say this is our query and
this is an async function so we say
async like this and in here we say any
document that was found with that query
it needs to be deleted but we know that
there's only going to be at most one
document found so let's go ahead and say
four final Doc in query docs like this
don't we have dogs and I think query
let's see
query is like that for our final duck
in query.docs I thought that our query
had the docs so what is is a future and
that really is because we have changed
we just needs to be changed to the query
because yeah the then Clause it gets
executed after this is awaited answer
query then we say docs okay so we go
through all the docs and then we say
await on doc.reference dot delete like
this okay so it's a little bit of a code
but it does make sense after the query
has executed then we go through all the
docs which is going to be one and we
just delete that document okay
and then we're returning true so that
also makes sense
now that we have that we need to go
ahead and create its provider so let's
go into our activity bar right where we
are in notifiers you see in comments
notifiers and one step up we go into
comments and right click and then we say
providers slash delete comment
provider a pro wider.dart
so this is going to be a state Notifier
provider because it's a Notifier is a
state Notifier so we say final delete
comment provider is a state not fire
provider uh let's also import that and
then we say its Notifier is a delete
common state Notifier
and let's uh import these guys and
delete
comment
State Notifier like this and also in
here we're just creating an instance of
that Notifier you can see in here we're
not actually using the ref so we could
just ignore it if you want to okay
so that's our delete comment provider
then the next thing we need to do is to
go ahead and create a little typedef for
any post ID okay so given a um
so we want to basically create a model
object called comment
so if you want to represent every
comment that this guy with a model
object and for that we need to ensure
that we need a post ID which is a
typedef to a string I mean we don't need
it but it is nice to have it okay so
let's go ahead and create a type
definition for a post ID let's see where
we are let's go to lipstate posts
lipstate
posts
then in here we have type depths and we
have user ID let's create another one
called post ID so new file post ID dot
darts and we say type Dev post ID is a
string just like that okay and we can
then close this guy
after post ID we're going to create the
comment model object all right so every
one of the comments in our system is
going to represent what is going to be
represented by this comment object so
let's go into lip State comments uh
let's see lip State comments and we
don't have model objects so let's right
click in here and say models slash
comment dot Dart comment if I can
spell it correctly okay and this is an
immutable class immutable
class and we're going to call it comment
so foundation in here just like usual
show
immutable okay
this guy has I think four or five
properties so the first one is the
comment ID so let's say comments ID
it's going to be Auto imported comment
ID or let's just call it ID since the
field itself is the data type is called
common ID then ID makes sense okay then
we say final string
so we have the comment itself which is
this guy created ads so we say final
date Time created at final user ID we
also need to have is our from user ID so
the comment was made by this user ID and
we say final post ID as well and it is
on post ID okay
good stuff now what we need is to be
able to create a an instance of this guy
using a
map a Json basically okay so let's go
ahead and do that so we say it to create
a comment we need a map of oops we need
a map
of string and dynamic which is our Json
and also we need a required field this
ID like this okay
okay
so then in here we need to go ahead and
initialize all our final variables so we
say the comment itself it is coming from
Json comments we don't have to do all
this as a string dancing here and then
we say
um this I mean you see in here the date
and time we're reading it as date time
however we know that this is not date
time it's actually a timestamp okay so
time slam needs to be imported from a
cloud firestore and then we say let's
say Json and oh we shouldn't hard code
these as well I mean these we've already
defined these in other places so let's
say Firebase field name
dot comment
let's you have to import this comment so
that's a comment and then in here we
have created at created at
from user ID
from user oops user ID is the field
and also on post ID I think we Define it
as post ID or something like this okay
and we don't have to do all this as
dance in here the only one that we have
to do with the AdSense is as timestamp
because otherwise it will just be a
dynamic object it won't know that there
is a to date function on that Dynamic
object all right then we need to go
ahead and Implement equality and also a
hash code we've already done this before
many times two three times so I'm not
going to take our time this time around
how many times do I have to say time so
I'm not gonna I'm not gonna waste any
more time on implementing equality and
hash code so let's just paste that code
in it's very similar to how we've done
it in other places it's just really
identical and then checking the other
data types type sorry the other
arguments data type and then the rest is
history it's very similar to how we've
done it in other places okay
so that's our comment object and the
next part that we have to do is indeed
going ahead and developing the comment
tile itself so first comment
so now we have everything in place we
can go ahead and implement this guy as
soon as we have this tile we can go
ahead and implement this entire screen
in one go after that okay so go ahead
maybe grab a cup of coffee or tea and we
can continue after that great stuff so
with that said let's go ahead and start
implementing our comment tile
I'm going to close the comments.dart
file that we just created let's go
inside lib views components and then see
if we can find the relevant folders so
we have lit views and then we have
components in here we need to have a new
folder called comment and in there we're
going to create our common tile so right
click on components and then we say new
file and let's say comment slash
comments
underscore tile.dart okay and this
common tile is going to be a consumer
widget because in there we're going to
work with providers so we need a widget
ref so let's say a comment tile extends
consumer widgets it's going to be Auto
imported
then we say that we have a comment to
work with so every tile needs to display
a comment all right so we say final
comment it's going to be Auto imported
and then we say that's our comment then
let's go ahead and add the Constructor
for this guy and now I just noticed that
we created a consumer widget this way
it's a lot easier if we just use this
code snippet in Visual Studio code so
I'm just going to go in here and say STL
and it says stateless consumer so let's
just call this guy comment tile so you
need to be created this way
who are getting these errors because we
don't have material okay so let's import
that and then let's add our final
property in here and then we say require
this comments okay just like that
okay so we have all the parameters now
what we need to do in here is to
um tell basically what we need here if
you look in the completed application we
need the user
um so we need to go from the comments
which is here which has the user ID we
need to go to the username in here okay
and if you remember we have a user info
model provider so let's go and use that
so we say final
user info is at ref.watch user I think
we call a user info model provider Okay
then if you remember this was a family
provider so as an input it gets the user
ID and thankfully our comment has a user
ID in here so let's go and pass that so
we say comment Dot from user ID okay and
comma comma in here and then you can see
our user info it is an async value of
user info model okay so given given that
and we can create a widget based on this
user info so let's just say return user
info dot when okay and it has three
parameters let's put loading after data
and then let's for the error creates a
simple small error animation view so we
say error and then we get this and we
just say return const small error
animation view which is something that
we've already created from before
loading it is avoid callback then we say
we return const center in the center
then we create a circular progress
indicator View
progress indicator in here okay and we
could actually use our own loadings to
be honest with you in here so we say
when we're loading we could create for
instance return
loading animation view this one okay so
we could we could do this too but we
could for now just use a circular
progress indicator
for the data is the most important one
because in there we're going to use the
we're going to create a list tile so
let's say when we get the data we're
actually getting the user info model
okay and we have to create a list tile
from here so let's get the current user
ID because what we need to display in
here is that if a comment is posted by
the current user then we display a
delete button but if a comment is is
posted by someone who's not the current
user then we do not display the deletes
button in here okay so let me see if I
can actually test that so if we go to I
wonder which app it is I'm not sure
it's if it's example six or which
example it is but
um I was just wondering if I can log in
with another user into this application
but it will be a little bit of a hassle
but for now just know that this delete
button is it only displayed if this
comment is created by the current user
okay so we need to take care of that so
we thankfully have a user ID provider so
let's say final current user ID is ref
read current use or sorry user ID
provider okay so you can see then it
says current user ID is an optional
string and we're using ref read in here
because every time the excuse me every
time this tile is displayed we just have
to do one sync with this user ID
provider if the current user
is the one that made this post then
we're gonna display the delete button so
we're not gonna watch in here because
the current user Is Not Gonna Change
while we're on this screen okay so let's
then go in here and then we say return a
list tile okay
for the list style let's just take care
of its uh trailing component here which
is this delete button then we say
trailing is if the current user ID
is equal to comment from user ID from
user ID so that means the current users
made this comment then we go ahead and
create an icon button okay then we say
it's icon is a const icon icons dot
delete all right like this and then we
say we have an unpressed which is an
async function because it needs to
display this delete dialog right there
okay
good now that we've done that
um we go after this and then after let's
see hmm
is this one the list tile okay so this
is the end of the trailing so let's go
ahead and then we say for the title
we're gonna use a text which is from
user info
um dot display name so let's change this
to user info
user info like this okay
okay so we have the user info then we
say actually there's something missing
in here it seems like this just doesn't
end all right because we're in a we're
in a ternary operator here but we
haven't actually finished it so we say
otherwise we should use null in here
okay so if the current user ID is not
the one that made this comment then
don't display any trailing widget
otherwise display this icon array the
code is a little bit weirdly formatted
but that's just because we haven't
really finished writing it okay so we
just say the display name needs to be
displayed there as the title which is
right here and also the subtitle I
believe the property is called needs to
display the comment itself so we say
subtitle
oops subtitle then we say text of
comments dot comments like this all
right
so let's see how it looks like I think
it actually looks quite okay it's just
that we need to go in here and take care
of the deletion all right
so we say then fine final should delete
comment then we say await on display
maybe we should create a little function
in here and display delete dialog or
something so let's go at the end of this
class and create a little function that
takes care of display displaying or
delete dialog for us so we say future
Bool display delete dialog we need a
build context so build context context
in here okay and this guy creates an
instance of our delete dialog remember
and we say the title let's Auto Import
this the title of the object is strings
dot comment and let's import strings I
think is in here I actually imported
incorrectly here probably more I don't
know which one it is so static
um
comment is equal to I can see that we've
written that inside lib views components
so let's go ahead and import that one so
we say lib views components here okay so
that's the object that we have to import
so that's our dialog then we present it
remember and the present function was
inside another file so let's see if we
can import that there we go and we take
the return value so we say value we
either take this value or the value of
false just like that okay
so this is all about Futures really you
need to know by this point how to use
future so I'm not going to go so much
into details about that all right after
doing that let's go ahead and display
our dialog so we say display delete
dialog and we have to pass the context
to it all right then and you need to
ensure that you're waiting on it of
course okay then we say if should delete
comment then we go and say we await on
our ref then we get our delete comment
providers Notifier so we say delete
comment
uh provider dot Notifier okay and then
we just say delete comment on it so we
say delete comment and we say which
comment ID we say comment dot ID in here
okay and ensure that you're awaiting on
this guy all right good stuff and that
is it really so I think we're pretty
much done with our uh comment tile which
is this component all right so if you
press delete on it this laser dialog
which is right here so we say awaits on
the displaying on the dialog if the
return is true which means the user
tapped on the delete button then we
actually delete the object all right
good that is our tile however we can't
display the style because we actually
don't have a view that can this later
tile all right before we can create this
View and before we can actually create
this View and display these tiles we
also need to take care of a provider and
a Notifier that can post a comment to
our server okay so when you create a
comment it needs to be created as an
object and serialize to Json like this
and then stored in Firebase firestore so
let's go ahead and take care of creating
comments as well and then after that we
can directly go and display our comments
a view basically for that we need a
Commons payload so in order to handle
comments we need to create a common
payload so let's go to activity bar in
lip State comments let's go to lipstate
comments we have models and we have a
comments Dart but we don't actually have
a comment payload so that works with
Firebase field names so let's go ahead
right click on models and say new file
and we say comments
oops comment payload dot Dart okay and
in here let's say we have an immutable
class comment payload
and we say extends map view string and
dynamic right so import Foundation this
stuff should be easy by this point
immutable and then map view should
import Dart collection and we say show
map view just like this all right I mean
to be honest with you you don't have to
just show business in here but for me
it's it's very important because it
makes sure that my workspace is very
clean I don't import stuff that is not
necessary for any current class all
right so let's say then we have a
Constructor a common payload and what
we're requiring here is a required
string actually let's say required user
ID
from user ID required a post ID
on post ID and then we say required
string required string comments okay and
to be honest with you here you could
just say string as well but it's a
little bit cleaner to be honest with you
okay because we've already typed if
these user ID and post ID okay
so let's go ahead and call Super so for
super here we need to go ahead and use
our Firebase field name dot user ID is
from user ID then post ID okay let's say
post ID is on post ID comment is comment
and then for the created at field
name dot created at because every
comment has to have that property as
well created at it is a time stamp so we
don't actually take a client timestamp
but we use field value okay so we say
field value import dot server
timestamp just like that all right so
that's really good and clean so it's a
simple payload we initialize it with
values and we can serialize it into Json
and store it in Firebase firestore good
stuff after that payload is done let's
go and work on our send comments
Notifier so we need a provider so that
we that can post a comment but under
that we need a Notifier and this
Notifier is going to provide us with a
loading status okay so let's go here in
our lib State and let's go into comments
uh here we have notifiers which is the
delete command Notifier let's create
another one that's called send the
comments Notifier so we right click on
this and say new file and we say send
comment note fire.dart okay
and by this point you already know that
this guy is going to be a state Notifier
so let's say class send comment uh when
it's not fire extends State node fire
of is loading okay and you already know
also the business with is loading a
Setter so I don't have to explain that
and let's go ahead and pass the default
is loading state in here so we say we
have a Constructor with Mill parameters
which calls super uh like that all right
good stuff now that we have that is
loading this class only needs one
function for sending a comment it needs
a user ID and post ID to post it on and
the comment message itself all right so
let's say we say a future of bull and
this bull has nothing to do with is
loading all it does it indicates whether
we are um we can could continue oh sorry
we could finish this job successfully
around okay then we say send comment we
have three required properties sorry
parameters in here so we say required
user ID from user ID then we say
required post ID
and we say on post ID and these need to
be imported like that post ID boom and
then we say required string the comments
itself all right and this is an async
function so the first thing that we do
in here this should also oops I can't
type so here let's say it is loading is
true okay
then we cry H we we cry we create a try
and catch block so we shouldn't cry
really so let's try and then we say
catch and nothing in here and then we
say finally and finally it's gonna set
is loading to false catch is going to
return false and try is gonna return
true
like this all right in the try it's
going to be very easy actually before
trying let's create a payload so we say
final payload is comment payload like
this and all the parameters are just
going to fit right in because we've
named them exactly the same as they were
for the parameter names in the payload
okay so that's also Smart in here all we
have to do is just to tell Firebase
firestore that we want to store this as
a comment so let's say await Firebase
firestore
instance I think it's called instance
and then we get the collection which
should be the comments collection in
here you see so we say Firebase
collection name dot comments
and then in here we just add our payload
it's so beautiful I absolutely love this
to be honest with you just being able to
create a payload like this and just
adding it to Firebase fires is so
convenient
okay enough babbling so let's uh let's
go ahead and create the provider for
this guy so we have a Notifier we should
create a provider which is a state
Notifier provider okay
good stuff let's go in as the lipstate
comments and let's see what we have in
here we have a folder called providers
let's create another provider in here
that is called send common provider new
font new file send comment provider
provider.darts in here okay
so we say final send comment provider
and that is called a that is a state
Notifier provider is using the send
comment Notifier and is loading okay so
let me see if I can fix these Instagram
state
and send comments like this and hooks
riverpod good stuff okay the ref isn't
really needed so we can ignore it and
just create our
send comments Notifier as you can see in
here
fantastic all right now we've taken care
of actually posting comments okay but we
haven't taken care of uh fetching
comments because the screen not only
does it post and it displays but before
it displays it needs to fetch so let's
take care of that as the last thing we
need to do before we can actually work
on that view itself okay this view what
it does it also it sorts comments so
let's say second comment
so if I post my second comment you can
see it displays on top so we have date
sorting in here so let's create an enum
that explains how we sort our dates so
let's go into lib
and we have extensions State and Views
let's go in here and create a new folder
directly under lib and we say new file
then we say enums and then we say the
file is date sorting.dart okay and in
here we just create an email we say date
sorting and we say a new list on top and
then we say oldest on top all right so
that is how we can sort dates basically
or basically the mechanism by which we
can sort dates
now we need to um
we need to create some sort of a model
object okay that
that is gonna allow us to get specify a
post ID and uh how we can sort base if
you're going to sort the comments and
also the number of items to fetch all
right and basically some sort of limit
and this model object is then going to
be sent to our
um is some sort of an object a provider
okay and so this is a model object that
dictates to this provider that we
haven't created yet how it should as
fetch comments on a post meaning that
which post if it should sort the
comments by date and also how many it
should fetch alright so let's go ahead
and create this model object so we're
going to go into lip State Commons lib
State comments all right and in here
we're going to go under models let's see
here
and let's create a new file called post
comments request so models right click
post comments request dot Dart
all right so let's go ahead and create
an immutable class in here we say post
sorry request
for post and cons okay
and in here let's go ahead and specify
some properties so again remember this
is just a model object which we're going
to provide send to a provider and that
provider is just going to be like yeah
okay this is how you want to fetch the
comments on this particular post with
this post ID I'll take care of it for
you okay so let's say final post ID it's
going to be awesomely important so we
say and post ID
that's one property then we say a final
bull if we should sort by created at
okay
and then we say which type of date
sorting do you want do okay with this
property we know that we have to sort
but how do you want us to sort do you
want us to sort ascending or descending
then we say date sorting is the name of
this property and then we say a final
ins a limit
how many do you want us to fetch if any
maybe you're just saying null in here or
you just don't pass this value and we
know we don't have to limit our search
to a specific amount of comments all
right and last but not least actually
let me see posts or I think this is
enough I don't think we need more let's
go ahead and create a constant
Constructor for this guy so we say this
is a const curly brackets in here curly
brackets there comma and then we make
all of these required uh oops
required like this all right
good stuff now that we have that we need
to just create a equality on this guy
and we've done this before so let me
just copy and paste this code so we
don't have to type it manually and this
is how we Implement equality and hash
code in here and here we're using
covariance requests for posts and
comment it's just a new way of doing it
covering just enforces that the incoming
object B of this type and if it's not it
just throws an exception okay so we
don't have to check for
um identical actually we could check for
identical as well if you want to
um but this is how I've chosen to do it
in this in this example all right
so post comments request uh we're pretty
much done with this guy so we can close
that file
so then what we need to do is to go
ahead on an eye trouble of comments
create an extension that can sort that
eye trouble given a request okay so do
you remember this request then we know
that oh it needs to be sorted by whether
it should be sorted and also how it
should be sorted so let's go ahead and
create an extension on an ittrouble of
common second take care of this first so
let's go into lipstate comments lab
State comments all right and then we
need a new folder under this so let's
say new file and we say the folder is
called extend extensions like this and
then we say comment sorting by request
like this okay
so let's go ahead and say we extend
extension sorting on I trouble of
comments
it's going to be Auto imported for us
then we say attribute it returns an
itable of comments then we say apply
sorting from and we say request for
posts and comments and this is our
request all right so we need to now
given this which is an untrouble of
common we need to return any UI treble
that does the Sorting depending on the
values in this request so we say if
request sort by created at
otherwise we just return this okay so
that's very simple so if we have to sort
then we sort otherwise we just return
what we have in here all right
then we say final sorted documents
documents is
return this object to a list all right
then we can do a sort on it so we say
sort
and then we take A and B in here all
right
and um
let's go in here and say return sorted
documents before we actually do do the
Sorting documents like that and in here
then we can do the proper sorting so we
say switch request sort date sorting I
think it's called yes so this is our how
we and this is the specifier for how we
need to actually sort whether it should
be newest on top or oldest on top okay
so if it is let's also import date
sorting in here so boom and if it is
newest on top then we say return B
created add it should be compared to a
created app okay otherwise we need to do
the opposite so let's copy this and
bring it here then we say if it's oldest
on top then it should be a compared to B
like this okay
so that was very simple way of doing the
Sorting basically
good now that we have the Sorting in
place we should go ahead and do the last
component we can before we can work on
The View itself all right so let's work
on this component then and we're going
to call it post Commons provider or yeah
post comments provider maybe it's a good
thing so let's go into activity bar and
into lipstate comments lib State
comments in here and into providers and
create a new file and we say post
comments provider
darts okay so this is the last provider
we have to do before we can actually put
the screen and up for the user to see
okay and I can also see that we don't
really have the details view yet so at
the moment when we tap on this guy we
don't actually see the details here okay
so we may have to work on the details
for you before we can actually go here
all right but that's that's not a
problem we'll sort that out as well
so let's go to post Commons provider and
and we start writing our provider let me
get rid of the activity bar in here
so let's say final posts comments
provider it is a stream provider so
given
um it's going to be also a family
provider because it needs a parameter
given a request for posts and comments
remember this guy request for posts oops
request for post
here
given a request it is going to provide
us with a stream of I triple of comments
All right so we say is a stream provider
and we need to make sure it is auto
disposed so let's first say family and
then Auto disposed then we need to tell
it what it returns it returns an eye
trouble of comments comments like this
and also it takes in a request for post
and comment all right so those are our
generic parameters then in here we say
we have a ref and also we have our
request so it's a request
request for
oops uh did I miss something in here so
let's see auto dispose uh yes I've
missed one
no wait a minute this is fine
and also two parenthesis ref and then we
say request for post and comments
request
and like that and I think we're good to
go here I don't think we need to add
anything else we're just missing the
basically the return value in here okay
good stuff and this doesn't need to be
any async function all right because
yeah in here we can use a stream
controller okay so as I've mentioned
before let's create our controllers so
we say stream controller of I triple of
comet okay we're getting this error I
believe because stream controller is in
Dart async so let's import that and we
say return controller.stream and then we
say controller sorry ref on dispose then
we say controller Dot close Okay like
this
good stuff after we have that like we've
done in other places where we've created
a stream provider I think actually in
Walmart Place we've created a screen
provider or two more places
and after doing that let me see if I can
get rid of this bar okay and let's go
ahead and create our Firebase firestore
subscription so what we need to do in
here now is to given this request for
posts and comments we need to go into
the comments collection all right and
search for all comments that have been
posted on this given post ID all right
and I believe that I mean I may recall
um incorrectly but if my memory is still
with me I think we may have to create a
um an index for this query as well I may
be wrong but even if that's the case we
will get an error in the debug console
and then we can create the index later
so it's not a problem okay so let's say
a subscription we go to Firebase
firestore I think it's instance
and then in here we go into the
collection of Firebase collection name
dot comments okay then we look for any
documents that has its uh post ID set to
the post ID in our request okay in here
all right so we say where the Firebase
field name dot post ID is equal to
request is equal to like this okay
excuse me and then we get our snapshots
and of course of course after that we
start listening in here so then we say
snapshot okay
before we forget we go in here and right
before closing the controller we cancel
the subscription so cancel like that
in here let's go and get our snapshot
documents so we say snap final documents
is Snapshot documents so we get all our
docs basically all right
then we will see if we have to limit our
documents so we say final limited
documents
okay because we can always say documents
dot take all right but before we do that
we need to know if the user wants to
limit which is using this request in
here uh limit
then we say limited documents is equal
to
request dot limit if this guy is not
null then we say documents dot take
request.limit
all right otherwise take documents
exactly as it is all right so this
code's also just using uh null ability
really to calculate its results
then we say given the limited documents
uh now that we've read those let's go
ahead and actually read the comments so
we say final comments then we have our
limited documents which is an iterable
of query document snapshots okay then we
need to say where
where the document doesn't have any
pending changes because remember all
these Commons remember from the common
payload so if you go to comments payload
it for its created app we're using field
value meaning that any
document that we read back from Firebase
firestore may have pending changes but
we want to ensure that we don't read any
of the documents that has pending
changes so we just say Doc
doc shouldn't have in its metadata
pending rights okay
after this then we map every uh document
in here so we say documents
then we say for every document we create
a new comment which needs to be Auto
imported
which one is it it is
let's see comments
I think maybe this one
and then we have ID
no that's not really that one let's go
into comment
we have comments uh
I can see that here we just have
a document so let's yeah we need to use
this one basically so let's say for its
uh ID we say documents.id all right and
for the uh and then we pass the
document.data in here just like this I
think this should suffice really
and a comma in here and a comma enter so
we're basically passing the ID as the
document ID and that is the reason we
actually have the ID separately in here
okay
and simply because the ID comes from the
um from the document which we otherwise
don't have access to if you just pass
the data all right the ID of a Firebase
firestore document is not a part of its
Json okay so this is something you need
to know about
good stuff now that we have that we have
the comments let's go ahead and say
final result is is comments
and then we sort them we say apply
sorting
think from our request okay and let's
import this guy from here and then we
just say controller sync dot add result
like this and let's put a comma in here
as well to get everything working right
okay so this is I mean I'm not going to
go into too much details about this
because this is this has all to do with
Firebase firestore and nothing to do
with
um Where the River pod the riverpot
stuff is here okay it's this part and it
is this part and then this part so this
stuff is Firebase firestine that's why I
kind of try to zoom past these because
otherwise our core such thing will be
about 40 hours long okay so now that we
have this provider let's go ahead and
work on our post comments view all right
so and what I'm thinking is perhaps what
we could do is to hard code some
comments in our or actually we don't
have to hardcore any comments I'm
thinking that maybe when we tap on this
guy later we can actually display the
post comments view okay and because the
post comments view is just going to work
with a post ID it will be really cool if
you could just press on this guy and be
able to add comments to it all right so
without further Ado let's just start
working on our post comments View
this uh post comments view that we're
gonna go and create needs its own file
so let's go ahead as the first thing and
create that file I'm gonna go into view
appearance and then activity bar
let's go into lib views post comments I
think we have already that folder so if
we go into lib views
and we have create new posts but it
seems like we don't have post comma so
let's create a new folder in here so I'm
going to say new file and say post uh
comments and a new file in here that
says post comments view dot Dart okay
this is quite a large file so we're
going to get rid of the activity bar
while we're typing this and start just
typing the code for our post comments
View
this post comments view is going to be a
hook consumer widget so let's say sdl
and we're going to say stateless hook
consumer you see we have a stateless
consumer and also a hook consumer if you
create a hook consumer we can use also
flutter Hooks and or hooks such as for
instance text text controller hooks okay
and so if we if we don't do that we just
have a widget ref to work with riverpot
so if you see a hook inside like the
name of a consumer just know that you
can work with flutter hooks using that
widget so that's what we want because if
you remember in the sports color screen
here let's say we go to
to post a comments in here and in this
screen we have our text text field in
here and for that we need a text
controller so we need to use flutter
hooks for that okay so I'm going to say
STL in here a hook consumer let's create
it post let's name it post comments View
we need flots or Hooks and sorry hooks
riverpot to be imported in here we also
need to import material and I think
actually we need to import flutter hooks
separately as well so let's say import
and flutter hooks like this okay great
stuff it says on use nameport actually
wait a minute I don't think yeah we may
need to use it but let's let's bring it
you know we're going to bring it in when
we need it okay
so what this post comments view is going
to work with is just with a post ID so
we give it a post ID so let's go in here
into our database and look at comments
and you can see in here that um all we
need is just a post ID so given a post
ID we want to grab all as common so
we're going to go into the comments
collection grab all the documents whose
post ID is equal to a given post ID okay
so let's say post ID and then we say
post ID final actually all right let's
bring it into our Constructor
and we bring it in like this we say key
and also this and we say this is a
required parameter to be passed into our
widgets okay
fantastic that's that's the just the
beginning so for the contain for the um
build function what we're going to do
first is just to create our common
controller and that's going to be the
text editing controller for uh this guy
okay so let's go ahead and say that we
have a textedin controller so let's say
final Commons controller is use text
editing control and it's going to import
flutter hooks for us okay like that
then we're going to have a little
property that enables and disables this
guy uh this this button right here
um so it says whether we have text or
not okay so let's say final and this is
I I mean all of this is very similar to
this screen where we were creating a new
post remember this guy so we had a
texted and controller here that was
enabling and disabling this button is
very similar to that so we're just gonna
pretty much do the same code in there
okay so let's go ahead and say final
hashtags and we say we at we have a
state
and that starts with false then we want
to create a request for posts and
comments do you remember this guy
request for
posts and comments so let's say final
request is we have a state and we say
and we have a request for posts and cons
and let's go ahead and populate this guy
then excuse me
all right let's do that to get the
formatting right so the post ID already
is available for us okay and in here I
can see it says sort by created at so it
has it has quite a lot of parameters in
here and I think it would be really nice
if we provided some default parameters
in here that we don't have to then
specify at the call side so let's remove
the required from request for posts and
comments like this and then we say sort
by created at it should always be true
or should by default be true and the
date sorting let's not make it required
and we say date sorting newest on top
because that is exactly how we're going
to use this request actually and then
the limit is going to be null by default
okay so let's save this file and then we
have to just provide the post ID in here
so that's our request basically okay
good stuff so after we have the request
let's go ahead and watch all the
comments so we say final comments is
ref.watch okay and if you remember we
have a post comments provider so post
comments provider so now that we've done
that we can just give it a request for
posts and comments and it will give us
an eye trouble of comments back okay so
we say post comments provider it's going
to be Auto imported the prop the
parameter to pass to it is the request
dot value okay so let me just show you
what happened in here so if you look at
your request it's a value Notifier so
because we're using a used State and we
need to go actually get its value which
is inside here okay so we're literally
extracting the request out of the use
state in here okay okay so that's just
that's just flutter hooks to be honest
with you if you if you're more if you're
interested in flutter Hooks and learning
more about it please go ahead and watch
the Youtube video and that I have placed
in the flutter State Management and
playlist which is available for free and
you can watch it okay and there is a
dedicated video for flutter hooks
okay we have now we have the commons
let's go ahead and take care of our
um enabling the post button enabling
this little actually not here this
little guy
enabling this guy as soon as you type
something and then it's enabled okay and
this is very similar to what we've done
before in the creates new post view I
think we call it creates new postview
right here and if you remember we had
this little guy in here use effect right
with the listener and everything we're
pretty much going to do the same the
same thing in here so let's say use
effect like this and I think it's just a
function in here and we hook it to the
comment controller if the common
controller changes then this user effect
needs to be rebuilt then inside use
effect what we're going to do is to say
comment controller add listener like
this okay and then we say
um like that
and we say has text.value
as text.value is equal to yeah actually
that's a good suggestion from GitHub
co-pilot okay
good stuff like that and then we need to
just return oops I don't know where I'm
typing so we just need to return an
empty function in here like that okay so
this also works because you know it
takes a text field when it is rebuilt it
by default removes all its listeners so
even though we did uh create new posts
even though we did this as like a
precaution precautious step we remove
the listener we don't have to do that it
gets removed by default anyways when the
text field is rebuilt okay so if you see
in here we have an app bar bar so we
have to create a scaffold
with an app board that has a little
button in here so that will be maybe an
icon button or of some sort okay
so let's go ahead and create our app bar
and Scaffolding here so we say we return
is scaffold and we by default what are
we getting for an error I think
mixed with a class member okay let's see
what we're doing wrong in here so this
guy starts here and ends here okay and
in here we're returning a container okay
so here we should go and say return
scaffold right there
okay and we say app bar is an app bar
and the title and I don't actually
remember what we said for title it says
comments and we have that in a strings
file so let's go ahead and say the title
is a const text and we say strings dot
comment comments I think like that okay
and let's see if you can import the
right file views constants I think it's
right there okay so that's our app bars
title and then for actions oops here
we create an array and then we say
actions is icon button excuse me again
then this guy has two properties one is
the icon so we say icon const icon icons
dot send
all right and then we have an unpressed
so the important thing is that the an
icon Button as we've seen earlier it
needs to have a null unpressed if it is
disabled okay so we say unpressed so
here we should have a look at hashtags
which is our value Notifier we say if
it's value is true okay then we create a
new function in here otherwise we say no
all right then in this function we
should go ahead and basically submit our
comment to be posted in here so let's
create a new function at the bottom of
this class and we could call it maybe
submit comments with controller so let's
say
um let's I wonder what it we should
actually have as a return maybe a future
avoid because it doesn't really do
anything except for submitting so let's
just say future void okay future void
and we call it submit controller with a
submit
uh comment with controller like this and
this guy has two uh
parameters so we say a text editing
controller and we say controller and
also we take the widget ref
okay ref like this
and it's an async function so
um what we need here I mean we need a
widget graph because we're using a
provider which is called send common
provider if you remember send comment
provider
here right so we need a widget graph to
talk to that guy it's an async function
because we're going to await on the send
comment and Notifier so send comments
Notifier right it has a function in here
that returns a future send comma so we
need to await on this guy so that's why
we have an async function in here and we
need the text editing controller because
after posting a comment we actually
clear this field so if you look here
third comments after we post it this
text field gets cleared so that's why we
need a reference to the controller as
well okay so let's go and get our user
ID because we need the user ID to send a
comment so if you remember this this guy
send comment it needs a user ID and a
post ID okay so let's go ahead and say
um that we and the post ID of course is
right here okay
so we're going to first go ahead and get
the user ID so let's say final user ID
is ref and now here you may be thinking
oh should I use read or lesson or watch
you see this is a function that is just
going to get called and it has to
synchronous sorry it has to
synchronously do its logic it needs to
get the user ID at this point in time it
doesn't have to watch the user ID it's
not at all interested in refreshing
anything when the user ID changes it
just needs to know the user ID right now
and that is where you need to use read
okay so remember read is when you want
to get a snapshot of a provider's data
at that point in time okay so we have a
user ID provider which we need to import
so that's our user ID and you can see
the result is a string an optional
string basing so we say if user ID is
null then we can't do anything so we
just return okay
and then we say final is sent then it is
equal to a weight on a rat on the ref
and then we say we read our uh send
comments provider but we need its
Notifier and then we want to post a
comment I believe
let's see send comment it's called send
com okay
let's put a comment here get the
formatting right from user ID it is user
ID which is in our widget our post ID is
a parameter that is provided
where is the post I sorry the post ID is
here and where are we getting these
right oh the user ID was right here
sorry about that so user ID is not in
the widget user ID is the one that we're
reading here it's just a post ID that is
inside the widget itself okay
after that we need the comment
and the comment is coming from our
controller text and and once that is
done we're awaiting on this guy I
believe so let's put a comment here to
get a formatting a little bit nicer okay
then we say if
the comment is sent so if it's oops is
sent
then we say controller dot clear and
also we need to now dismiss the keyboard
you see at the moment what I've done in
here I've connected my simulator to my
computer's keyboard so it's like it's
simulating having connected a physical
keyboard to my iPhone that's why the
on-screen keyboard is not being
displayed however if the on-screen
keyboard was being displayed the screen
would look like this and if I say GGG
for instance and then post my comment
you can see the keyword gets dismissed
by default or automatically okay so we
need a we need a way to do that and you
can do that using Focus manager so let's
go ahead and create a little extension
for that so go into appearance activity
bar let's go to lib views extensions lib
views
we don't have extensions so let's create
a new folder and we say extensions and
Slash and we call this file dismiss
keyboard dot Dart okay so in here let's
say extension dismiss keyboard keyboard
on any widget so any widget can dismiss
the keyboard then we say void dismiss
keyword is just an error function and we
say Focus manager let's see if it
actually suggested the correct thing to
me I think it is right yes so let's go
to material
um sorry let's go to widget import
material so that we get Focus manager
and access to widget and this is how you
would dismiss a keyboard I mean I've
already written this code before and I
think that's how GitHub co-pilot knows
how to type this but you need to go to
focus manager the shared instance get
the component that has the primary focus
and call on focus on it okay because you
can have various components on the
screen that can have Focus okay
good stuff now that we have that let's
go ahead and just say dismiss uh
keyboard in here so we say this means
keyboard
boom
like this okay
good stuff we have our submit comments
with controller then we can go up here
where we were working on our icon sorry
icon button
and we need to work on its action so we
say if we have uh if we have text in our
controller then we need to go and say
submit comment and then we need to pass
our Commons controller in here and the
ref is there as well
good I think that's I think that's
pretty much it okay and we're not gonna
wait on it right just like that okay
then for we need to go after app bar and
start constructing the body in here okay
and remember if there are no comments in
here we actually have to display a
little uh animation which we call empty
contents with text animation remember
empty contents with text animation view
all right so right after the app part
let's start creating our body in here
okay
uh the body what we're going to do is I
mean there there's lots we have to do we
have to first wrap it in three layers
One Is Safe area
then in there we have to create flex and
then expand it and the reason behind
that is that what we want is a little
text field at the very bottom of the
screen so this guy has to be in its own
expanded with a flex of one
and then what we want after that is for
this screen for sorry for the rest of
the space to be consumed by either our
list and which is this guy or the
animation view so what could be a little
bit easier to be honest with you in here
is to go ahead and perhaps create
a flex and then put that in a safe area
and then we first work on this text
field all right let me get rid of the
keyboard as well okay so
good stuff so let's go ahead and create
a safe area so we say the body is oops
is a is safe area
uh
like this let me say save area and S
child we could go ahead and create flex
and then for the flex we say the
direction is vertical
direction is vertical I think we say
access that vertical something like this
okay and so we're starting with the body
so after creating this flex and this guy
has an array of children in here so we
say children and we could and I think we
actually should get started by creating
the
the text field at the bottom of the
screen this guy first and then get
started with creating this guy okay
because this is a little bit more
difficult to actually create I would say
it needs to grab the comments and then
use the win function on comments etc etc
etc so let's get started with creating
the um
creating that little text field down
there and we're going to put that inside
expand it all right with a flex of one
so we say expanded and flex is one and
the child is going to be and a line
because we want to align this guy at the
bottom center so we say align and
Alignment is a line
meant or did we say alignment Right
alignments.bottom Center like this and
comma and comma good
so we have that and then in there we're
going to create a little text field with
padding so let's say child
is aligned and then its child is a text
field then let's grab this guy and put
it in padding so we say padding like
that oh my God there's so much warnings
in here we can't even see the code it's
actually pretty nice it's like a really
beautiful uh
like a horizon kind of it's it's very
pretty but Annoying uh so in text field
let's go hand me to get rid of this we
could go ahead let's let's see the
alignment as well I think the padding we
want to we don't want to have padding to
the the all and all directions we just
want left and right so let's go ahead
and say padding and Edge insets only and
we say left is eight and right is eight
as well like this okay
so now that we have that in the child
itself we have the text field we could
go ahead and give it a controller so we
say first text input action we say then
text input action of send so the button
on the keyboard needs to be called send
you see in here send okay and then we
say the controller is a comments control
and after we do that then all those
warnings are going to go away because
all of a sudden textile is not const
meaning that none of its parents can be
con so all those errors go or all those
warnings go away okay
good stuff now that we have that on
submitted of this text field we need to
go and actually submit our comments
right so either you press the send
button to post your comment or you press
this send button and this is called
unsubmitted all right so we go ahead in
here and we say unsubmitted
then we have our value in here so let's
just call this comment all right and you
can see it should be string right and
then we say if comment is not empty then
we submit that con as you can see in
here okay
then what else do we have in here we
probably need to create a decoration and
to create this guy write your comments
in here so we say decoration and this
guy is a const inputs decoration
and then we go in here and we say for
the Border we create an outline input
border
like this
and also for the label text
we say strings dot write your comment
here okay so that gives it this look
right your comments in here
okay
Goods I think I think we're pretty much
done with the text field which is in its
own expanded all right what we need to
do is to work on our so we have the safe
a safe area flex and we have the
children we need to go in here and work
on this list or whatever component that
needs to be placed in here such as our
animation if we don't have any comments
All right so let's do that now since the
text field is it's uh is in its own
expanded widget we have to go ahead and
use expanded for whatever component is
going to be placed in here as well
because we need the flex property of
expanded for the rest of the component
so let's say expand it and for Flex we
say four a value of 4 will be enough in
here I think let's see the name
parameter child okay we're going to
provide that soon for the child of this
expanded we're going to go ahead and use
this Commons you can see in here let's
see comments is an async value and if
you remember we have this when function
on it which can produce a widget so we
say for the child we're going to use
comments and when
and this guy has three important
parameters so I prefer to place loading
in here
and then we provide the error Okay so
then in here for loading let's say for
loading we're going to go ahead and say
loading animation view all right so for
loading
and we have return const
loading animation view which we've
already created for the error so if we
couldn't actually grab any I mean you
need to be a little bit careful in here
because some people get confused with
what error actually means in this case
so let's say that you have a case where
there are no comments available on a
post are you going to get an error no of
course not you're just not gonna get any
data so you're gonna go into this data
and your array is going to be empty so
if you look at our comments provider
it's very very important actually if you
go to post Commons provider you can see
in here it creates a subscription
and we have a controller okay which
doesn't have any data and it starts
listening and you can see it goes and
reads comments and this array is going
to be empty and then it's a it applies
sorting to an empty array and then adds
that empty array to the controller so
you're going to end up with a stream
whose first value is an empty eye
trouble of Commons so you are going to
come here to on data it's just like your
data which is either of comments is
going to be empty so you're not going to
get an error the error is going to be
available if Firebase for some reason
for instance can't provide you with the
comments so or anything else that might
go wrong in the process but not having
data or having an empty itable of data
or Commons in this case is not an error
okay so for the case of error we're
going to be very obvious and say return
cons error animation view okay so we
explicitly say something bad just
happened all right
for the comments and when we actually
get the comments in the case of data
let's go in here and we're saying in the
case of data we call this guy comments
all right
good then we say if comments is empty so
now we have to take care of not the case
where we didn't actually get any data
okay so or sorry we didn't it's not that
we didn't get any data we actually got
data but the itable is empty okay so we
say return const single child uh scroll
view we create a single child scroll
View and in there and then we create an
animation so we say the child is empty
contents animation view with text and
its text is strings dot no comments yet
all right like this
and return like that so this is the case
of receiving an eye trouble of common
switch is empty okay so that's for
itself then otherwise if that is not the
case if we actually could have some
comments we need to grab a um a list
view but it also have to have refresh
indicator okay so let's go ahead and say
we return a refresh
indicator in here okay
so on refresh I prefer to have it in
here the child should be the last
parameter okay like this
upon refreshing let's go ahead and
actually refresh our comments provider
we've already done this before so not
much information required really then we
say refresh r at post Commons provider
and also if you want to refresh it on
the request.value all right like this
like this and if you remember this value
is our request for posts and comments
okay so we refresh our post comments
provider
okay that's on refresh and also in here
we have to kind of like fake a delay so
that the user sees the refresh indicator
for a second at least like this
okay and then because I mean the refresh
is going to happen instantaneously but
we need to kind of like show this
component for a few seconds so that the
user just knows that something is
happening maybe not just for a few
seconds even a second would suffice so
let's say return future delayed
and the delay is going to be a const of
duration seconds one like this boom boom
boom all right so this is how we're
doing the waiting excuse me
so for the child let's go ahead and
create a list View
excuse me so we say list view dot
Builder okay then we know the amount of
comments that we have so we could go
ahead and just pass the length to the
item count so we say item count and we
say comments dot length all right and
before that we could perhaps go and
provide some padding because you can see
there's some padding in here okay so
before item count let's say padding and
we give it maybe a const edge in sets
and sets all
and we say eight points from all
directions all right as you can see
eight points here here
Etc
so we have the item count now we have to
work on the uh item Builder so we say
item Builder
all right and this guy gets us the
context and index so let's say final
comments is comments elements at that
index remember comments is an eye
trouble so you can't say comments Index
this won't work there is no subscript by
default on I triple of any generic type
okay you can go ahead and create an
extension for it I actually provided a
flutter tips and tricks on my GitHub
repository which you can go and have a
look at you can create that extension so
you can actually do this on any eye
trouble but that is not in the standard
library for or it's not in Foundation
rather okay then what we're really lucky
with is that we don't have to create a
list file because we already have our
common style remember we've created this
guy before Commons tile all right
so let's say return comment tile
and we just provide provided with the
comments all right and that is it really
we don't have to do much more so we
should at this point be done with the
post comments view so we could go and
improvise a little bit and go into our
views let's see what we have it would be
really good because you see this is our
app on the right hand side and we could
go ahead and do maybe a hot restart of
the application
and let's see what we see on the screen
so if I do this and do this
and we are looking at our debug console
let's clear it and do a hot restart
uh
if we can do a hot restart in here
restart application okay so this is our
app
and what we could do is to go ahead and
take care of the screen so that I mean
just a little bit of improvisation just
to see our post comments View and when
you tap on this we want to go and see
the posts comments view so let's see we
have Main in here main view okay and in
main View
let's see what we have
so the main view which is this entire
View at the moment I think for all the
tabs we're using the user posts view so
let's go to user posts view and in here
we're gonna see if we can take our
tapping on the post so we have the post
grid view you see let's go into the post
grid View and you can see untapped we
don't have a mechanism to do anything at
the moment we should go to the Post
details view ideally which is this guy
but we don't have this guy yet so it
would be really good if he could go into
our comments View at least so we can see
if it works okay so let's say uh
Navigator and before we forget we say to
do remove this part uh this code before
we go to uh details view
so let's go ahead and say navigator of
context and then we want to push
a new route okay
let's see if GitHub copilot can populate
this so I don't have to type it by hand
all right so it's returning a scaffold
but we don't want that a material page
route I think we've already done this in
some other places before so I'm just
going to copy that code from here for
instance and just Chuck it in here it's
so much easier than having to type it by
hand so like this all right so in here
and we want to basically go into our
user sorry uh not this one we want to go
to this posts the comments view where
did we put it in
not in components we have it in post
comments view so it's called post
comments view okay so let's say post
comments view boom and let's see what
parameters we have to provide in here it
says post ID all right let's see if we
have the post you see we have the post
so the post
ID is right there okay so now we have
that I'm gonna hot restart the
application and let's see if our
application now works so if I tap on
this one we should go into its post
comments View and you can see we can
actually see the post common series
comments this button is disabled the
animation is displayed because there are
no comments yet and let's go to our
database which is this is our storage
this is our database you can see we have
posts actually there's only one post
available in our entire system which is
the current post that we're looking at
here okay and it has no comments you can
see there is no collection called
comments so let's say comments one
and then you can see the button is
enabled so if I press it then it is
displayed right here if I refresh this
page we should have a new collection
called comments okay and then there is a
comment right here it says common one
posted by this user and since I am the
person who made this comment I can
actually delete it so let's press the
delete button you can see that there is
a little bit of a dialogue if I press
the delete button on it you can see that
comment was then immediately deleted so
if I refresh the screen the comments
collection should be deleted as well
good stuff so it seems like this screen
is actually working so let's test the um
the Sorting so let's say first
and then we say second
and second should be displayed on top of
first because we're sorting actually
okay we're sorting descending so it
means the date the highest date is
always on top okay so let's delete the
so let's say third in here and delete
the second comment this time and see if
it deletes the correct comment yes first
and third are now available so now
inside our comments collection we have
to have two common success first and
then third okay that's really good a
huge step for us because now we not only
have our grid view but we also have at
the entire comments view available okay
in the next section
we need to start working on this guy
okay we've we've done the comments bits
all of that is done now we need to start
working on the post details view and the
key to this post details view as was the
key in pretty much all the other screens
we've developed so far is to First go
ahead and implement the various
components required to display this
view we need a video player we need this
button the like button we need the
comments button we need this component
right here that says username and then
some comments we need a date component
we need this component so we're gonna
make sure every bit and piece in this
screen is in its own component and then
we're gonna glue it together inside this
screen itself as we've done pretty much
everywhere else okay so let's go into
our app and perhaps we could commit our
code and remove this before we forget
okay boom we know now that works with
the common soup
I'm going to close this let's go into a
terminal and say with Git add all and we
say git commit done with commit comments
view like this I can't push because I
don't have a remote but if you have a
remote you can do a git push as well
okay
so now that that part is done let's go
ahead and work on our video view because
we need to have a little video player in
here if a user has posted a video okay
so let's start working on I'm going to
get rid of that terminal down there and
let's go to LIT views components and
let's see we are in lib views components
right here and let's create a let's oh
we have the post view so let's sorry the
post folder let's create a new view in
here and we call it post video view so
right click new file post video
view dot art
like this
and then we can go ahead and create this
widget basically this post video View
and what it needs is um
it needs to use flutter hooks it has
nothing really to do with a river pot so
since it is a pure
flutter hooks uh related component it it
can just be a hook widget okay so it
doesn't need to be a consumer widget
because it doesn't need the widget graph
so let's say we create a
how is I wonder what the best way is if
I say s statelet hook consumer
or should I say just stateless widget
let's create a stateless widget okay we
say stateless widget and we call it post
video View
video video
view like this and we delete those
Imports and import material instead
and then I'm going to turn this guy into
a hook widget
and it's going to import flutter hooks
as you saw right here okay
now that that is done I mean we don't
have to make any other changes a post
video view needs to work with a post a
post object okay so if you're going here
this is a post.dart so it needs to work
with a post okay so let's take that in
as a parameter so we say final post post
like this
then let's go ahead and take it as a
required property it's a required
parameter we say this the post boom okay
and we need to import post so we don't
get that error in there
then we need to have a video player
controller and we need to grab that
posts file URL and put it inside a video
player controller so let's go ahead and
say final controller is video player
controller okay it's also imported from
our video player package in here you can
see and we're working not with an asset
but with a network resource so we say
Network and we have to say it is the
post uh I think it's called file URL we
call it okay so that is the actual file
that was uploaded to our storage so when
we say file URL we mean let's see in
this user and we have images and found
oh we haven't uploaded a video yet I can
see so perhaps we could actually upload
a video okay so let's go ahead and see
if we have the upload video and upload
this video okay choose
and we say my first
video
and then we post it
okay its thumbnail should be displayed
correctly it's just that when we tap on
it we don't go anywhere so if we now
refresh the screen we this user doesn't
just have images but also has videos and
if you go into videos it's this guy so
this is the I mean this is the name of
that video file and if you go in here
into posts you can see there are two
posts this one is the image and this one
is the video and this is our app this is
not the complete application this is our
app right now okay so you see there is a
file URL and it ends with e7a and it is
the name of this file e7a right and this
is the complete URL this is the direct
URL to that file okay and that's what
we're creating a video controller from
okay
so then we have to create a state that
tells us whether this video player is
ready to be used so you say final is
video player ready then we say use State
and we by default we say false okay then
we need to create a an effect in here
because we want uh to know whether this
control I mean we want to know when this
controller is actually ready and turn
and flip this variable to true so we say
use effect
effect like this boom boom okay and then
we say controller oops let's put a
semicolon here we say controller and Dot
initialize I think it's called all right
and you can see this guy returns a few
short voids so we first initialize our
controller then we say then and then we
say value in here okay a function excuse
me then in here we say is video player
ready dot value is true
okay then we say controller set looping
so we want our animations to Loop so if
we go into the in here you can see the
animation
it will Loop soon there you go so that's
where I have filmed it you remember this
is not an animation view this is a film
that we made with QuickTime of an
animation view just so that we have a
film in the gallery of our simulator or
your emulator or your actual device okay
so this is pretty much displaying the
exact video that we have that we have
uploaded all right so we Loop the videos
we ensure that they don't hit an end we
always Loop them okay
then we say after the control is ready
start playing all right
okay now that that is done we need to
then return the controller dispose so we
say uh let's see return the controller
future void is an avoid function we just
oh we don't call the dispose let's just
return it like this because this is a
future avoid okay
uh okay so we're pretty much returning
this dispose function to be called when
this use effect is reused okay and the
key to this guy is our controller so if
controller changes this use effect needs
to be rebuilt basically all right
good we're done with that then we go
ahead and we say switch is video player
ready dot Valley okay then we say case
true
okay it's true if the video player is
ready let's create an aspect ratio so we
say return aspect ratio like this the
aspect ratio is inside the post okay so
this is so important otherwise our it's
it's an absolute nightmare to calculate
these things dynamically it's so good
that we thought about that and every
time we create a new post we have an
aspect ratio in the post already okay to
be consumed directly in the UI and the
trial for this aspect ratio is going to
be a video player of that controller
like this like this okay so if the video
player is ready then we basically
display it
then we say case false if the video
player is not ready like here we say
return const loading animation view
which is those fingers on a table do you
remember the blue one
and the case of default meaning that oh
we because we see this is a actually I
wonder if you have to have a default
case
the true and false should suffice really
but I wonder what happens if we get an
error maybe it's good to have the
default case anyways then we say return
const error
animation view like this okay this
should really not be called this
shouldn't be called
but if it does then we at least have a
case for it and then we can return
remove that that code as you saw from
the analyzer okay so this is it really
we have our post video view so this is
going to display this view for us if the
post contains a video
okay
exactly just like we did that
we need to go ahead and create a post
image view so if the post has an image
instead of a video we need to display
that so
let's see let's go to lib views
components lib views components post
right click on post and we say post
imageview.dart okay
uh and then in here we're going to
create a stateless widget it's very
simple because a post if you go to our
database in here you can see a post has
a
it has the thumbnail URL which we're not
going to display where we're going to
display the file URL as an image if the
file tab is an image okay so let's go
ahead and just create a simple simple
stateless widget so we say STL flutter
stateless widget and we're just going to
call it post image view like this all
right remove these two Imports and
import material instead material okay
then we also need a post so we say post
post like this this is our input and we
say required this post then in here we
are going to return an aspect ratio so
we say aspect ratio the aspect ratio is
the post aspect ratio and as child is an
image network network okay let's put
commas comma here comma here semicolon
and for the URL is the post file URL
just like we did in the video player and
then for the loading Builder let's go
ahead and add a nice loading builder in
here then we say if the loading progress
is null then we just return the child so
we say if loading progress is
not
then we return
like this return child okay
if it's not then we create a circular
progress indicator we say uh return
const center circle circular progress
indicator just like that okay excuse me
so this to me looks fine now we have our
post image view as well okay
after the post image view is done you
see now we have one image view if the
post is is having I mean no one is
making a decision in this view whether
this post actually has an image you see
we're not even looking at the file type
even in the video view we didn't look at
the file types so if you go in here I
think the file type wasn't there we just
we just try to load it okay so someone
has to make that decision someone has to
say okay if the file type is an image
then use the image view otherwise use
the video view so let's go ahead and
create that widget now we go in here in
the pose folder right click new file and
we say post
image or video view which internally is
going to use the image View and the
video view but it's going to make a
decision based on the file type so
stateless widget okay and we're going to
call the Post image or video view like
this remove these two useless Imports
and import material instead
then we're going to work with a post as
well so we say final post
post
if I can spell it then we say require
this post okay just like that
then in here we're going to say okay we
return a function that makes a decision
I know this may be a little bit weird to
you but if you want to make a decision
on what to display like with a switch
you can actually do a trick like this so
you basically create a function avoid
callback function and in here you can
say for instance return text
hello okay and after creating this
function so this is the creation of the
function you call the function and
whatever that function returns will be
returned from your build method okay and
this is this is nice if you're making
like a decision all right and you don't
have to do it like that you could also
just switch simply like this you could
just switch and post file type like this
and let's go ahead and add the missing
Clauses so let's import file type
like this all right then we say if it's
an image then return
excuse me we say return the post image
View
with the post and otherwise we say
return post video View
with the post like this all right so
simple very very simple okay and if you
have to add a default case as well in
here then we could just say return cons
size box like this all right
like that and to be honest with you this
is simply because uh the reason that
we're adding image video and then a
default in here is simply if you go
ahead and add a new file type then we
already have handled it there are two
schools of thought in here uh some
people say okay it's better not to have
the default because if we go and add a
file type and then if I go and add a new
file type an application just
automatically works and then I don't
know where to handle the new type sorry
the new enum case so that's one school
of thought and the other school of
thought is that I just want to be able
to add a new type and have my
application still compile so that's
another school of thought I have no
sides in here but I have chosen just to
handle the case like this if you don't
like it you can remove this default case
meaning that if you add a new file type
in here such as GIF then you need to go
ahead first fix the entire code base
before your application even compiles
okay so pick whichever school of thought
you belong to and then follow that but
I've handled it like this in this case
okay
good we have the post image or video
view which is this view that is
displayed on top displays a video player
if it's a video and displays a an image
if it is an image so my image let's say
image
post it in here and
if we go in here then you can see it
displays an image all right
good now that that is done we can go
ahead and start working on the other
components in our application and one of
the components is posting displaying the
post display name and message view which
is right here so if you look in here
and this one you can see it displays a
username and then it displays the text
that was posted so this is its own
component because the first part if you
can see it the first part is Bold and
the second part is not bald so we need
to create some sort of a widget that can
display this so we give it two part two
pieces of text and we say go ahead and
make the first one bold and make the
second one just normal text okay and
that is going to be its own component in
which we're gonna call Rich two parts
text okay it's a rich text that is in
two parts so let's go into lib views and
then we're going to go into components
in here and in components directly as we
have the file thumbnail view we're going
to go ahead and create the rich two
parts text okay so right click on
components and say new file rich I don't
know where I'm typing
here components right click new file
Rich two parts text Dot Dart
okay and then we say this is a stateless
widget like this we say Rich two parts
text
didn't remove these Imports and import
material just like in other places would
have saved me a lot of time if git sorry
if Visual Studio code already did that
by default
then we need the left part and the right
part so we say uh left part
and right part and these are required
sorry these are final string properties
like this and let's add them in here and
then we say required this left part and
required
at this right part like this okay
now that we have that we can simply go
ahead and create a rich text with two
text spans all right so let's go ahead
and say we return a rich text in here
like that
the text is a text spam so we say text
span like this okay and we give it a
Style by default so the color is the
same in both of these so we say that
this text band has a style
and let's see if it can break this into
separate lines like this boom boom and
then text like that and then we say
style is a
uh cost of text style and this guy has a
color we say the color is colors white
70 which is a little bit washed out
white Okay so it looks like this all
right
so that is our color and also we get a
give it a line height of 1.5 so we say
height is 1.5 like that all right
after that we're going to go after the
style uh provided with an array of
children so we say given that style we
want to have an array of children to
render the first child is going to be
the left part so we say text span
and we say the text is left part and the
second one is going to be the right part
so let's paste it in here and we say
right part
and make sure that the left part is bold
right like this
then we go ahead and we say style is
const text style like this and then in
here we're going to say font weight is
font
want way dot what do we have bold bold
is fine yeah and the right part what we
need to do also is to create a little
bit of spacing between them so this one
has to be bold but the right part has to
have a little bit of space before it so
let's say we create a string in here
like this a space and then dollar right
part okay so we always render the right
part with a little bit of a space before
it
so let's put a comment here like that
and I would say that we're pretty much
done with this component as well so now
we have this component on top and we
have this component right here so we
need to go ahead and write the rest of
the components okay
so what we need to do now uh is to work
on our post display name and message
view so we have the rich text component
that can render this but we need to
actually grab a post's display name I
mean the user who's made that post and
also grabbed the message for that post
okay so we need its own view which is
going to be a consumer widget because
it's going to work with a provider okay
so let's go ahead and I mean I hope you
you actually understand what I mean we
have a component that can render text
with bold and not bold but that
component has no idea what it has to
render now we have to create another
consumer widget which uses our Rich text
component but it actually talks with our
providers to grab the data to show in
this Rich text component okay
so let's go into lib views components
post
lib views components post okay and then
we're going to create a new component in
here new file we're going to call it
post display display name and message
view.dart like this all right and this
is going to be a consumer widget so STL
and we say consumer widget and we're
going to call it post display name and
message view like this okay consumer
widget has to come from Hooks riverpod
and we have to import material as well
okay boom
good this guy also has to work with a
post so we say final post because it
needs to know which pose to grab the
username from and also the message and
all that information is actually
available like if you look at the post
you can see that we have a uid as a
property so this uid we can extract and
then go into our users table and grab
that user okay you can see the cuid
starts with GX and ends with X1 and
that's exactly this user GX X1 all right
so let's go ahead we say we work with a
post and say required this post like
this
good stuff and then we go ahead and
watch for a user with that user ID so we
say final user info model is ref watch
then we say user info model provider
remember we already have that and the
parameter that we have to pass to this
guy because it's a family provider is
the user ID so we say post dot user ID
okay boom boom so this guy now gives us
an async value that's in there there's
an e is a user info model and if you
remember user info model has the display
name which is right here okay so this
way we get the user name basically all
right
so we go ahead and we say return user
info model because it's an async value
it has the when function all right I
don't have I think we don't really have
to go and put this loading for uh after
data we don't have to do that it takes
just time okay let's create a function
in here and we just say return a const
center child is a circular
progress indicator like this boom boom
and comma and it looks good okay for
error we're going to say complete this
for us
and it doesn't complete it so let's say
error and stack Trace now it's going to
complete it it seems like it changes
mind
and like this and then in here we're
going to say return const small error
animation view okay and that's and we're
using the small error animation view
because if this component
in here errors out we don't want to
display huge animation in the middle of
the screen we just want a little red
icon which is our small error animation
view okay
in case of a data we get the user info
model so we say user info model and here
you can see its data type is a user info
model then we create a little Rich two
parts text we say return Rich to parts
text and let's see for the left part we
need the user info model dot display
name and for the right part we're
actually going to display the message
for the post so we say post on message
then let's wrap this guy inside a little
bit of a padding you can see it has
padding to bottom top left and it has to
the right as well
so let's wrap this guy with padding of
eight I think suffices
okay that was that view so we're pretty
much done with this component now we're
done with this component we have a few
more components left such as this like
button the comments button and this
component right here and also our
separator and then we'll be done with
this screen as well I mean not with the
entire screen will be done with the
creation of the components that make up
the screen and then we can put the
screen together okay
good we're done with that component now
so let's go ahead and work with this
component that is right here given a
post we need to display the date and
time that post was created okay so let's
close this guy and go into lip views
components post
in here and create a new file and we
call it post date view dot Dart okay
like that and this is a stateless widget
so let's say flutter stateless widget
and we say post date View
and then we import material oopsie Daisy
not Cupertino but material
and uh let's go then we get a post so we
say final post
okay and then we say post and required
this post as you can see in here okay so
this part is very easy we just have to
create a date formatter and we and for
that we need intl so let's say import
uh let's see actually I wonder if if we
need the entire post
for displaying a date we don't need an
entire post to be honest with you we
could we could just get the date and
time so let's change this let's say at
date time and the type is also date time
and in here we just say date time okay
and we can then remove this import as
well let's just import intl now until uh
like this internationalization and in
here we create a formatter we say final
formatter so what is our format it seems
like the date is the day month and then
year
uh so the month it seems like it's full
so it's almost full it's actually the
mill way it's not
it's not showing like with numbers so it
has to be uppercase like mmm or
something
so let's go ahead and create this format
so we say the formatter is date format
and the date format let's see this
suggestion let's see if it fits this
criteria
uh seems fine to me actually I think
there needs to be a little bit of a
comma in between you can see after a
month there is a comma like that and a
year is fine we just need the time as
well so a little bit of a comma after
this as well in space and the let's see
if this is correct and hour minutes and
then the specifier here this seems fine
to me actually this is a good suggestion
but I get a co-pilot maybe our date
format is very common so it could
suggest it exactly right I wonder this D
I don't want it to say 0 1 October I
wanted to say like one October so I'm
just going to remove the Double D and
just put one D in there okay so let's
just say return and we return let's say
a text
and we say formatter formats are dates
time like this boom boom and then a
commander and let's give it some padding
as well so we say rapid with padding
of only because you see okay this guy
has padding to top left bottom right we
don't want double paddings between these
two components so let's just give it a
padding only from the left okay so
because otherwise we'll get twice the
padding in between these two components
and that doesn't look so good in my
opinion at least okay
good we're done with the post date view
so we just close that file
when we need to go ahead and work on now
is this likes view you see it says zero
people like this and as soon as I like
it this is one person like this and
remove the like one zero people liked it
so we need some sort of a provider that
can give us a stream of integers that
tell us how many people have liked a
given post a given post meaning that we
have to send a parameter to it then you
know it has to be a family screen
provider the stream being the stream of
integers of how many people like the
photo and then it has to be a family
provider because we have to pass it a
parameter of which post ID it has to
watch the number of likes for okay so if
we go in here I mean we haven't worked
with likes yet but if you look at our
complete database from the complete
application likes are stored in their
own collection okay so every like has
its own ID it knows which date it was
created on which post ID and by which
person so we need to go ahead and create
a provider that can go ahead and read
these likes for us okay
we haven't created the means to actually
create likes but we're going to do that
as soon as we work on this little guy in
here the little hearts okay
so let's go and create the provider that
can read the amount of likes for us at
least so we can be done with this view
right here okay so let's go into
lipstate likes and let's see if we have
that lib
State and we don't have likes so let's
create a folder we say new file and we
say likes
and we say providers
and post likes count provider.dart okay
it has to be a family Auto dispose
provider so we say final post likes
count provider it is a stream provider
of type family and auto disposed and it
returns an integer
and it expects a post ID okay
so it takes in a ref then we're gonna
say it takes not only a ref but also the
post ID as a parameter
like this and it has to then do its work
inside this function like that so let's
see if it can
do the formatting a little bit nicer so
you can see the code in its entirety
like this okay just like any other
stream provider we're going to create a
stream controller in here to return the
result for the stream provider so let's
say final
controller is a stream controller
which we need to import I think from
Dart async there we go and it uses a it
manages an integer and it's a broadcast
it's a broadcast controller okay
so the method broadcast isn't defined
perhaps I've messed something up in here
stream controller like this okay
and we say upon anyone listening to the
stream and we need to return a value of
Zero by default so we say controller on
listen anyone starting to listen to this
controller we say then controller
sync.add and we add the value of zero so
by default zero people have liked a post
okay then we say return a controller dot
string okay we've already done this
before many times and don't forget ref
on this pose and we get rid of our
controller in here so we say controller
close like this okay
good and we've already done this also
before so let's create a subscription so
we say subscription we say Firebase
firestore
and go into a collection uh sorry
instance
instance dot collection Firebase
collection name of likes so we go into
that collection then we say where create
a where Clause then we say the Firebase
field name dot user ID
uh oh sorry post ID we actually go after
the post ID because this is the
parameter that we're getting it should
be equal to post ID like this okay so we
say get us all the likes as long as the
post ID let's go into the database as
long as the post ID is equal to the
given post ID which is our parameter
okay
after we get that we go into snapshots
and also we start listening to that
snapshot so here we say snapshots
okay and there there we say controller
sync
sync add and I think that was a great
suggestion actually uh it it gets the
snapshots docs length so we know exactly
how many documents we're getting and be
at the length basically to the
controller okay so as many documents
that we could read is the amount of
likes that have been posted on that post
ID
and we then go ahead and dispose of our
subscription so we say sub dot cancel
like that all right so now we have a
provider that given a post ID it can
give us the count of likes and it's a
stream so anytime someone likes it then
we don't have to do anything we just get
the new like in here you can see in here
and also you know this doesn't work just
because I'm liking it if I was on the
screen as someone else in in the same
application but on another phone liked
this post then this will get updated
automatically that's the whole point of
a stream provider and actually listening
for changes into a collection all right
it's absolutely beautiful that's one of
the reasons I really really like
Firebase so
okay now that is done let's go ahead and
work on this likes count view okay so
this guy right here okay so let's go to
activity bar and into lib views
components uh lib views components okay
and in there we're going to create likes
count view so let's go ahead and right
click on it we say likes
counts view.art okay
and this is going to be a consumer
widget it needs to just work with our
new provider with the likes provider so
let's say STL and it's a stateless
consumer and we say likes counts view
let's import our Hooks riverpod and also
import material like this okay
and after that is done we can go ahead
and say we work with a post ID so give
us a post ID and we'll tell you how many
people have liked it so we say a final
post ID
post ID like this and we say required
this post ID okay
good stuff let's go ahead and watch the
amount of likes so we say final likes
count
is ref watch
and in here we need to watch use the
post likes count provider let's Auto
Import this guy boom boom
and like that
okay so we have our lights count and
it's an async value so let's return we
say return likes count dot when
and in here let's go ahead and handle
all these different cases for loading
we're just going to have a loading and
circular progress indicator and for the
error we're going to have this small
error animation view okay so I'm not
going to type those by hand I'm just
going to paste them like this so we're
done with it and we've already done this
many times before so we don't have to
explain it more okay
so for the likes count let's go and
complete this data in here and we say
int this gives us an integer likes count
okay then we say final person or people
because you see in here
if there is zero people who've liked our
post then it says zero people but as
soon as one person likes it it says one
person okay
if we don't say one people like this we
say one person but if it's zero or more
than one then we say people
so zero or more than one people but if
it's just one per and one then we say
person okay so we say person or people
and now we have to make our decision we
say if likes count is one
okay then we use strings dot person
otherwise we say strings Dot and people
okay and let's import our strings I
think it's in
components constants that was right
because we're inside components you see
so now that that is done we say we
construct the actual text we say likes
text
and then we say the likes count
which is this integer we first type the
count then we go to person or people
okay
and then we put the strings like this
we've already created the string before
you see it says like this okay and it
needs to be a little bit of space in
here as well okay now that we have that
we just create a text and we return it
like this okay
perfect so
it looks a little bit strange but I mean
that's what we need to do sometimes so
we're working with strings so it's a
little bit clunky here okay
likes count view is done so after that
we can go into working with actual
component for liking and disliking so we
have this component this component this
component we need to work on this and
this and we're pretty much done with all
the components required to create this
view okay
so in order to like or dislike we need
to create a request model object we call
it like dislike request so we know that
it is if it is if you've already liked
the post because you can't like a post
twice if you if you create a request to
like a post and you haven't liked it
before then we're going to create a like
object for you but if you create the
same like request and send it on the
same post where you had already liked
the post then we're gonna remove your
like objects okay and that's how this
works you see like and dislike so this
guy just is just going to create one
model object it doesn't know whether you
have light or dislikes it's our business
logic that's going to take care of it
not the UI okay so let's go ahead and
create this object so I wonder before we
continue maybe we should commit our code
as well so let's say git add all
and so we get command Whip and
components or the post details here okay
I can't push but you may have a remote
so you can push your changes
gonna get rid of the terminal let's go
and create this new view we're going to
go into lip State likes models sorry not
the view but the model object so
lip state
likes and we have providers let's right
click on likes and say new file and we
say models and then we say and like this
like request request dot Dart okay then
in here we're going to create an
immutable class we say class like this
like request like this
Foundation all right I'm going to say
show immutable
so this guy needs a post ID that you
want to like or dislike so we say final
post ID
post ID and then we say final user ID
and it we could say liked by all right
then let's create a Constructor for this
and we say const
and we say required required like this
like this and like that so this is our
model object it doesn't have any logic
it shouldn't have any logic logic in it
all right
so that's the model object itself now
let's go ahead and Define a like a
serializable object you can see any like
has three Fields date post ID and uid
and we have to create a model object
that is serializable to Json by
extending map view as we've already done
before so that we can just send it to
Firebase firestore
so let's go into lipstate likes models
State likes models and in here we're
going to right click and say new file
and create a new file called like.dart
okay
and let's say an immutable class uh like
and let's import foundation and say show
immutable
we say like extends map view off string
and string the keys are string and also
the values are string and let's import
Dart collection and say show map view
only okay nothing else
then after this we're going to go ahead
and take three parameters you can see
every like has date post ID and uid so
let's go ahead and say we have a like a
Constructor in here with three required
properties and we have the required post
ID we say post ID is the post ID like
this then we say user ID
user ID and also we have date time date
like this all right and then we go ahead
and we say required like this boom all
right and they're all required and then
we go ahead and we call Super with a map
and then in here we say Firebase field
name Auto Import dot post ID post ID
let's see if it can complete the rest
form so I don't have to type it myself
and and that seems fine to me this is
this is pretty much what I wanted to do
anyways post ID user ID and perhaps we
could actually change this user ID to
something like uh liked by so it's a
little bit more explicit that this post
idea was liked by this uh
user basically okay and at this date
okay so we have the like uh object so we
can go ahead
um
and create a provider that can like or
dislike and post okay so we give it a
like dislike request remember like
dislike request and this guy can go
ahead and find that post for us fine if
you've already liked it if we have it's
going to delete our existing like if we
haven't liked it before then it's going
to create a new like object and post it
to Firebase firestore okay
so let's go into lip State likes are we
there already Libs State likes yes we
have models and we have providers let's
create a new provider in here called
like this like post provider so right
click and we say like dislike post
provider.dart boom okay and this guy
since it needs to take in a like dislike
request it needs to be a family provider
and it's also going to be Auto disposed
so it gets disposed of a garbage cut
it's kind of garbage collected when it's
not needed anymore so we say final like
dislike post provider
referral Vita it is a future provider
because you see every time you call it
it just goes and does something and
comes back it's not a stream it's just a
transaction and this transaction is best
explained or expressed by a future okay
it has nothing to do with a stream it's
just a transaction one time only you
like you're done next time you want to
dislike you press the same button the
same transaction happens you dislike
okay so not a stream but a future
so hooks riverpot is imported
automatically then we say this is a
future provider of course it's going to
be a family and we say it's Auto auto
disposed then it returns a Boolean but
it manages like this like request so the
parameter is like dislike request and we
say like this like request in here and
this is our request and we have the ref
and the function itself is going to be
async and then we close it right there
okay
so this is how this provider is created
now let's go ahead and actually write
the code for it the first thing we're
going to do is to go ahead inside the
likes uh and this is actually for the
application that's already completed
okay we're going to go into the likes
collection and search for any like on
that given post you see on this given
post buy this given user ID
if you've already have that object then
we're going to remove your like meaning
you're gonna dislike that photo pretty
much okay or video so let's say final
query is Firebase for our store we go in
there we go into the instance then we
say into the collection collection of
Firebase collection name of likes
then we look for uh we look for any like
on a post ID we say Firebase field name
post ID should be equal to request post
ID and also there's there should be
another uh where Clause so we say where
Firebase field name the user ID
should be equal to request and Dot post
ID liked by all right now this is a
complex query because it has two where
Clauses and I think we need to create an
index for this as well but we'll since
it will soon see that in the terminal if
we need to create a
um if we need to create a query for it
because we will get an error in the
debug console and then we will just
click on the link to create the query so
it's not a problem okay then we issue
the get function in here okay let's put
a comma together formatting right and
now you can see your queries and actual
future of query snapshot okay
so let's go right after this and we say
final
has liked is we await on this query
like this and then we say then these are
going to be our snapshots so let's say
snapshot and we say snapshot
docs is not empty so if we actually
found any documents with that query then
we know that you have liked that photo
or video from before okay so we say
uh like this
uh first see if the user has liked the
post already or not something like that
okay excuse me
then we say if
has liked so if if you've already liked
this post from before let's put an else
statement then we say uh Delete the like
so if you've already liked it then we're
going to dislike the dislike the post
excuse me again
so let's create a try and cache Block in
here so let's say try and we say a catch
like this
and we don't need the error we just say
return false and in this case we just
say return
like this okay excuse me again
I think I may have to drink a sip of
coffee perhaps to fix my voice I've not
been talking I think non-stop for more
than an hour
so uh now what we need to do is to
delete that like so let's say wait await
on this query
and then we get the snapshots okay
and in here we're going to create an
async function like this
then what we're going to do is to say
four final doc let's see if it could
complete my code exactly as I want to
write it
yes that's correct that's
pretty much what I wanted to write so it
goes through all the documents in the
snapshot which should be at most one
because you can at most have one light
per per post okay you can't like a photo
twice
so we delete them basically like this
all right and then we return true
otherwise we would return false so uh
otherwise in the else statement we
should go ahead and say post a like
object all right
then we say final like is a new like
object we've already created that like
object from before remember the like
class in here and then we say the post
ID is request.post ID liked by is
request liked by and the date is date
time.now
all right
we have now the like object we need to
just go ahead and create a try cache
block so we say try and catch nothing in
here we return false then we go into
Firebase file so I try to post this like
okay so we say await on Firebase
firestore dot instance and we go into
the collection of Firebase collection
name dot likes and we just add this
document so easy we just add the like
all right so I would say that we're
pretty much done with this future
provider
the body might complete okay let's just
see where we've messed up in here try
Okay return true return false otherwise
try okay we haven't returned true in
this case so that's what the error was
for okay so we're done with the like and
dislike post provider
so uh what we can do is now go ahead and
work with a new provider that can allow
us if you go if you go in here you see
if you haven't liked the post before
then this button is going to be disabled
or yeah sorry not disabled it's not
going to be filled but if you liked it
then it is going to be filled so how
does this button know that what state it
should be well we need a provider for it
if we need actually a stream provider
that gives us a Boolean value and that
says okay have you liked it or not you
see you may be thinking oh wait a minute
but what was it that we just created
well this guy just likes and dislikes it
doesn't say whether you have liked or
disliked okay it just creates the like
object for you if you haven't created
one before for disclosed or remove the
like object but it doesn't tell you
whether you had liked or disliked okay
so we need a new provider that just
gives us a Boolean using which we can
render this little component here and
that is like the truth of working with
riverpod or pretty much any other state
magical solution in flutter you need to
ensure that you make separate components
you make separate reusable bits and
pieces for your application before you
put the UI together okay so anytime you
feel like oh you need a stream or you
need some sort of a value to come back
from your server well go ahead and
create a provider for it and then you
can use it in your UI easily so in this
next section we're going to go ahead and
work with this provider that is going to
give us a Boolean value using which we
can render this heart now that we know
which component we need to go ahead and
work with let's create the provider for
it so let's go in here into the activity
bar let's see where we're at the moment
we're in lip State likes and what we
need to do is to go in lipstate likes
and inside providers and create a new
provider so I'm going to close this file
that we have right right here and let's
work on our new provider which as you
know now is going to allow us to render
this button in here okay so it's gonna
tell this button whether we've already
liked a post or not and using that
Boolean and then this button is going to
be able to shape its own icon so we're
gonna call this guy has liked post
provider okay so right click on
providers new file has
liked post provider dot Dart and of
course we need to give it a post ID and
this guy is going to give us a Boolean
back so it's going to be a family
provider so we're going to say final has
liked post provider
and let's create a screen provider
stream provider it's going to be Auto
imported and it's going to be a family
provider Auto disposed so let's go into
new lines in here format it a little bit
so with any family provider we have to
first specify the output value so we
output the Boolean but we need a post ID
as a parameter so we say ref and post ID
post ID is our parameter okay and then
we go into this function so this guy is
a stream provider simply because as you
can see in here let's actually put a
comma in there to get a formatting right
and a comma in here to format the
parameters so this guy in here allows us
to like and dislike so it's a continuous
stream of events so it doesn't just end
and anytime you press this guy and we
send an event to our other provider
which is here like dislike post provider
it basically either likes or dislikes a
post and then this button should
continuously get updated based on
whether we've liked or disliked the post
okay so that is the reason it is a
stream provider this is a stream
provider we've already talked about this
before it should be backed by a stream
controller I mean it shouldn't it
doesn't necessarily have to be backed by
a stream controller but in pretty much
all our stream providers we're creating
a stream controller as the backing store
you may sometimes in some easy cases
where you're creating a stream provider
that provides you with some easy values
inside your application such as timer
that ticks every second you don't have
to have a stream controller backing it
you can just use stream and create a
periodic screen okay however since we
have some complex examples in here which
this guy has to go into Firebase
firestore
to look for likes then we need to ensure
that it is backed by a stream controller
so we say final and actually first
before we create our stream controller
let's watch for the current user ID okay
because we want to know that the current
user ID has liked a has liked or
disliked a given post okay so let's say
final user ID is ref.watch we watch our
user ID provider which is going to be
Auto imported and we say if user ID is
null if you don't have a user ID then we
should return a stream of bull with a
given value of false
so we just return this stream instead
okay otherwise we go ahead and create
our controller so let me get rid of the
activity bar in here
so we say final controller is a stream
controller and is a stream control of
Boolean we need to import Dart async
okay and then we return the controllers
stream we've done this business before
so let's go ahead and then dispose of
our controller as well upon the ref
getting disposed of then we say
controller dot what do we have in here I
think we have close yes close okay
good that is the basically putting
putting in the work necessary to
basically create the structure for this
function we haven't actually done the
functionality of this function so as
many other uh stream controllers that
we've created so far let's go ahead and
create our subscription okay so we say
final sub is Firebase firestore we need
to go into this particular
collection into likes and look for all
documents uh that have been liked by
this given user ID which is being passed
in here okay and on this particular post
ID which we can search in here so we
need two where Clauses okay so we go
into Firebase firestore instance then we
say the collection we say Firebase
collection name of likes
all right and then after this we go into
we say where
where the Firebase field name of post ID
is equal to the post ID then we create
another where but this time around the
user ID should be equal to the given
user ID okay then we get the snapshots
so we say give us the snapshots and
start listening then and so we say in
here we say snapshot all right now that
we have our subscription let's go ahead
and cancel the subscription upon
disposing of the reference so we say sub
dot cancel like that and inside the
listen function and we're going to go
ahead and say if
snapshot Docs
is not empty
so meaning that we actually found a like
for and posted by this user on this post
then we know that the user has liked
that post so we say controller dot add
true we know that you've liked it okay
otherwise we say controller dot add
false all right so anytime this
collection changes and then this TR this
will be triggered again this function
will be triggered again okay that's why
that's why we're doing this listening
here it's kind of like watching it
basically okay
good stuff and I wonder if we should put
a comment here to get a formatting a
little bit better okay
now we have our hasliked post provider
and we're going to be able to use it
inside our like button so we can
literally now go and create our light
button alright so I'm going to save this
guy and close this file go to appearance
and bring up activity bar and we're
going to create our like button which is
going to be created in lib views let's
see in here
if we can find it lib views what do we
have com we have components constants
create new posts and inside lib views
we're going to go into components and
create our like button in here and just
directly under a component so we say new
file we say like button dot Dart okay
so it should be lib views components
like button and let's see if we can get
rid of our activity bar as well so this
like button is just a simple consumer
widget because it needs to work with a
provider or perhaps one or two providers
okay and I would say actually it has to
look for user ID which is the user ID
provider it has to work with has liked
post provider
and also probably needs to work with the
like and dislike post provider okay but
don't worry about it all all you need to
know right now is just to create a
consumer widget so STL and we say
stateless consumer and we say like
button all right and let's import
hooks River pod then we're going to
import
material in here okay good stuff and a
like button all it needs to do is all it
needs to know is a post ID so it needs
to know that I'm a like button on which
post okay so let's say final post ID
post ID in here okay then say required
this post ID just like that
now that we have that the first thing we
need to do in here is to know whether
we've liked the post or not so let's say
final
and final has liked is ref watch and we
say has liked post provider and this is
a family provider so we need to give it
a post ID as you can see in here and
then you can see then we have an async
value of Boolean so we can literally
turn this Boolean of whether we'd like
the poster or not into a widget using
this async value all right so let's go
ahead and say then we return the has
liked when function in here okay we have
a few parameters to fill in and like
this comma remove this container from
there
then let's go ahead and do the error and
loading for the error I mean if we if we
don't get um
if we actually don't get any data me not
that we don't get any if we get an error
in in this transaction then let's
display we just say I think is the error
and stack Trace
that I could trace like this let's
return the uh cons of small error
animation view like this okay and in
case of loading let's go ahead and just
return a circular progress indicator so
we say and we have not that one we we
have a center in here okay and its child
is going to be a circular progress
indicator okay so that's that should be
sufficient
let's go ahead now and implement the
data function in here or the parameter
and when we get the data in here we the
value is going to be our has like flag
because it's going to be a Boolean so if
you have an async value of a Boolean
when you've called a when function
inside data you get that Boolean back
okay or whatever data this is if it's a
if for instance it's a simple class or
as a string or whatever it is that
string or class is going to be provided
here to you
and then we're going to create an icon
button so let's say return icon button
in here okay
let's see what the icon should actually
be so it is so the icon should be a
heart if we have already liked uh sorry
A Heart That is not filled if you
haven't liked the post yet and I have
filled heart if you've already liked the
post so we need to look at this one too
to determine what icon we should display
let's go here and we say then uh we
create a font awesome icon okay fa icon
and let's see if you can import font
fonts awesome and so that's our let's
see in here I think the parameter is
icon we say F A icon okay like this and
the icon is dependent on has light we
say if you've liked it then we say a
solid heart otherwise a heart okay
so that is the icon and then on pressed
we're going to go ahead and do the
actual work for the button press so
first we need to get the user ID because
we need to you see what we need to do
here is to create a like or dislike
request so like this like request this
one and this guy needs a post ID which
we already have but we need to also know
your user ID so let's go ahead here and
get a snapshot of the current user ID so
we don't want to watch the user ID so we
say final user ID is ref read and we say
user ID provider okay so we get your
user ID like this you can see it's a
it's a
um an optional string in here then we
say if the current user ID is null for
some reason somehow you didn't have a
user ID but you ended up on this screen
how did that happen then we return but
if you have a user ID then we create a
like and dislike request so we say final
like request is like dislike request
post ID and liked by is the user ID user
ID in here okay so now that we have our
request we can actually send it to our
like dislike post provider so we say ref
dot read and like dislike post provider
and then we have to pass it the like
requests like this
let's see what is happening undefined
like request request
like this okay and you see here we're
basically sending a message to like
dislike post provider we're not actually
interested in its response we're not
interested in its bull value all right
because we have has like post provider
here that is actually giving us the
Boolean whether you've liked a post or
not so this guy is only uh sorry
actually this Boolean I think is a
success so you see it return true and
return false so this this Boolean really
is indicating only whether we have
succeeded in liking or disliking about
so it has nothing to do with whether we
have liked the post or not okay it's a
huge difference all right the actual
Boolean that determines whether we've
already liked the post or not is coming
from our has liked post provider alright
so please keep that in mind this guy
only likes or dislikes this this guy
tells us whether we've already liked or
disliked okay so two completely
different providers
good stuff I think we're done with our
like button so it looks fine no unused
Imports either okay
after we're done with that we're going
to go ahead and Implement our comment
components so you can see in here in
this screen we have our comments done so
if I say comment one
comments one
and then I say comments to
and if you go back in here you can see
that we have this component in here that
is our Rich component just like it was
in here that tells us who posted the
comments and also what the comment was
we always display the last three
comments on this screen so let's go
ahead and make some more comments so we
say comments three
and then we say common four
okay boom
and then if you go back in here you can
always see that it says common two three
four it doesn't show command one so we
always display the last three comments
on a post in here okay
so we need some sort of a tile we need
some sort of a
um widget in here though we call it a
tile but it's not really a tile it's
going to use our Rich two parts text
component so rich two parts remember
this component that we created it can
get a left part and right part so all we
need to do with this new component that
we're going to develop is to give it a
comment say hey here's a comment go
figure out who posted it and display
that user's name and also the comments
message so this tile this new component
this new widget that we're going to
create needs to take in a comment object
here
okay and using this comment is going to
figure out who posted it from user ID go
figure out the username from that user
ID from our
user info model provider do you remember
we can give it a user ID and it will
figure out who who that person is it
gets us to display name for that person
okay and it's just going to display then
a rich two parts text in here okay very
simple so let's go to view appearance
and I just want to you see now that
you've come so far in this course I just
want to bring up something to you now
it's just like playing it's we're at a
point that we pretty much have all our
providers okay it's really just playing
with the providers it's just hey I'm on
this okay give me that oh I want that
one give me this
you need to strive really to create all
your providers and your notifiers first
and then once you have them it's just
really just like Lego put put them
together and you get new new things
basically okay so let's go ahead and
call this guy compact comments tile and
it's going to be in lit views components
and then we have a folder in here called
comment and let's go ahead and right
click on it and say compact compact
comment tile.dart
and in here we're going to create a
consumer widget so sdl and compact
comment tile
let's do our Imports two Imports in here
Hooks riverpot and also we need material
boom
we need as a parameter or a comment so
let me get rid of the activity bar in
here so we need our comments so we say
final comment oops let's Auto Import
this guy comment and let's add it in
here require this comments
all right
then in here we need to get the user
info whoever posted this comment so
let's say file
user info is ref.watch
okay and we say user info
model provider and this was a family
provider remember this guy
you see as a family provider as is
parameter it needs a user ID so we need
to go ahead and give it a user ID and
thankfully we have that in the comment
itself so we say comment
from user ID okay so this way we get an
async value now of the user info model
the person who actually made this
comment so you know the business now we
should go ahead and use the win function
so let's say we return user info when
okay boom then we have our error so for
error and loading we already know the
business as well we have to display a
small error animation before error and a
circular progress indicator so I'm going
to paste those right here and let's
import this guy
okay let's focus on the data what
happens when we get the data so let's
say user info okay then we need to use
our Rich two parts text so we say return
Rich two parts text it's Auto imported
we have a left hand side and a right
hand side the left hand side needs to be
the username which is inside the user
info so let's say for the left part
we're going to say user info display
name and the right part is in the
comment itself so the is the actual
comment message
all right you see how easy this was how
little this component is but how much
work it is doing it's actually resolving
a user ID to its user name sorry to its
displaying and it's also displaying the
common is doing it in two parts one is
bold the other one isn't so once you
have these small components as you can
see in here it's just so so fun to play
with them okay
good all right uh now that we have the
component that displays these Commons
let's go ahead and create a bigger
component that displays these three
comments okay so given an eye trouble of
Commons we're going to be able to
display them inside a column all right
so let me bring up the activity bar
again and let's go in lib views
components and comment
in here in the same folder that we
created this com compactcom comments
um tile right click on it and say
Compact and comment column
so this guy is going to wrap the tile
all right so let's say we have um I mean
this guy doesn't even have to be a
consumer widget it doesn't need to use
the ref so you just give it a list of
comments or I triple of comments it's
just going to display them all right so
let's go ahead and say that we want to
create a stateless widget flutter
stateless widget and we call this
compact comment column
all right let's remove these guys in
here and then we say material just like
that all right
so as an input we need an eye trouble of
common so we say final itable of comment
also import and we say comments oops we
can spell it and we say required this
comments all right
then in here we say if we don't have any
comments to display so if it's empty
then we just return a const size box
okay just like this boom all right okay
we are getting this error because we're
not returning a widgets in all cases
okay so we just return a side box and
you can do a shrink as well if you want
to because I think shrink in here let's
read the documentation for it creates a
box that will become as small as this
parent allows
okay and if we create a normal size box
I wonder how
perhaps we could say shrink okay if you
don't have comments or just leave it
like this I know that this one works as
well
so in case of actually having any
comments in here we're going to go ahead
and create a column
so let's say in here we return a column
like this
and also for children for now it's going
to be empty and let's put this guy
inside a padding
so you can see in here it has a little
bit of a padding you see to this left to
the top to the bottom
so so it's just actually to the top it
shouldn't probably have because we're
going to create a place a little
um divider in here and this divider is
going to have padding to the top and
bottom so for this component we just
want padding to the left to the bottom
and to the right okay so let's ensure
that we're using only in here so we say
left
bottom and right okay like this
so for the children of this column we
shouldn't create an actual array
actually let's go uh
first fix up the column so we want the
alignment to be from the start so we
want it to be from the left so let's say
a main axis alignment is main axis
alignment start and also cross axis
alignment is start so we say cross axis
cross axis alignment start so for its
children we're going to go into comments
and map them and we say comment and
before we forget let's turn this guy
into a um into a list so we say to list
otherwise we get that annoying error
everywhere so then we're going to go in
here and turn every comment into a
compact common tile so we say return
compact comment tile and we pass it our
common just like this and to be honest
we could make this an error function if
that's what you prefer so we can go in
here and say like this on error function
oopsie Daisy like this and this will
work too okay
so you see again very simple so just to
create this component in here that can
display all our comments with formatting
Etc
you just have to write this much code
because you already have the main
component that does the display ink and
if you even go into there you'd be like
oh but this is also very small yeah but
because the logic is in here so just
break our components into smaller pieces
um I think this strategy has really
worked for me generally not just in
flutter balls in Python rust
Swift you name it typescript everywhere
just break them down into smaller
components and your code becomes a lot
more readable
now that we have that and we're going to
go ahead and create a component
that will give us a post and because you
see once we go into the screen we don't
need just a post but we also need its
comments in order to display all of this
okay so the post will give us the image
and it will tell us whether you've liked
it or not because we have the post ID
Etc a post in itself you see in here if
you look at look at a post it doesn't
have the comments All right we just have
a post ID so let's see here is our post
ID but the comments are also important
in order to display this screen okay so
let's go ahead and create a new model
object that contains a post and its
comments so activity bar we go into lip
State comments models
lip State comments and models right
click and we say post oops post with
comments
okay so it's a it's a little bit of an
umbrella model object so we say
immutable
class and post with comments like this
import Foundation you know you know the
whole thing now
immutable all right and let's go in here
and we say final we have a post to hold
in hold on to and we also have an eye
trouble of comments in here to hold on
to all right let's create the
Constructor for this guy and we make it
a constant Constructor required
parameters in here required like this
okay and then let's go ahead and
Implement equality and also hash for
this model object okay we've already
mentioned that if you're working with
model objects in riverpod you really
need to make sure that they're Equitable
and hashable all right
so I'm pasting that in here because
we've already done this before so we
don't have to go ahead and go through it
again and let's just import I triple
equality and we're using either equality
from this package right here let's see
from collection all right simply because
if you have two comments in an eye
trouble and if you just do a comparison
between them they won't be equal if the
ordering is different so these two like
comment one and common two
need to be equal or need to be indicated
as being equal as these because they
basically include the same comments it's
just ordering that's different okay and
that's what this guy gives us I triple
equality okay it does it ignores the
ordering for us okay
so uh this should be a proper equality
relation Okay so
this is this is the simple
implementation for post with comments we
don't have to do so much more on it okay
then what we're going to do is we're we
need to create a Giants provider and
that gives us a given and so what we
need to do is to create this provider
that will we will give it a request for
posts and comments so this guy request
for actually we don't have it yet and so
we need to I think we need to go ahead
and create a request for posts and
comments but I thought we already had
that so let's say a request for post
we have it already so request for posts
and comments okay
and we've we've just named the file a
little bit strange post comments request
so we need to given a request for posts
and comments and we need to create a
provider that can actually give us a
post with comments so post with comments
so we need to go from this request to
this model object all right so this guy
tells us which post we need to actually
grab and also this guy says oh you need
to also give us the comments so let's
create a provider that fuses these two
together since it is a provider that
needs an input value it needs to be a
family provider and we're also going to
make it an auto dispose provider and
this provider needs to ensure that it's
watching changes to epocc it is watching
it so since we need that we need we need
since we need to watch a all the
different comments and the different
states of the post we need to make sure
that it's a stream provider so let's go
into lipstate post providers lipstate
posts
providers and right clicking here and we
say specific post with comments provider
specific post with
comments
provider.dart okay this is this is going
to be I mean it's going to be a big
provider because it has to do two things
not just get the pose ball so get its
comments but it is really internally is
very simple it's just using
subscriptions to Firebase firestore and
we've already done this many times
before so this shouldn't be a big task
it's just a lot of typing okay
so let's say final and specific post
with
comments provider Pro wider and then we
say this guy is a stream provider which
is going to be Auto imported then we go
to the next line and we say this is a
family provider and it's also Auto
disposed and then think about what it
returns it returns a post with comments
and as its input it gets request
for posts and comments okay then we go
to the next line let's define our
parameters we have the ref and then we
have the request
and then we say request is here comma
then we go in here create the function
and a comma to get the format right
okay so this is uh then in here we're
going to go ahead and actually create
the body for this provider
let's create the controller and I'm not
going to explain this part because we've
already explained it many times before
so we say controller is a stream
controller
and we say this is a post with comments
which is our output value
and we return the controller's Stream
like this okay
and then we go ahead and we say ref
on this pose and then we say uh stream
sorry controller
that's close
like this okay we're gonna have two
subscriptions in here then one
subscription to the post itself and
another one to
um to the comments okay
so
um let's go ahead and
Define these actually the post and the
comments so we say we have a variable
called post post and then let's also
import this guy
like this and then we say we have an eye
trouble of comments in here uh and it is
optional as well we say comments so
posts and comments have not been
retrieved yet but we're going to go
ahead and do them okay and before we do
that you see since we have two separate
uh subscriptions to Firebase firestore
and then those subscriptions are going
to set these values we need to ensure
that our output stream controller does
not get a post with comments that only
has a post or only has the comments so
we need some sort of a function in here
that is called for instance notify and
this notifi notify function will be
called by our subscriptions to Firebase
firestore as we will soon soon see and
it will read the post and it will read
the comments and if they both are not
null then it will create a post with
comments and it will then send it into
the controller okay and it will also
apply the Sorting required to the
comments from the request for pros and
cons because it has and it knows how it
should sort the comments so some sort of
a function some sort of helper function
that gathers these two values and then
can send them into the controller so
let's create this function so we say
notify and to some of you this may be
new that you're creating a function in
another function but that's completely
fine I mean it is actually encouraged if
you have to do that so let's say final
local post is post so we're going to
Shadow this post so that we know whether
it's null or not so we say if the post
is null if the post itself is null then
there is no point of being here so we
don't have anything to post okay so we
say final outputs comments are are
comments or an empty array because you
see if you get a post and if you haven't
yet retrieved its comments it's
completely fine to Output it in in our
screen controller but not the other way
around you don't want this subscription
to the comments uh collection to have
already received the comments but the
post isn't available you cannot
construct a post with comments without
the post itself however the eye turbo
might be null that's fine and that just
means that you've only retrieved the
post but you haven't really had the time
to actually retrieve the comments so
that's why we're doing this business in
here we say either take the optional
comments and if it's not present there
just take an empty eye trouble okay then
we're going to apply the Sorting apply
sorting from the request and let's
import this function okay we've already
done this before
so that's our output comets then let's
say we create the result we say final
result is post with comments as you can
see in here then we say controller
control
controller sync add result okay just
like that so this is our Note 5 function
okay
good now that we have that let's go
ahead and watch the changes to the post
so we say watch changes to the Post
and then we say final post sub meaning
that it's a post subscription then we
say Firebase firestore uh instance let's
go to the
um post collection in here okay so we
say it is the Firebase collection
collection name of posts oops
after we have that we're going to look
for uh you see we need a post with a
given ID okay and that is inside our
request in here uh like this okay so
let's say we need a where Clause so we
say
um inside this collection where then we
say Firebase field name of post ID
should be actually
I wonder you see this is not this is not
gonna work because we need to go inside
posts and we're looking for a post with
a given ID
not a field that is called post ID
because there is no field called post ID
this post ID is actually the field name
sorry the the field value in here so we
need to look for a document with this
particular identifier so and the way to
do that is to say field path
field pass and Auto Import and then we
say the document ID is equal to the
request post ID okay that's that's how
we should do it then in here we limited
to one so we only want one post without
ID then we say snapshots and then we say
listen all right after doing that before
we do the listening in here let's go
ahead and dispose of this guy and once
the ref is disposed off then we say post
sub cancel like this okay then we're
going to go ahead and do the actual
listening in here
so we say in here then we say if
snapshot
docs is empty oops
snapshot if snapshot Docs
is empty
so if it actually didn't find a post
with that identifier we have to null out
our post so we say post
and comments
so we didn't find a post we now have
both of them and then we say notify all
right and then we say return
good so and in this case actually to be
honest with you since the post is null
uh nothing is going to be I mean the
controller is not going to get a new
value right because it's going to hit
this point local post it's going to be
null and then we say return so you don't
really have to do the notify but it's
just nice uh Sim I mean if you look at
the code you'll be like okay we're
getting a post and comments and then
we're going to notify our listener if
you have to because then then the logic
will fall into this guy maybe this guy
actually wants to do some notifications
in here we don't know okay so this is
its own function with its own logic and
this guy shouldn't know about that it
just says okay here's the pose here's
the comment notify and then I'm done
okay so that's how that logic works
however if we do have a document so
let's get the dock so we want only the
first one you see we limited to one so
we say final Doc is Snapshot docs first
like this then we say if the doc
metadata has pending rights then we
don't want to actually get it remember
every post has this parameter in here
called created at is a timestamp it is a
field value I believe field value
yes it is a field value I believe let's
see field value
which is as you can see in here field
value server timestamp which which might
actually take some time to be calculated
so we don't want to get a post that has
pending rights because then we don't
have all the fields available to us and
then we will get some errors from
Firebase okay if that's the case so
house pending rights has to be returned
sorry I'm by saying has pending rights
has to be returned I mean that we
shouldn't process further if we have
pending rights okay otherwise we go
ahead and create a post so we say our
post variable is equal to post and it's
post ID is our doc ID and let's import
the post oops nope and then we say Json
is the doc data like this and then we
say notify so we got the post in this
case and then we notify our listener if
if any
after that we have to go watch the
changes to the comments so we say watch
changes to the comments
so let's say final comments query
and then we say Firebase firestore
instance and we're going to create a um
complex query here so we say we go into
the collection of Firebase collection
name of comments so now we go in here so
we're now exploring the comments
collection and in there we're going to
say we want every comment that has been
posted on this given post ID okay so we
say where
Firebase field name dot post ID is equal
to
our request post ID
okay
too many positional is equal to
like this okay and another uh actually I
wonder no but we got that already so we
don't have to have another where clause
in here okay what we need to do though
is to order these guys by their created
ads so we say order by
Firebase field name
oops Firebase field name or
created at and we're gonna sort them uh
descending
meaning that the newest ones are gonna
be at the top okay so to create an app
that has that is the newest is going to
be at the top so we say create it at
descending true all right so that's our
query now what we need to do is to go
ahead and look at this request if this
request wanted us to limit the number of
comments uh limits then we need to limit
the query otherwise we don't limit it
okay so let's go in here and then we say
final limited
comments query is
then we say if the request has a limit
it's not null
then go ahead and limit the query then
we say it's the comments query dot limit
request limit otherwise we just return
the comments
query like this so I hope that this is
easy to understand I mean this one is a
query as well you can see and this one's
also a query all we are doing in here is
saying if the request wants to limit the
number of comments then we're going to
limit the query right here using the
query itself otherwise we're just going
to return the query as it was before
okay now that we have that let's go
ahead and create a common subscription
so we're going to listen for this query
changes so we say final
uh limited sorry comments sub is limited
comments query and then we're going to
get the snapshots and then we're going
to listen Okay and then in here let's
call this guy snapshots or snapshots
maybe even
like this and before we forget let's go
ahead and cancel this guy right in here
cancel all right it's a very very easy
thing to forget and also a very easy
thing to do
just to cancel it immediately as you
create it without coding it because as
soon as you go into the coding part you
may forget
goody we have that let's go in here and
say comments is Snapshot docs okay and
we say where because we don't want any
pending rights because you see comments
also have a date if you go into a
comment you can see it's a created date
which is a time stamp we don't want any
comment that has a pending right so
let's say this is the doc we say Doc
metadata has pending rights it shouldn't
have it and after that word clause we're
gonna go and map every comment so we say
this is the doc and we say we create a
comment
and the ID let's bring it first as the
first parameter we say the ID is the doc
ID and the Json is the doc data like
this okay comma comma to list and I
think we're good to go after that boom
okay
like this
okay and after setting comments you see
this comments is this variable that we
just set okay so let's go in here you
can see comments we're going through the
docs making sure they don't have pending
rights let's put a comment here and also
we're mapping them to a comment all
right then after this let's just call
notify boom so we set the comments we're
done our common subscription is pretty
much done and you'd be surprised that
was really all we had to do I mean it
looks intimidating but it is really very
simple okay and just just a warning some
of these queries a sum or all of them
may actually require an index to be
created but don't worry about it we will
get a link from Firebase automatically
in our debug console if that is the case
once we run these queries okay
good let's just close that file and
we're done with that so
um
what we need to do then is to uh have a
look at our Notifier for deleting a post
before we can complete this screen the
screen has a sharing thing which has
nothing to do with any provider but it
has this deletion as well so we should
be able to delete a post and also uh
actually I would say deleting a post is
a little bit complicated and is a tricky
thing to do because you need to go ahead
and delete all the likes
uh you need to delete all the post's
thumbnail and image or video for that
post as well and all the comments so
likes comments thumbnail and the
original file so four things need to be
deleted okay so this guy is gonna be a
little bit of a tough one to implement
but we pretty much have all the
components required to actually to do
the work so it looks intimidating again
but it is not that difficult okay so
this guy needs some time to do its work
so once you delete a post it has to go
and delete a lot of things so it needs
to work with is loading okay so let's
create a Notifier a state Notifier that
manages is loading okay we've already
done this before so I'm not gonna over
explain it okay let's go in here into a
lip State posts notifiers uh lip State I
think we're already there lip State
posts
and we have models providers typedefs
but we don't have notifiers so let's
create a file in here and we'll say node
fires slash and we say delete Post State
not fire dot Dart okay gonna get rid of
the
activity bar in here and let's just say
class delete post States Notifier is
extending States Notifier of type is
loading okay that's what it manages and
let's create a Constructor for this guy
by default we're not loading okay and we
say
super false like this and let's do the
is loading Setter in here so we don't
have to manage our state so we can just
say is loading is equal to true or false
and that will set the state Force okay
then this guy has only uh one function
that's available publicly
and what it has to do is just to go
ahead and
um
create a so we need to just create a
function I think in here that says like
delete post and internally that delete
post is going to go and
delete all those four things that we
talked about the likes the comments the
thumbnail and also the original file as
well but I'm wondering I think actually
we need to create a transaction
that can for instance given a post ID
inside a collection so let's say in here
for instance comments if you want to
delete all the comments that belong to a
to a post so if we need to go through
all of these and look for every one of
these that has this post ID and delete
them in one go so we need some sort of
helper function that says go into any
collection with a given name and find
any object that has this particular
property called post ID and deleted
inside one go okay so let's create a
little private function a helper
function if you if you will and we call
it uh this I don't know let's say future
void it doesn't return anything we just
call it delete all documents okay and it
has two required properties in here so
we say or parameters post ID any is a
post ID and so it's going to look in any
collection for any object that has that
particular post ID and we say we also
need to know which collection you you
want us to look into all right
so let's go ahead and use Firebase
transactions in here so we say Firebase
firestore dot instance and we run a
transaction as you can see in here you
may have not done that before I think
actually in our app we haven't done that
before okay this is the first time we
we're using a transaction then we say
Max attempts so try to do this three
times if it fails then eject basically
we create a timeout in here with a
timeout of 20 seconds so let's say in
here 20 seconds okay
and then for the transaction itself it
was action we're going to create an
async function in here okay like this
then let's go ahead and create our query
so we say final query is a weight on
Firebase firestore instance
instance in let's go into this
collection that we were asked to go to
it is called in collection okay
oops it is it like this like that
and then we say where
uh where the Firebase field name of a
post ID is equal to
that given post ID all right so and then
we're gonna say get get this the results
of this query okay then we say go
through all the documents in this query
for final doc inquiry Docs
like this and we're just going to delete
that object so we say transaction
dot delete
I think there's a w function here yep
and we say Doc reference like this okay
so easy peasy this this is a little
helper function basically okay
and again I'm not going to explain these
things too much simply because otherwise
this course is going to be like 200
hours and this course is then going to
turn into a Firebase course and we don't
want that so let's focus on a river pod
and the logic behind our Notifier
so let's create the actual public
function for our Notifier we're going to
call it uh it's going to return a future
bull indicating whether it was
successful or not and you see
I just said it returns a future bull
indicating whether it was successful or
not and this bull May then be confused
confusing for some they may be like oh
is this pool like the Boolean of whether
we're loading or not
well if you want to make things easier
you could go and say type def
it has or succeeded
like this like see that
it's bull
you could just go ahead and say this
returns a future of succeeded and then
everyone will understand your code a
little bit easier okay but we're not
going to do that right now because
otherwise we have to go and do it for
every future of bull where the Boolean
indicates uh succeeding or failing but
that was just an idea if you want to go
ahead and implement it in your own
application so let's say delete post
excuse me
we have one required property in here
which is required and post the post that
you want us to delete
like this let's import post okay and
let's make this an async function so as
soon as you call this function we're
gonna start loading so and let me just
remove some stuff from here so we can
focus only on this function okay
so let's say that
um we start loading we say is loading
is true
it auto formats everything okay there
was no point in doing that so let's go
ahead and delete the post's thumbnail so
first we need to go in uh here in our
storage and under our user ID find the
thumbnails collection in here and delete
that post's thumbnail so we say delete
the posts thumbnail
so we say awaits on Firebase storage
this time not Firebase firestore then we
go into the instance then we say the
child
I wonder
a way to apply to Firebase firestore
instance
okay oh we have to get a ref right
then we go into the child and the first
child is going to be the user ID okay so
let's say we go into post dot user ID
the next child is going to be a folder
called thumbnails so we say child and
then we say Firebase collection name of
thumbnails
then the next child is going to be the
identifier of the of the thumbnail so we
say another child uh post thumbnail
storage ID and then we just say delete
so easy okay
then we're gonna delete the post's
original file so not the thumbnail but
actually the image or the video so let's
say a weight
you know what let's just copy this guy
and change the collection name to
um and let's put a comment actually in
here so let's just say delete
the post's original file video or image
okay like this then we say we go not
into thumbnails but also we go into the
post
file type
collection name
all right remember we added an extension
that given a file tab it can extract its
collection name so images or videos
remember that
and then in here we don't delete the
thumbnail but we say original file
storage ID delete okay
then we're going to go ahead and delete
all the comments that are associated
with that post so we say delete all
comments associated with this post so
then we're going to use our handy delete
all documents function so we await on it
so we say await boom boom in which
collection is going to be inside
Firebase collection name of comments and
it's oops
and the other parameter is called post
ID and this post ID is post dot post ID
like this so this is how easy it is for
us to delete all comments associated
with a post using this very handy
private function okay
and then we're going to delete all the
likes Associated uh
with this post so I'm going to copy that
code and say delete all likes Associated
then we're going to go into the likes uh
collection and delete all the likes
associated with the post
then we're going to go and delete the
post itself so we have to go into
Firebase firestore and find that post
with that ID and delete it okay so we
say finally
finally delete the post itself all right
good and I think actually it would be
really good if we could put all a whole
of this into a trying cache block so we
can return a Boolean properly so let's
say try
and um
I think for catch we don't need to
actually look for the error so we say
return false try returns
true okay and finally we say is loading
is false then paste the code as we had
it before into the try statement okay
so now we have to delete the post itself
so let's go ahead and say
final
Post in collection then we say Firebase
firestore instance and we go into a
collection of collection
Firebase collection name of posts okay
then we look for Firebase field name or
post ID it should be equal to the post
post ID all right and we limit our
search only to one document and then we
get that document so like this and we
also have to await on it okay like this
so then this will be our query snapshot
good then we go through the documents in
this query snapshot and we just delete
them but it should just be one if we can
find that post so let's say four
excuse me final Post in posts in
collection
I think we call it or post
in collection
dot Docs
and then we say
excuse me await post reference dot
delete
good stuff I think we're pretty much
done now with deletion uh of posts as
well and I think we're pretty much done
with this file actually so we can then
save this file and you know the drill by
now now that we have a Notifier we need
to have a provider around it okay so the
Notifier isn't enough on its own for it
to work in the world of riverpod okay so
let's close this file and we're gonna go
and open our activity bar and create a
provider for this guy so
let's go into lip State posts providers
we have the notifiers and providers
right click and create a delete
Post provider.dart in here okay
so let's delete post provider is going
to be very easy it's going to be a state
Notifier provider and it's going to work
with the delete Post State Notifier so
since this part is very easy I'm just
going to go I mean since this part sorry
it's not very easy it's just it's just
something we've done a lot before I'm
not gonna explain it a lot okay so I'm
just gonna just move past it quite fast
so let's say delete post provider
provider is a state
uh note fire let's see actually if
GitHub copilot can't finish this for me
uh it works with delete Post State
Notifier and it should work with is
loading
and let's import is loading let's import
this guy
let's import flutterer
Hooks riverpod and we don't need the ref
and in here we just create
a delete Post State Notifier like that
okay I think I think that's pretty much
what I wanted to write anyways okay so
now that we have that we can close the
file now
one more thing before we get into post
details views implementation and if I go
into someone else's post so these are
the two posts that I've made
and but these are two posts that someone
else has made if I go in there then
there is no delete button of course I
shouldn't be able to delete someone
else's post so somewhere we need to have
a provider that gives us a Boolean
indicating whether we can delete a post
or not if we can't delete it we
shouldn't display a delete button okay
so we need some sort of a handy provider
all right and this provider is going to
be one of the tiniest cutest post
providers that we've ever created okay
so let's go ahead and lip State posts
providers right there
and create a new provider and we're
going to call it can current user delete
post provider so can current user delete
post provider the dart okay so let's say
final can current user delete post
provider and this guy is going to be a
stream provider okay because it can
constantly tell us whether we are
basically the owner or not or you can
actually say that well this should be a
future provider ideally but since we're
going to watch our our current user ID
it should ideally be a stream provider
so we say this is a stream provider so
it's Auto important now now it's going
to be a family so we say it is a family
and it's also Auto disposed it needs um
it returns a Boolean okay but it needs a
post as its input parameter okay
then we go and we say okay and we get
the ref
and we get the post post in here and
this guy is going to be um
I wonder if we should create this as an
async asynchronous generator so let's
make it an async generator in here okay
so when you Market function as async
generator you can actually use the yield
syntax in here or a keyword in here to
yield an entire stream okay and what is
our stream you'll see you'll soon see
actually let's say final
user ID
so we get the current user ID we say ref
watch user ID provider okay
boom and you can see now your user ID is
a string so what we're going to do is to
say yield user ID as long as it's equal
to the post user ID okay
so we're basically generating we're
adding Boolean values right into our
stream without creating a stream
controller okay you see how beautiful
that was you could just yield using this
syntax okay so this will tell us if the
current user is the if the current user
has an ID that is the same as the user
ID who created that post okay good stuff
let's put a comment here to get a
formatting right okay it looks a little
bit prettier this way
so now that that is done we can go ahead
and finally work on the post details
view we can finally go in here and work
on this and to be honest with you we
have all the components okay and since
this guy's going to work with uh
dialogues as well like it's going to
work with this it's going to work with
this it needs to work with the mounted
property of a stateful widget so we need
to create it as a consumer stateful
widget not just a consumer widget okay
so let's close this
and let's go into lit views boom uh not
in state in views not in components and
we don't have a post details folder so
lib views and we right click on it and
we say post details slash post details
underscore view.darts
okay
so we say then a stf
consumer stateful widget and we call
this guy post details view like this
okay
good we have to do some importing in
here so let's first import Hooks
riverpod and then we're gonna import uh
material in here as well okay so that is
set
the only parameter this guy needs is a
post so it just needs a post to display
so let's say final
post post and then we say required this
post like this all right
so those are that's the only property
that we have to work with
so let's go in here in the post details
view the first thing we're going to do
is to create a request for post and
comments okay so that's going to be the
entire scaffold so let's say final
request is request
or posts and comments which is Auto
Import and then we say and we need some
properties in here so the post ID is
going to be our widget post post ID okay
then we have some other properties in
here so we want to limit the number of
comments to the last three so we say
limited to three excuse me
then we say sort by created at it should
be true
and also the date sorting we want the
oldest one on top you see we don't want
the newest one on top which is something
we're doing here the new newest one is
on top but here we want the oldest on
top all right and that's how Instagram
as well does it by the way and they show
the latest comment actually down here so
you have to like chronologically look at
the comments then we say date sorting is
date sorting Auto Import and we say
oldest on top all right so this is our
request
then we get the post we say final and
post with comments is ref
.watch and we say specific post provider
with comments and we send it our request
basically and this is now an async value
of posts with comments okay and so we
say
like this gets the actual post
together with its comments and then we
now have to detect whether we have to
display this button so we say final or
let's just say can we delete this
post we say final can the leads post is
ref watch and we have our can current
user delete post provider and it needs
the the post that we are asking to see
if we can delete remember this is the
parameter to it
and so that's going to be our async
value Boolean then what we need to do in
here is to go ahead and create our
scaffold so let's just create a simple
scaffolding here scaffold
and we could work on our app bar first
okay so the app bar it says post details
so let's say app bar and we say app bar
title is a text which is constant
actually cons text
and in here we're going to say strings
dot post details and I don't know where
we have this post details I think is in
views constants great stuff okay so boom
boom
goody so we have that now all right we
have the title now we have to go and
work with the actions we have the share
and the delete all right
so for the actions we have a list of
widgets so uh we're going here okay and
then we're gonna do the uh
basically create the actions really okay
however this share button also needs to
have some information about the post so
boom this guy okay it allows you to copy
that post for instance or save it to
files so we actually need to get the
file URL for the post for this share
button and the post is inside this guy
post with comments it's it's right there
okay so we need that so let's say this
icon button needs the post
well so let's say share button is always
present so you can always share then we
say post with comments when all right so
that's our first button boom
uh for the error and loony we've already
done these many times before so I'm just
gonna paste them in here arrow and
loading okay
let's import our animation View
now we're turning the post with comments
into this button remember okay the share
button so let's go in here and create an
icon button so in here we say post with
comments and again we're getting the
post with comments because sharing is
gonna share the file for this post okay
and that is available in the post with
comments
so in here we say return icon button
and we say the icon itself is going to
be a const of icon from icons.share
we already have that okay
and then we need to do the on press so
we say unpressed like this
and we say final URL now we need to get
the URL to the post and we thankfully
have that easily available we say post
with comments
with comments dot post and the file URL
oops not file type file URL okay
and then we can go into our sharing
um which is shared coming from share
plus package it says share dot share
that URL and the subject for that matter
is actually strings check out this post
easy peasy okay and that's how this
dialog will appear check out this post
and also the URL is available to the
sharing sheet okay and and the native
sharing sheet also on Android will be
displayed or whichever platform the
share plus actually supports I think it
also supports web and Windows and Mac if
I'm not mistaken
but you can read more about it on
popdiff
okay so that is our let's see which one
is which so put that's the share button
right here and then let's go ahead and
work on the delete button so we say
delete button or no delete button if
user
cannot delete this post all right so if
the if the current user cannot delete
this post then we are just going to say
nope no delete button for you otherwise
we display the delete button
so then we say if
uh can delete post dot value okay
or the value of false like this and then
we create an icon button so let's say
icon button and its icon is going to be
a delete so we say icon
on press this empty for now okay and
let's just turn it into an async
function
so if we can't delete then we display
and the icon button so let's go in here
so now we can actually work on the
deletion so you can see the delete uh
button when press displays this delete
post dialog so let's go ahead and create
a variable that holds onto that Boolean
value of the dialog presentation so we
say final should
delete post and then we say await on our
constant deletes dialog okay
and it says okay what object are you
trying to delete we say strings we're
trying to delete the post and that's
where this thing appears delete post are
you sure you want to delete this post
okay if you remember how we're using
this delete dialog
so we have that but we also have to
present it so we say present it on a
context
and this present comes from another file
okay and then we're gonna get that value
or the value of false so we say then
should delete
I would say should delete or false like
this
so now you can see that should delete is
a Boolean value in here and if this
value is equal to true so we say if
uh should delete
then we're gonna go to our delete post
provider and actually call the delete on
a simplifier okay do you remember this
delete post uh provider
delete post provider right here it has a
Notifier this guy and that guy has a
delete post function let's add a column
here while we're at it so let's go in
here and we say if we should delete it
then we say await ref read because we
want to just get a snapshot of our
Notifier we say delete post provider
dots Notifier okay and then we just call
the delete post function on it and that
is our widgets post
okay we're waiting on it and then we say
if mounted if our widget is mounted then
we have to pop
just like this because if you delete a
post you just have to pop from the
screen back okay
now I just don't want to delete this
post because it has so much information
on it which is important to the
implementation of this file I just want
to keep showing you this screen so you
know what we're developing so I don't
want to delete specifically this post
but just trust me when we delete the a
post we pop back okay
okay we're done with the icon buttons I
would say so we're pretty much done with
the app bar now we need to go ahead and
implement the body of our widgets so the
entire body is dependent on the post
with comments async value so let's say
body is post with comments and we use
the when function in here okay boom boom
and let's go ahead and do the error
handling and the loading and I'm just
gonna paste those in here boom and let's
import these animation views poof and
boof so the error animation view is
displayed if you get an arrow and the
loading animation View
if we're loading or while we're loading
okay
then let's go in here and we say this
data is posed with Commons
okay and then we can work with this
throughout this entire screen so now we
have to construct the screen but
thankfully we have all the components
required to construct a screen so it's
just really putting them together okay
they say final post ID is post with
comments dot post
dot post ID
this entire thing needs to be inside a
scroll view so we say return single
child scroll View
like this
okay and this single chart scroll view
has to have a column as a child so we
say child is a column
and this column has to stretch all its
components so to take the entire screen
and to the entire available space on the
screen at least okay so we say cross
axis so this way all right so from left
to right across axis alignment
alignments of we stretch everything like
this and then we start implementing the
children in here okay like this as well
so the first child is going to be the
post image or video view so let's say
the first child is a post image or video
View and we just give it the post so we
say it is post with comments
dot post okay that's the post itself all
right
um and also actually the question you
might be asking in here is okay but we
have a post in here but why are we
taking the post with Commons post here
well posts with comments is coming from
a provider meaning that it changes if
the provider detects change in Firebase
firestore but this property will never
change it's a final property so we get a
post but really all we need from that
post is its post ID okay so we could as
well go in here and say okay the post
details view doesn't need a post it just
needs a post ID just to clear up this
confusion you could go ahead and do that
if you want to because really all we
need is just a post ID from there and
then the rest we fetch from from our
providers okay so it could cause some
confusion I completely understand it and
if you want to you can just go ahead and
remove this and just say we work with a
post ID and that would actually be a an
improvement to this post details view so
if you want to go ahead and do it at
home please do it and I think it's
actually a good idea
so post image or video view takes the
post from the post with comments so it
gets updated as user makes changes to
Firebase firestore
after that is done we're going to go
ahead and create uh so this is going to
take care of displaying this then we're
going to create the these two components
so let's put them inside a row right
after this we're going to say a row and
then the main axis alignment is going to
start from the start from the left
basically main axis alignment main axis
alignment of start
okay then this guy has two children so
it has a like button and it also has the
comments button so we say uh
like button if post allows liking so
let's go into the children okay so
remember the like button and the comment
button need to be displayed only if this
post allows it remember we have the post
settings okay so let's go ahead in here
and say if the post with comments
post
allows comments or actually the first
one is likes so allows likes remember we
have this as an extension sorry not an
access as a getter goes into the post
settings and sees if you allow likes
okay so if we allow likes then we say
display the like button see how easy it
is we have all the components ready it's
just putting them together okay and then
we say
comments button if post allows
commenting on it all right comment
button is a little bit more complex
because it has an arm pressed and it it
is basically it needs to navigate to a
new screen so we say if post with
comments
that post allows comments in here okay
then we say we create an icon button
like this
or the icon let's use a
comments outline I think it's called
something like that so we say icon const
icon icons comment outline
outline a thing is called
I wonder which one it is I think it's
called mode comments outline so we say
mode comment outline this one
yeah it looks like that great so and we
also need the unpressed so we say
unpressed oops unpressed okay and on
press is not it doesn't have to be an
async function and all this guy has to
do is to go to uh post comments view
remember post comments View
this guy so let's go ahead and say
navigator of context
like this and then we're gonna push
like this and material page route
it's a lot of code and we don't need the
context so let's just ignore it or just
leave it and we're going to go to post
comments View
let's import that and it just takes a
post ID which is coming from our posts
ID which we are watching right here
sorry we're actually reading from this
but this is being watched so okay so
once you press this comment button we go
into the post comments View
great stuff okay that was a lot of stuff
that we had to do but right after this
row is done we need to display this
component in here okay so uh let's say
right after the row we say post details
and then we say show divider
error add spots okay so uh right after
right after these we need to display the
post details and a divider so let's say
we have post display name and message
View
and we want to go into post with
comments.post so we have to give the
post to this guy and then then displays
this thing right here then we have the
post date View
and we it needs a date and time so let's
say post with comments dot post dot
created at that's the date and time that
that needs then we need to go ahead and
create a little divider okay so let's
add create a divider
we give it a color we say colors White
70. which was that same color we're
using everywhere else okay and let's put
this guy inside a padding
like this so it has padding to all all
edges
and this guy needs to be a const
basically and we can remove discounts
from here okay
after that is done after that padding is
done we're going to go ahead and render
this
this guy in here which is which we
called compact Commons column okay so we
say compact uh let's say display the
comments we say compact
comments column and it needs the
comments so we say post with comments
comments okay you see it's really just
plug and play we're just playing around
now we don't have to do so much work
it's just like yeah this component is
available just put it in there
okay then we say if a post allows likes
then we need to display this uh
component in here but if a post doesn't
allow likes we shouldn't display this
okay because otherwise it says okay
there's no heart in here because the
post doesn't allow likes but we're
saying zero people like this what's the
point of it okay so let's go in here and
say display uh display like count
we say if the post Loops post with
comments
the post allows
likes all right then we're gonna go
ahead and render our little component in
here which is called like counts View
and it takes the post ID okay
and we need to pretty much put it inside
a row as well okay so we just display it
inside a row uh we go in here and we
wrap it with a row and then we wrap this
row inside padding like this boom
all right
I think we're pretty much done with that
and after all of these components are
rendered because all of these are inside
a single shot scroll view after this row
and after it is padding let's go ahead
and say add some spacing to the bottom
of the screen so this doesn't get stuck
at the bottom okay add spacing to bottom
off screen then we create a size box
with a height of 100 actually that was
great suggestion by GitHub Copilot
great stuff you may be surprised but we
are done now with the post details view
okay so we need to go into post grid
View and show the post details view when
someone Taps on a post so let's go in
here and then go into posts a grid View
and here we had this to do but what we
need to do now is to go in in there and
actually display the uh post details
view so I'm gonna copy and paste that
code because it is the material page
route which is very boring to write so
I'm going to Chuck it in here and just
import our post details view okay so
easy peasy so what is very important now
is that you hot restart the application
there is tremendous amount of code that
we've written which hasn't been tested
yet and all those are working with lots
of new providers stream providers and
some of those uh queries that we've
written are quite complex and they may
need some indexing okay an index to be
created for those queries so hot restart
the application boom
restarted application so we didn't
reload okay so we didn't do just command
s or control s so no reloading please
restart the application okay
then we go into our app this is the
completed app but we want to go into our
app which is right here so now if I tap
on this we need to go into our post
details view and I can see actually we
got an error in here so let's see what
we're getting
debug console okay and what could be the
error that we're seeing in here so
uh
let's see
we oh by the way we have so many
problems as well
these are in our tests made on unused
import postcode view unused import so we
could fix some of these as well by the
way before we continue
so let's go in here and what we can do
now is just to stop the execution of our
application completely save this save
this file as well what I'm going to do
is just to run our application start run
without debugging like this actually
let's go to the main Dart file
like this and I'm just going to say run
without debugging okay
so this could take some time it was a
while
and right now there is a new version of
flutter available as well so this is
going to be very fun so let's just say
flutter upgrade right in the middle of
the course so this is what I usually do
anyways uh and it's maybe good for you
to as well see a typical workflow for me
as soon as I see a new version of
flutter as I've always
if you can it's worth upgrading because
uh it is always good to have the latest
and greatest
um yeah actually I can't say always
usually is a good idea and but it can
sometimes break your existing projects
and you may not have any way of going
back and it will be quite difficult to
do for instance in the world of iOS
development it can be quite frustrating
sometimes when you download a new xcode
and nothing works just because that
xcode is buggy for instance okay
so what I'm going to do now is I'm going
to let flutter do its work then I'm
going to completely restart my IDE
because sometimes the the demon for
flutter and dart doesn't work so well
after upgrading so you will have to
restart your ID anyways so I'm going to
do that right now and then we're going
to continue the course after that
so what I did was to allow flutter to
get upgraded
um and we did that from the terminal and
I let that process just complete and I
restarted Visual Studio code and that
usually is a little bit of a clunky
experience because you may have to
restart Visual Studio code about twice I
think once for the flutter demon to get
started and then once once again because
of the plugins and that also get updated
so you have to restart Visual Studio
code because of those as well and but if
you if you're lucky you just have to
reserve once and everything will just
work after that
so after that was done I just ran our
application the app that we're working
on not the completed application in um
in IO simulator and if even if you run
it on a normal device as well or an
Android emulator you would have received
the same results as I did actually and
the results were that we got a little
warning in um in the debug console
saying that the query for retrieving a
post's comments which are these comments
you see this is the completed
application just so you know this is not
our app this is our app okay and the
iPhone 14 pro Max which I always display
to the left hand side of the screen is
the completed application so the query
that we created to display these Commons
and also these comments which have a
sorting order was a complex query and
that needed an index okay so the error
it looked like this it said unhandle
exception and then it says the core
query requires an index exactly as we
expected it and it says you can create
it here so I just copied this link and I
went to my browser ensured that I am
logged in with the correct user who has
admin rights to this project and I
pasted that URL in and after pasting
that URL in I received a screen that
looked like this I've taken I've taken a
screenshot of it so it says the query
this index has to be created on the
comments collection and you can see it
says we're searching my post ID and then
we're sorting ascending
um ascending post ideas ascending and
created at is descending okay so after I
saw that I pressed the create index
button and you will have to do the same
thing so I I created this index and
didn't show you how I created it and I
just chose to take screenshots simply
because I wanted to just be able to
continue recording the video without
having to wait for the query sorry for
without having to wait for this index to
finish building
so it in indexes usually take a while to
build and I just didn't want us to have
to wait for it and so but at least we
have the screenshots so you can see how
it will look like and what you also need
to do once you run your application in
the simulator
so what I can see now is that our app is
running without problem after flots are
upgrade as well and we can actually go
into a post and as you can see we have
first and third it says in here and
these are the comments that we've posted
however I can see that we this this
allowed actually comments on this guy
okay so let's go and create and either
either read this allowed comments or
there is a problem with our comments
button so if you go in here I can see
that there is a comment button so I kind
of am like confident that we've
implemented it correctly it's just that
we made comments on this post before we
actually implemented this screen we just
went directly to the comments view
remember so let's make a new post with
these leaves in here and I say allows
likes but this
but oh but I don't know why the keyboard
is perhaps in Swedish so I'm just gonna
go into English
but this allows comments okay so let's
just disallow comments in here so let's
post our photo
you can see the loading indicator just
kicks in and we go in here then and it
says allows likes but this allows
comments and I can see the like button
in here so if you press it then it says
one person like this it's it's really
beautiful I mean it just works
and so that's that one which allows
likes then let's go ahead and create
another Post in here with these and say
allows uh comments but this allows likes
okay so let's just turn off lights and
we post this photo as well excuse me
let's see what happens so you can see
the like button is gone it doesn't say
it doesn't say in here zero people like
this and then there's a comment button
we can go in here and we say comment one
and we post it we say comment two
we post it and we say comment three and
we post and I can see in here the
posting a comment doesn't display our
loading screen so let's just do a little
bit of
um searching here in our application for
is loading provider
in here and let's get rid of this debug
console down here and um at the moment
you can see that we are looking for auth
State loading and is uploading image but
we also need to look for some other
stuff like for instance uh
our delete post provider and we need to
look for so we basically need to display
a loading screen for deleting a post so
we're pressing basically this button
Let's test that as well by the way so
let's test this delete it boom boom you
can see there's no loadings displayed
but it actually works so let's go in
here and see if I can delete this guy
boom boom
I mean it is deleting but this guy is
not being updated in here and some
something tells tells me that maybe
deletion isn't really working as it
should so let's see if we're getting any
errors in here and we're not so let's
just let's just first take care of the
loading state in here okay so for all
those operations such as sending a
comment deleting a comment and also
deleting posts we need to display
loading screen as well so let's go right
after this we say final is sending
comments is ref
watch and we say send comments provider
okay and remember send comment provider
is hiding behind and sorry the state
notif this the Notifier inside the send
comment providers hiding behind us and
common provider okay and this guy is
exposing a is loading flag to us so
let's go ahead and look at this value
and you can see that now that this is a
Boolean value so we this has turned to
True when we're sending a comment and
and turn to false when the comment has
successfully been sent
after that let's say final is deleting
comment then we go into our ref watch
and we call it delete comments provider
okay and that is also a Boolean which is
our loading okay and last but not least
we say final is deleting post is
ref.watch delete post provider
and in case of any of these then we have
to turn the loading to True okay so
we're gonna go ahead and then say is
uploading image and then we say or is
sending comments or is deleting actually
this suggestion was absolutely perfect
Immaculate really really really good so
in all of these cases then we want a
learning to be displayed so let's hot
restart our application and then we go
here to the simulator and I can see
actually our posts were deleted so that
was really good it's just that this
screen itself unfortunately is not
really displaying the content correctly
I mean it still thinks that we have
these this posts and perhaps we do I
mean if we go in our app in here into
Forest store let's see which one it is
let's let me just remove the index from
here so this this is our app this is our
instance you can see Instagram clone
course founded let's go into posts and
see how many posts we have I mean from
the look looks of it we have four posts
actually okay so we have one two three
four and however we can't display the
thumbnails in here and it seems like
maybe we have succeeded in deleting the
thumbnails and also the images uh or
videos whatever we had I think these two
were images however we haven't been
successfully actually deleting the posts
itself and that's not good so let's have
a look at what is happening in here if
if I tap on this guy nothing happens
and that's because the post doesn't
exist okay or something is actually
wrong with that post so and we can see
in here caught by image resource okay so
we're getting quite a lot of issues in
here status code you can see that post
just simply doesn't exist
um or its contents basically so we can't
parse it and so what what I think we
could do before we continue
is the first perhaps to commit our code
so before we make any drastic changes
let's just say we bring up the terminal
and we say get at all
git commands and let's just say post
details details view details view but
the bug is in there we will fix this
soon okay I can't push my changes I
don't have a remote but if you have a
remote you can't push your changes right
now
so let's go ahead in here and into our
delete post provider okay we need to
have a look at this delete post provider
and see uh actually it's Notifier let's
see what we messed up in here okay so I
think by just looking at the Notifier we
should be able to somehow find the
reason our post wasn't fully deleted
so let's go through it one step at a
time we first say we're loading and then
we're putting everything inside a try
and catch and perhaps we could put this
is loading also inside the try and cache
to be honest okay like this
then we're saying we're deleting the
post's thumbnail and it seems like we've
succeeded in doing that but next season
but let's just let's just confirm that
okay so
it is a little bit difficult to know
which post it is which post these two
are but what we could do is go to the
posts that are working like this one and
it says allows likes but this allows
comments and let's find that post this
one says hello world so it's not that
one
this one says allows comments what this
allows likes and this one says allows
likes about this allows comments so it
seems like
this one allows likes but this allows
comments
I mean this is this should be one of the
posts that has been deleted because it
allows comments but this allows likes
and we can't see that posting here right
so it is probably one of those so it's
this post for sure and must have been
marked as deleted so the post ID is uh
let's go in here and look at its
thumbnail information you can see that
for thumbnail storage ID it says 98 and
217 and the user who posted it starts
with GX so let's go in here and refresh
our database or storage and the user is
GX is the only user in the system so
that's that and I believe it was an
image that we had posted so let's go
into images and let's see in here we can
see that the it says the thumbnail
storage ID is 98 so let's go to
thumbnails actually
like here and I don't see any ID in here
that says 98 so we just have two
thumbnails and it's these two okay I'm
100 sure about that okay and you can
actually download them to double check
so we have two thumbnails and we have
one image which is this guy
you can see it's that guy and we should
have one video and it's right here okay
it's this video so it seems like the
image the images and the backing store
whether there were videos or or images
they were deleted successfully it's just
the post itself that's not deleted so it
seems like it deletes posts thumbnail
worked the original file deletion worked
delete all comments associated with this
post and we're not 100 sure actually if
any of these work like deleting the
comments so this is the post that was
problematic so it's it is s l I think
and ends with m a
unfortunately we don't have any comments
in our system right now because it seems
like maybe we could actually delete the
comments so let's just assume deleting
comments and all the likes worked and we
just have to have a look at why deleting
the posts itself doesn't work okay so
let's have a look in here we're saying
go into the posts collection and we're
oh I see that is the problem you see
we're looking at uh deleting a post with
a post ID
but if you look in any post we don't
have a post ID
you see a post is in is in our system
identified by its I by its document ID
which is right here so this is the
problem Firebase field name instead of
this we should say field path dot
documents ID so that was the bug okay so
let's fix that and restart our
application okay so restarting the
application we now need to manually go
and delete these two posts okay so let's
go and ensure that we're actually
deleting the right right ones so this is
one of the posts that didn't work I'm
going to say delete document boom
and the other one not sure which one
that is it says allows likes but this
allows comments so and did you also see
when I deleted something in Firebase
itself our app understood that that's
the beauty of using providers and and it
was a stream provider as well right it
understood that and it just refreshed
itself we didn't have to do anything so
um this one for its message says allows
like spot those allows comments and I
think it's this one so we're not going
to delete this post this post says my
first video so it is this one so these
two posts are fine
but this one needs to also be deleted so
let's just watch our app actually and
see what happens if I bring our app in
here and resize the
screen a little bit in here okay
so let's see what happens then if I go
ahead and delete this guy our app should
understand that boom did you see how
beautiful that was that's really cool
okay
um all right seems like we're good to go
there let's just test this scenario one
more time so we're gonna go in here and
upload this image for instance okay and
we say here
here is in here image and we post it
and you see now loading in here actually
we had this loading before it's just
upon deletion that we didn't have
loading and also posting comments we
didn't have the uh loading so let's test
those scenarios but before doing that
let's just test the deletion okay let's
just delete this and see if it works so
one two three in here and then we say
delete
now it's working okay so we're able to
delete a post and let's go in here and
see if posting a comment works and
displays the loading and look at this
thing in here
we're having a little bit of a problem
with displaying the like button on the
sky and I wonder what the reason behind
that is so if we go to our debug console
boom let's see if we're getting an error
we're getting some errors in here
exception called exception caught and I
can see you see this this is giving us a
problem it says that image can't be
loaded so we have a problem with the
thumbnail for this uh
no it actually worked finally I don't
know what happened in here but let me
just hot restart the application so just
restart the application completely and
go into this video and see what happens
okay some stale data perhaps not sure
what's going here again seems like it's
working like it dislike it let's go into
another post
like it
and then we go in here it's disliked and
we like this one then we go into this
post yeah it seems like it's working
sometimes you just have to hot restart
your application for uh the state to
work but it was strange let's keep an
eye on it okay so let's go ahead and
post a comment on a post that allows
comments and see if loading is working
so I'm going to say comment number one
I just saw the loading very quickly okay
comments two
boom and let's just delete a comment and
see if loading gets displayed yes
and comment number one is displayed in
here and we can dislike the video as
well okay seems like all of those parts
are now working correctly okay
so what we could do is to go ahead and
work with our search screen so posting
videos and images working commenting
liking all that is working fine okay and
also these buttons get displayed or
removed whether we allow or disallow
comments or likes we can actually go
ahead and create a new Post in here and
disallow everything so we say everything
thing is disallowed and this shouldn't
display either the like or the comments
button okay so here you can see it's
just completely empty in here all right
good stuff
um after that is done let's just close
all these files that we have open in
here boom boom okay and I'm gonna get
rid of the debug console as well let's
work with our search screen so this guy
in here okay
at the moment we are displaying the same
screen in all of those uh cases so we're
displaying the home screen but we need
to go ahead and work with creating a an
actual search screen which looks like
this okay that you can enter a search
term and you can search for it and
otherwise you get this display this
little animation with text all right so
let's go ahead and start working on that
but before we do that let's go and
create a type definition that states
that a search term in our system is
defined by a string so a type definition
lip State posts uh ellipse date and we
go into posts and we have type depths so
right click new file and we say search
term.dart okay and we say type def
search term oops with a capital t is
equal to a string so let's just close
that
after search term the search term is
defined let's go ahead and work on our
provider so we need to provide posts by
a search term so we're gonna go into
lipstate posts I think we're already
there into providers and right click on
a new file and we say we want a post by
search Term Provider so this guy gets a
search term and returns an eye trouble
of posts if any if any are available in
the system okay so we say final posts by
search Term Provider is equal to a
stream provider provider
and let's just see if this Auto imported
hooks server upon and it did and it is
going to be a family because it needs a
parameter so we say family
and we say Auto dispose and we say that
this guy's return value is an eye
trouble of post so that's going to be
Auto imported and its input is a search
term which is going to also be Auto
imported let's see if I did this
correctly
yeah seems seems fine and after we have
that let's go and create our parameters
in here so we have the ref and we also
have the search term
search term
um I think we've already imported this
so I don't know why we're getting all
this all these problems in here
so let's see if I mess something up oop
this is the problem and then we have
that and here here
let's see auto dispose of ital pose and
we close it here then we open the
parenthesis let's see what it says
expect it to find okay did I not close
things properly so
let's have a look at this one more time
um
okay
I mean to me this looks fine an eye
trouble of post did I did I type
anything incorrectly let's just type
this from beginning basically Family
Auto displays
oh I think I was then maybe missing one
parenthesis yeah I'm missing one
parenthesis in here
because I start like this but I should
actually have this as a function like
this right that was that was the problem
of God okay and visual studio code
wasn't really helping to be honest it's
just asking me to do something else
okay we have our search term and now we
have to go ahead and create a stream
controller which is the backing for this
guy so we say final uh controller
is a stream controller of I triple of
comets okay and we're getting this error
because we have to import Dart async I
think boom boom sorry not comments but
we have post
let's just make sure we didn't import
the comments no okay after we have that
let's return the controllers stream so
we get rid of our main error in here and
we say ref on this pose then we say
controller dot cans close basically yeah
not cancel
good now we've set up the structure for
this provider all we have to do really
is go into the post collection and order
by created at and then start looking for
uh for posts
um that have this particular message in
them so search term we're just going to
search inside the
um
message I think of a post so here so
we're going to go into all posts in our
system and search inside their messages
this messages says image this message
message says everything is disallowed so
if you go in in the search and type
everything that post needs to be found
all right so let's go and look for all
posts in our system so we say final sub
is Firebase firestore and remember
search needs to search in the entire
system not just the user's posts okay
because this is when you want to go into
the community and search for a specific
post all right so it shouldn't just
search inside your posts
so we say Firebase firestore dot
instance and then we go into the
collection of Firebase collection name
of posts
oopsie Daisy posts like this
and let's put a comment here and then we
are going to order buy uh Firebase field
name of created at
and then in here we say descending all
right because we want the newest posts
to be on top
then we get the snapshots and we start
listening as we usually do all right and
I don't have to repeat this we need to
go ahead and cancel the subscription
upon ref dispose so we say cancel in
here okay
and when we get this let's just call it
snapshots
because I think it's our query snapshot
as you can see so we name it snapshot as
well all right now we have the snapshot
itself let's go in here I wonder if you
have to have this maybe not okay so in
here we're going to say final posts is
snapshots
docs so we get all the documents you can
see it's a list of query or it's
basically a list of Json basically okay
then when we get these docs let's map
them so we say for every dock so we say
Doc it creates a new post
and we say post it's Json is the docs
data and we also have to pass a post ID
which is the docs ID in here okay so
like this and like this boom so we now
get an eye trouble of post CC but what
we need to do is to go ahead and search
inside these posts for that specific
message so we say were and we say post
okay then we say the posts message to
lowercase
it should contain
it should contain our search term search
term dots to lowercase
okay and okay and a semicolon like that
so now that we have the posts we say
controller.sync
dot add and we say posts like this so
and again I mean not and not actually
again I haven't explained this before
Firebase unfortunately doesn't have so
so many good search functionalities in
it you have to kind of build like a
database of Search terms and then you
have to kind of like index them so it's
it's not as easy as working with like a
pure SQL database for search capability
it doesn't have the search capabilities
of a pure SQL database so we kind of
need to do a simple variant so we just
go through all the posts in the system
excuse me and then we search for a post
with that contains that search term in
its message it's not optimal but for
smaller projects it will work however if
you're building a bigger project then
you need to perhaps think of another way
of doing your searching okay
okay we're done with the provider so
let's go ahead and work on the the grid
view for searching okay so we're gonna
go into let's see we're gonna go into
lib views components and basically build
this guy in here let's see this guy okay
so a grid view that we can give it a
search term and it's gonna then talk
with our post by search Term Provider
and give us the post that conform to
that particular search term
okay so let's go into lib views and
components I think we have already that
folder
sounds familiar so lib views and inside
components then let's just create a new
component in here which we call search
grid view dot darts okay
so this guy is going to be a consumer
which is all it's going to do is that
it's it's gonna work with our widget ref
so we say STL is a stateless consumer
and let's just call it search grid view
oops like this and we need to import
hooks riverpot in here and we also
import material like this okay
good let's eat let's then get a search
term so we want to know okay what term
are you searching for and anytime this
guy changes you see this this in here
changes then we're going to update this
grid view okay so this part this thing
in here is not a part of search grid
view search grid view is just the grid
view so if I say A you can see this so
we're building this thing in here okay
so uh not the text field so to say so we
get a search term so let's just say uh
final string search term like this and
we include it as our parameter so we say
require this search term like this and
in here then we're going to go and say
if the search term is empty so if there
is no search term like this case
then we're going to display this screen
okay our animation view with a little
bit of a text so we say if it's empty
then we return const empty contents
animation view with a text and as text
is Going to Be Strings I think enter
your search term do you remember we've
defined this from before and it is
right here
and it says
enter your search term in order to get
started you can search in the
description of all the posts available
in the system so it's this one okay and
we also have another one that says enter
your search term here which is a shorter
text that gets displayed later on top of
this as a decoration so we want
excuse me we want this one enter your
search term here and this strings files
is inside live views constants so let's
go ahead in here and we say it's in uh
lib views constants let's see if we can
import the right file
uh views classes right there boom oops
this okay so now now that we have that
let's um now that this is complete then
we know if we go after this if statement
then there is an actual valid search
term okay so let's say we get the posts
we say final posts
his ref watch and we say posts by search
Term Provider and the parameter to that
is the search term okay remember it was
a family provider so this guy should
give us an ace against an async value of
our itable of posts so let's say we
return uh posts when okay let's see if
it can complete that for us
okay and then we can remove this Con
container from here okay
now for the error and loading I'm just
going to dump some code in here so we
don't have to type these over and over
again the error animation view we can
import it the data is an important one
so let's say this is posts and this is
an eye trouble of posts and it can be
empty so remember that so we say if
posts is empty then we return
um what should we return data not found
animation view so because if you go in
here and search for XXX you can see then
we displayed this animation in here okay
so let's say const
data not found animation view all right
otherwise we say that we return the
posts
grid view I think we have from before
and it says which posts you see this is
the beauty of creating these components
that they work with simple data types
just like an eye trouble of posts so we
can use this in many different places
and at the moment we're actually using
it in two places you see right here in
the search grid View and also in the
user posts view and believe it or not
we're going to later use it inside the
home view as well and remember the
difference between the home View and the
profile view so the profile view
displays only the posts that you have
made but the home view displays all the
posts in the system all right
so you'd be surprised but we're done
with that search grid view okay so that
was that was really it you see just
gluing things together really really
nice if you ask me
okay the search grid view is done excuse
me let's go ahead and implement the
search view itself
and this search view is going to be a
hook consumer widget because it needs to
work with a text text field and
subsequently a text editing controller
and I think it's called a text editing
control right text editing
controller is it is it not yeah it is so
let's go into our activity bar into live
views and inside tabs so lib views
tabs let's create a new tab in here
which we call a search view okay so
right next to tabs or right on tabs
right click and say new file we create a
new folder we call it search
folder and then slash we say search view
dot art
like that and let's go in here and
create our um I think it is an sdl hook
consumer I think that should be the one
a hook consumer widget yep because as I
said we need to not only work with
flutter hooks but also what our River
pod consumer and that is why and the
hook parts coming from flutter Hooks and
the consumer parts coming from a
riverpod okay so we say we call a search
View
let's do our Imports in here so we say
hooks River pod and we import material
in here good and this guy doesn't have
any inputs because it's just going to be
constructed fully on its own okay so it
has a text text field and for that we
need a controller so let's go ahead and
create the controller for it so we say
final
and controller is use text editing
controller okay and and then it's
imported flutter hooks for us
automatically okay
so now that that is done let's go ahead
and Define our search term so we say
search term is use State empty and then
we create an effect that updates our
search term based on the controller's
value changing so we say use effect
if I can see what I'm typing thanks
Visual Studio code like this and the key
for our effect is the controller so if
the controller is changed then the
effect is going to be disposed of and a
new one is going to be created so let's
say in here we say controller add
listener okay like this and we say
search term
its value should be updated to the
controller's text like this okay
and we have that listener so let's just
return an empty function in here like
this
good we have that set up now and I think
we're pretty much good to go on that
front so that's our effect which updates
the search term okay and this is a value
Notifier good so let's go ahead and
create a column with a text field inside
it so as a as our return value so this
guy is just going to be a column so we
say return column okay and
um I don't think we have to play with
the properties of the column so we just
go directly in children in here so for
the first child let's create a text
field and then I'm going to wrap it
inside some padding as you can see it
has some padding to the top and left and
right and I think it has to have padding
to all directions so let's just wrap it
within padding okay
and a text field has a controller which
is our controller so those warnings are
going to disappear because all of a
sudden none of this is const because of
the controller then let's go ahead and
turn the input action in here to search
and we also have to fix this I can see
in here okay maybe we could actually put
this entire thing inside a single child
scroll View
so let's go ahead in column and say that
this entire thing is inside a single
child scroll view as well so let's say
wrap it with a widget single child
scroll view like this all right
okay so we have that and we have our
text field let's go ahead and say the
action the key keyboard button for
searching should actually say search so
we say text input action is a text input
action oh actually I just saw it search
here okay
and then we create some decoration for
it all right because you can see in here
we have this little uh decoration here
that says entry resource term here and
also we have a little x button in here
which clears the search term so we need
decorations for those so we say
decoration in here okay
and for the decoration we say input
decoration I think is called sometimes
all these things that pop up on my
screen make it so difficult to type
input decoration all right
and for the label text we say uh we want
strings
dots enter your search term here okay
let's see if you can import the correct
strings as well so I think it's in views
constants great
and um then we're going to go into
suffix icon
suffix icon in here and we're going to
say this is an icon button as you can
see in here it's icon let's see how it
looks like it's just a cross okay and I
think it's called clear so we say it's a
const of Icon icons dot clear like this
and when you press it we're going to say
unpressed uh we are going to clear the
controller that's really good but also
we're gonna dismiss the keyword so we
say dismiss keyboard
keyboard like this and let's import this
extension which we've created before
okay
good that was that was a lot of work
that we had to do so after padding let's
go ahead and import our search grid view
in here so we say we haven't expanded
and its child is a search grid view like
this and the search term comes from the
search term dot value like this
all right seems like we're good to go
there I mean it wasn't I don't think we
need to do so much more so looks looks
fine to me and now that we have that
let's go into our main View
uh main view in here and you can see
right now for our tabs we have user post
views or post view user postview because
up to this point we haven't had any
other view to display inside our tabs so
you can see it's just a duplication of
the same thing in our app but it has to
be this guy so since we have the search
view let's just close that guy let's go
in here and say okay we display the
search search view now okay so inside
the main view we just in here we say
search view not the grid view but the
view itself okay and we save oh let's
just hot restart our application as well
so let's go in here and have a look at
search
I don't see actually anything displayed
and perhaps we have a bug uh kind of
this render box with no size okay that's
because of the single child scroll View
and expand it so let's go inside search
View and remove our single chat scroll
view this one and we say uh remove this
widget now all of a sudden this is going
to appear we just have to find a good
way to fix this issue in here you see if
I actually displayed a keyboard it
blocks the contents in here so somehow
we need to ensure that our grid view is
displayed inside some sort of a scope or
this entire screen is displayed inside
of scroll view so that the keyboard
doesn't just block everything okay but
we're gonna we're gonna take care that
soon so let's see if we're pretty much
done with that so if I display the
keyboard in here let's get rid of the
software keyboard and in here let's just
see what we can search for here we have
everything is disallowed let's search
for it disallowed yes it's right right
there let's see if we can find this post
and it says my first video
if I type video yes and if I type my
first
my first video
blah
good and that animation is displayed
there as well okay
so it seems like that we're pretty much
done
with the search view as well so I mean
done not fully done because we have a
little bug and there is this guy so we
need to fix this okay let's just keep
the search view as it is on the screen
and we're just going to go ahead and
commit our code up to this point so I'm
going to bring up our terminal and let's
just say git add all and we say git
command almost done with search View
okay and then what we need to do now is
to go ahead and fix our little search
problem that we have on the screen so
before we start fixing this issue let's
have a look at what the issue actually
is the problem is that we've placed
everything inside our let's go into the
search View and you can see that we have
a little column and in there we have a
padding with text field and also we have
expanded for our grid view this looks
fine when we don't have the keyboard up
meaning that we're using a software
keyboard like we're sorry a hardware
keyboard and but if we actually have the
software keyboard up just like a normal
iOS
user will see under screen then we'll
get this overflow in here so we need to
use slivers for this and we need to
basically go ahead insert inside this
grid View and in there we have the
actual grid view which is this post grid
View and we need to create another
version of this grid view which uses a
sliver grid view because if you remember
we are using this post grid view in
multiple places so this is going to be
used in in like two three places you can
see at the moment it's in two places one
is in here and the other one is here so
we need to ensure that we have another
version of this that uses a sliver grid
View and then we need to go in here and
create a custom scroll view okay so this
is going to be a little bit of a work
but that's okay we're gonna fix that
so right here where we have the posts
grid view let's create another file in
here and call it posts sliver grid view
new file we say posts
sliver grid view dot Dart okay and it is
going to be very similar to that one
which we have but it's going to use a
sliver grid as it is called so let's say
it is a stateless widget all right and
we call it posts sliver grid view like
this all right and then we're going to
go ahead and say that we return a sliver
grid I mean it is it's pretty much like
a copy of copy and paste of this code so
um but I'm not going to copy paste it
because it is going to require some
refactoring like changing the code a
little bit so copy pasting it is just
going to make it a little bit more
difficult to actually Implement so it's
easier in my opinion at least to go
ahead and just use sliver grid directly
like we're doing here so what's the
important material here material and
then we say a sliver grid
um and let's go and
in here say we have the grid delegate
okay so this is a const of sliver grid
delegate
with fixed cross axis count and we have
these in here so let's actually copy
this grid delegate right from the post
grid View and bring it into the screen
so boom boom okay so that part went well
now we also have to implement the
delegate itself and the delegate will be
a sliver child Builder delegate all
right and this guy has a parameter
called child count
which is our post's length oh we don't
have posts uh I thought we already have
posts oh we haven't imported sorry we
haven't added that as a final property
like we have in here so we have to have
posts in here okay so let's put it in
there and we import post as well and
then we say uh required this posts okay
then for the child count we say
posts.length all right and then we also
have to implement then our callback in
here as you can see okay we have the
context on index we don't need the
context and then in there we're
literally going to take the code that we
wrote right here boom boom boom and
let's take the thumbnail view all this
code we'll just dump it right here okay
uh
we need to import these so import that
one and then import the post details
view as well like this
good seems like we're good to go there
so we now have our posts sliver grid
view okay we don't need the posts grid
View for the uh search
okay we're done with the post sliver
grid view let's go into the search grid
view now so we have the search grid View
and and now that all of these are going
to be placed inside a custom scroll view
they need they need to be off some sort
of a sliver type so we can't just return
stuff like this so we need to say this
is wrapped inside a sliver to box
adapter okay inside the search grid View
so let's say anything that is returned
from here it needs to be inside a sliver
to box adapter so we say rapid widget
sliver to box adapter like this and we
make it a const and remove this cons
from here
so uh let's go in here and see nothing
is returned here things are returned
from here so this needs to be a sliver
to box adapter as well so you say wrap
it with Widget sliver to box
unbox adapter a const okay like this
and let's remove this const from here
like that
now the PostScript view itself is uh not
going to be in here we need to use the
posts sliver
grid view okay so we are going to leave
the posts grid view as it is to be used
in this screen
and this screen okay but in here we're
going to use a post sliver grid View and
remember to wrap these as well with a
sliver to box adapter so anything that's
being returned so rapidly widget sliver
to box that group excuse me and remove
add a constant here and we remove the
cons from here and also in here we say
sliver rapid widget sliver to box
adapter const and remove this const from
here okay
so that part is also done now so it
seems like our search grid view itself
is done now we need to go inside this
search View and take a look at what
we've created in here so we're not going
to return a column anymore okay so let's
say that we're going to return a custom
scroll view custom scroll View and
instead of children we're going to say
slivers okay so the first component here
is padding and we can't do that so this
text field needs to be inside a sliver
to box adapter as well so let's say
rapid with Widget sliver to box adapter
like this and the second component is an
expanded and we should now remove that
because we don't need that anymore since
we're inside a custom scroll view so
let's say this is removed remove this
widget and to be honest with you uh we
need to just go ahead and see how this
looks like on the screen so I'm just
going to hot restart the application and
have a look at the debug console so we
don't get any errors and go into the
simulator and then in here I mean it
looks the same but let's just see if it
works uh good as well you can now see
when the keyboard is displayed we can
actually see the contents of the screen
if I type A then this is displayed and
you can actually scroll within it okay
but we haven't really messed up any of
these screens in here okay so that to me
looks fine actually
good we have now fixed the problem with
the search view as well so we're pretty
much done actually with the search view
what would be really good is if you
could go ahead now and commit our code
so we could just say we're done with
search so terminal git add all and we
say git command done with search okay
goody
after that is done there's only really
one screen left for us to do and that is
the home view okay so we need to go
ahead and create some sort of a provider
and that can give this guy all the posts
within and the entire system so let's
close all these like this can I get rid
of the terminal as well let's go to
activity in activity bar and creates a
provider which we call all post provider
and then we're going to implement the
home View
so let's see where we are at the moment
we need to go into lip State posts celeb
state
posts and we have Rea provider a
providers folder in here let's create a
new provider which we call all posts
provider.dart okay
like that and in here let's create our
provider just and we say final all posts
provider okay
it is a stream provider
provider let's import that
flutter sorry Hooks riverpot and we say
it doesn't have any I mean at all post
provider it doesn't have any parameters
right so it's just going to be Auto
disposed it doesn't have to be family so
we say Auto this pose it doesn't have
any input parameters so we just say it
returns an eye trouble of post which is
going to be imported in here and we say
we have a ref ref in here and we're just
gonna do the calculation right there as
you can see here okay so let's go ahead
and create our controller so we say
final controller is a stream controller
imported from Dart async and it manages
an eye trouble of posts in here okay
like this
and oopsie Daisy a stream controller and
not a consumer and it manages an eye
trouble of posts we need another one
here okay and we return the controller
stream like this and we say ref on this
pose and then we say controller Dot
close all right so that's very important
this is this is a pattern we've done
quite a few times in our application now
so you know you know it by now all right
so let's go ahead and create our
subscription to the post collection
so we say final sub is Firebase Firebase
firestore and that's instance and we say
that collection and in here we say
Firebase collection name of posts then
after that we are going to order all the
posts by their creation date so we say
order by Firebase field name and we say
in here create it ads create it at
and then we say it should be descending
yeah sorry yeah this ending so the
newest post on top all right then we get
the snapshots and then we start
listening so snapshots boom boom and we
say listen and in here we get the
snapshots all right let's cancel the
subscription in here up on the display
disposal of our ref so we say cancel
and in here we've done this before so by
this point in time you know how to do
this so we say final post is snapshots
dot docs all right and we map the docs
so in here we say every doc creates a
new post so we say post boom and the
post ID is the doc ID all right
and it's Json is the doc you get
function oh no it's the doc data not get
doc data
like this all right and we
semicolon there colon colon looks good
and then we add it to the sink of our
controller so we say controller dot sync
dot add post like this all right so
we're pretty much done with the provider
that gives us all the posts in the
system it is possible that we have to
create an index because we have an order
bind here but if that is the case we'll
get a warning or an error in the console
and then we will have to go and fix it
simply so let's go ahead and create the
home view which is this guy in here okay
which uses this provider to display all
the posts and so that's also just like
building Lego because we have all the
building blocks already and we just have
to put them together
so let's go into lip views tabs let's
see where we are
lib views we have tabs we should have
two tabs by now the search and the user
posts let's create a new one and we call
it home
folder and the file is called home
viewed not darts okay this is a simple
consumer widget so let's see if we can
go in here and get rid of the activity
bar so we say STL it's a consumer widget
we call it home view let's do our two
Imports for Hooks riverpod and uh and
then we have material okay
so let's get our posts first so we say
final post is ref watch we say all posts
provider okay so this gives us an async
value of our I triple of posts okay then
we say we return and we need to put this
inside a refresh component you can see
in here all right so we say return a
refresh indicator
like this boom boom the child should
always be at the LA at the last
parameter so like this boom so upon
refreshing let's just say
um we create a function in here
like that on refresh and we just return
a feature that is delayed by a second
future
dot delayed const duration of seconds
one as you can see in here okay like
that that's the return value and in here
we're just going to refresh this guy
okay so we say ref.refresh
this guy all right
so that's going to invalidate this
provider and just gonna kick start it
again
now let's remove this container and for
the child we're going to use the async
value of posts and we say when like this
all right the error and the loading
we've already done many times before so
I'm just going to copy paste them in
here error and loading all right
and oops let's import these package for
in our app package and here as well now
in the case of data we're going to call
it posts and we say okay if posts is
empty then we return
um a const of empty contents
here so I mean we don't have empty
contents at the moment but we can't we
can actually simulate that simulate that
so if I delete all the posts in the
system let's go here and let's go here
delete
and let's go also delete this guy in
here delete delete
so if we search for a in here we don't
get anything and if we go in here now
you can see you have not made a post yet
please either press either the video
Blah Blah Blah perhaps you could display
another message in here like there are
no posts in the system something like
that so let's say
uh like that like that
and for the text we're going to say
strings no posts available all right and
let's import this guy so we say video
views constants I think it's the one all
right and you're more than welcome to go
ahead and create another string in here
that says for instance actually it says
no posts available nobody seems to have
made any posts but in here it says you
have not made a poster oh I see this is
because we're displaying our home screen
instead we should be displaying this
string which is which is correct
actually so we should use this string
okay so our app's going to look fine I
just thought that I I personally myself
got confused looking at this thinking
that it's the complete application but
it's this one that's a complete
application okay so if the posts are
empty we're gonna display this gun
otherwise we're gonna say otherwise
return posts grid View
and take the posts and display them all
right so now that we have the home view
let's go into our um main view in here
and in there let's let's say that we use
the home View
which is also imported hot restart the
application and let's go in here and see
if we need to create an index for this
screen
and it seems like we didn't actually
have to create a separate index so as
soon as we go and create a new Post in
here boom
hello world post it
then not only our home screen should get
this post but also sorry not our profile
screen only but also the home screen you
can see okay and as soon as I go in here
and delete this pose boom
we are kickbacked in here and the screen
also got refreshed automatically okay
so
that was that was really I mean it's it
is really strange to have been working
on this application for such a long time
and we've been like going through this
journey together and all of a sudden you
come to a point that you realize we're
done with the creation of this
application
there is not much more to implement we
have created the login and logout the
social logins the applications all set
up one thing you remember that before
you can release an application like this
you need to finalize the steps required
to create your uh basically set your
Facebook application into production
mode okay so that's something you need
to do in a developers.facebook.com
because you remember when we log out and
we try to log in with Facebook we get a
little warning on top as saying that
this is this application has not really
been submitted for review and this is
because we're in developer mode at the
moment okay so before you release your
application ensure that you do that
clean that up and I'm not sure how fond
of this name people are going to be I
mean if you actually want to go and
release this application in app store
and Google Play Store at least change
the name to something that makes more
sense and maybe customize the
application more so it's not like just
exactly like we've done it in the course
but that's up to you I mean this
application as it is it should be able
to be posted to app stores and get
accepted as well because there's nothing
illegal or nothing wrong that we're
doing it's just I'm a little bit unsure
about the name instant ground
um maybe you can come up with something
better and we have photo upload video
uploading we have comments likes and we
have
home screen we have a profile screen and
we also have search capabilities in our
application of course the ability to
upload thumbnails and videos and images
everything so you could say it is pretty
much like a a rather small brother of
Instagram so you can build a lot more on
top of this platform now you can go and
build the reels for instance so if you
want to create Instagram reels which is
kind of like Tick Tock you can go ahead
and allow the user to record a video and
then upload that video maybe with some
filters Etc so you have the capabilities
built into the app now all you have to
do is just to go perhaps build some more
providers and some more UI components in
order to be done completely with the
application
so I just want to thank you all for
sticking with me through the course
we've uh hit some bumps but I think we
ironed them out without a problem and uh
I thank you for this time that we had
together it was fun for me and I hope
that it was fun for you and I hope
really that it was a fun Journey for you
to go through with this
um you could say that you've gone from
maybe someone who was a beginner using a
river pod or maybe intermediate now to
an advanced user because uh riverpot is
pretty much just like working with
providers that's that's really all you
have to do I mean there are some tips
and tricks that I can provide for
instance like how you can change your
provider Scopes and Etc and those are
the things
those are the things that you will learn
also yourself when when you get better
and better at practicing with riverpot
so my advice now is just to go ahead and
use riverpod inside your own
applications and practice with it and
also uh please do support my YouTube
channel if you can by joining my Channel
or just contributing in other ways if
you can so that I can continue making
videos for you so thank you again and I
hope that you enjoyed this course and
and just before I close off I want to
also mention in the coming videos I'm
thinking of providing a little short
appendix to
and this video actually and there we'll
talk about riverpod cogeneration so stay
tuned for that as well and uh I I really
hope to see you in the next video